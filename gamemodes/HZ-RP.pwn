//=============================================================================//
//            Hermandad Zero    [Role Play - Español] CREDITOS : 	           //
//                     El puto chicle lo hizo todo.                            //
//=============================================================================*/

#define SCRIPT_VERSION "3.0 Los Santos"

#include <a_samp>
#include <a_http>
#include <core>
#include <float>
#include <time>
#include <file>
#include <morphinc>
#include <streamer>
#include <seif_walk>
#include <sscanf2>
#include <zcmd>
#include <Dini>
#include <YSI\y_ini>
#include <progressbar>
#include <mSelection>
#include <SetVehicleAttachedObject>
#include <G_ObjectsRot>
#include <mdialog>

// -================= AntiDeAMX ====================- //
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
  #pragma unused a
}
// -=================== Macros ===================- //
#define PlayerToPoint(%1,%2,%3,%4,%5)  	IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define	Params>							if(!strlen(tmp))
#define Connect(%0)						if(IsPlayerConnected(%0))
#define Loop(%0,%1)						for(new %0; %0 != %1; %0++)
#define	function%0(%1)					forward %0(%1); public %0(%1)
#define GText   						GameTextForPlayer
#define TDStr    						TextDrawSetString
#define Skin        					SetPlayerSkin
#define GlobalMsg   					SendClientMessageToAll
#define Message 						SendClientMessage
#define CheckAntiAbusos(%0)				if(AntiAbusos[%0] == 0){ Message(%0, COLOR_GRAD2, "{FF2E3F}[Sistema Anti Abuso]{FFFFFF} {E5E5C5}No puedes usar este comando sin estar en /adminduty {E5BEC5}"); return 1; }
// -======== GAMEMODE LIMITS =======- //
#define SHOWPATH
#define VEH 763
#undef MAX_PLAYERS
#define MAX_PLAYERS 107
#undef  MAX_VEHICLES
#define MAX_VEHICLES 763
#define MAX_NPCS 7
new npctoggle = 0;
// colors estado //
#define NEGATIVO    0xFF0000FF
#define POSITIVO    0x00FF00FF
// -========== COLORS ===========- //
#define COLOR_CLIMA 0xB1C8FBAF
#define CHATNEW 0xB1C8FBAA
#define YELLOW 0xFFFF00FF
#define COLOR_ASKQ 0xFF0000FF
#define COLOR_NEGATIVE 0xFF6A6AFF
#define WANTED_COLOR 0xBF6000FF
#define COLOR_DUTY 0x00CA00FF
#define COLOR_MEGAPHONE 0xFF9B6AFF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x9EC73DAA
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define COLOR_RED 0xAA3333AA
#define COLOR_RED2 0xFF6F6FFF
#define COLOR_ESTADO 0x00A5AAFF
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xDABB3EAA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_ORANGE 0xFF7F00FF
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE 0xE6E6E6E6
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xB60597FF
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0x458E1DAA
#define COLOR_OOC 0x66FFFFFF
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define TEAM_RADIO_COLOR2 0xF2D068FF // Amarillo
#define TEAM_RADIO_COLOR 0x9B9BFFFF // Azul
#define TEAM_CYAN_COLOR 0xFF8282AA
#define COLOR_BLUE 0x2641FEAA
#define TRY_GREEN   0x00BF60FF
#define TRY_RED     0xB90000FF
// Cmd Color - Admin by Keenan
#define ROJO_ADMIN 0xDC092FFF
#define VERDE_ADMIN 0x41FF2FFF
#define CELESTE_ADMIN 0x41FFECFF
#define AMARILLO_ADMIN 0xFFFF00FF
#define CREMA_ADMIN 0xFFFFD4D4
#define ROSADO_ADMIN 0xFF4FD4D4
#define MORADO_ADMIN 0x9600FF2E
#define ORANGE_ADMIN 0xFF7617FF
#define NEGRO_ADMIN 0x000000A8
// ==== PRAGMA ==== //
#pragma semicolon 0
#pragma tabsize 0
// -====== MISCELLANEOUS ======- //
#define MAX_TRUNK_SLOTS		(5)
#define MAX_VEHICLE_MODELS	(70)
#define MAX_PLYVEH_RATIO	(20)
#define MAX_VEHICLE_PLATE	(7)
#define MAX_CANCER  		(100)
#define MAX_EPILEPSIA   	(75)
#define MAX_HOUSES			219
#define MAX_FACTION			26
#define MAX_PLAYERTOYS		5
// -========= Dialogs ========- //
#define UMBRELLA7_DIALOG 1
#define EQUIPO_DIALOG 	3
#define EQUIPO_DIALOG2 	4
#define EQUIPO_DIALOG3  5
#define EQUIPO_DIALOG4  6
#define EQUIPO_DIALOG5  7
#define EQUIPO_DIALOG9  8
#define EQUIPO_DIALOG10  9
#define EQUIPO_DIALOG11  10
#define AYUDA_DIALOG   15
#define EQUIPO_PIZZA   16
#define COLOR_ADM      17
#define CELDAS         18
#define CPRISION       19
#define CELDA1         20
#define CELDA2         21
#define CELDA3         22
#define EQUIPO_NG      23
#define SEL_CITY       24
#define DIALOG_HIT     25
#define EQUIPO_HITMAN  26
#define EQUIPO_CORTEJUDICIAL  543
#define TEST_0         27
#define TEST_1         28
#define TEST_2         29
#define TEST_3         30
#define TEST_4         31
#define TEST_5         32
#define TEST_6         33
#define TEST_7         34
#define TEST_8         35
#define TEST_9         36
#define EQUIPO_FBI     37
#define DIALOG_SO      38
#define SEL_SKIN       39 //usado en /cropaid
#define EQUIPO_MECANICO 40
#define EQUIPO_GOBIERNO 41
#define Radios 42
#define Stats 152

enum ptInfo
{
	ptModelID,
	ptBone,
	Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ
};

new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjectsAll[220][HoldingEnumAll] = {
	{18643,1000,"Laser-1"},
	{19080,1000,"Laser-2"},
	{19081,1000,"Laser-3"},
	{19082,1000,"Laser-4"},
	{19083,1000,"Laser-5"},
	{19084,1000,"Laser-6"},
	{19086,5000,"DildoMotosierra"},
	{18675,1000,"Humo"},
	{18693,1000,"FuegoLargo"},
	{18698,2000,"Insectos"},
	{18636,1000,"GorroPolicia-1"},
	{19099,1000,"GorroPolicia-2"},
	{19100,1000,"GorroPolicia-3"},
	{18637,1000,"EscudoPolicia"},
	{19161,1000,"SombreroPolicia-1"},
	{19162,1000,"SombreroPolicia-2"},
	{19200,1000,"CascoPolicia-1"},
	{19138,1000,"LenterPolicia1"},
	{19139,1000,"LenterPolicia2"},
	{19140,1000,"LenterPolicia3"},
	{18632,1000,"CañaPesca"},
	{18633,1500,"Llave"},
	{18635,1000,"Martillo"},
	{18634,1000,"Palanca"},
	{18638,500,"Sombrero-1"},
	{19093,500,"Sombrero-2"},
	{19160,500,"Sombrero-3"},
	{18639,500,"SombreroNegro"},
	{18640,700,"Peluca"},
	{18975,700,"Peluca-2"},
	{19136,700,"Peluca-3"},
	{19274,700,"Peluca-4"},
	{18641,1000,"Linterna"},
	{18644,5000,"Desarmador"},
	{18865,500,"Teléfono-1"},
	{18866,500,"Teléfono-2"},
	{18867,500,"Teléfono-3"},
	{18868,500,"Teléfono-4"},
	{18869,500,"Teléfono-5"},
	{18870,1000,"Teléfono-6"},
	{18871,1000,"Teléfono-7"},
	{18872,1000,"Teléfono-8"},
	{18873,1000,"Teléfono-9"},
	{18874,1000,"Teléfono-10"},
	{18875,750,"Pager"},
	{18890,500,"Rastrillo"},
	{18891,500,"Bandana1"},
	{18892,500,"Bandana2"},
	{18893,500,"Bandana3"},
	{18894,500,"Bandana4"},
	{18895,500,"Bandana5"},
	{18896,500,"Bandana6"},
	{18897,500,"Bandana7"},
	{18898,500,"Bandana8"},
	{18899,500,"Bandana9"},
	{18900,500,"Bandana10"},
	{18901,750,"Bandana11"},
	{18902,750,"Bandana12"},
	{18903,750,"Bandana13"},
	{18904,750,"Bandana14"},
	{18905,750,"Bandana15"},
	{18906,750,"Bandana16"},
	{18907,750,"Bandana17"},
	{18908,750,"Bandana18"},
	{18909,750,"Bandana19"},
	{18910,750,"Bandana20"},
	{18911,1000,"Mask1"},
	{18912,1000,"Mask2"},
	{18913,1000,"Mask3"},
	{18914,1000,"Mask4"},
	{18915,1000,"Mask5"},
	{18916,1000,"Mask6"},
	{18917,1000,"Mask7"},
	{18918,1000,"Mask8"},
	{18919,1000,"Mask9"},
	{18920,1000,"Mask10"},
	{18921,500,"Beret1"},
	{18922,500,"Beret2"},
	{18923,750,"Beret3"},
	{18924,1000,"Beret4"},
	{18925,1000,"Beret5"},
	{18926,500,"Sombrero1"},
	{18927,500,"Sombrero2"},
	{18928,500,"Sombrero3"},
	{18929,500,"Sombrero4"},
	{18930,500,"Sombrero5"},
	{18931,1000,"Sombrero6"},
	{18932,1000,"Sombrero7"},
	{18933,1000,"Sombrero8"},
	{18934,1000,"Sombrero9"},
	{18935,1000,"Sombrero10"},
	{18936,500,"Chaleco1"},
	{18937,750,"Chaleco2"},
	{18938,1000,"Chaleco3"},
	{18939,750,"Gorra1"},
	{18940,750,"Gorra2"},
	{18941,750,"Gorra3"},
	{18942,1000,"Gorra4"},
	{18943,1000,"Gorra5"},
	{18944,1000,"Sombrero1"},
	{18945,1250,"Sombrero2"},
	{18946,1500,"Sombrero3"},
	{18947,1000,"Sombrero1"},
	{18948,1000,"Sombrero2"},
	{18949,1000,"Sombrero3"},
	{18950,1000,"Sombrero4"},
	{18951,1000,"Sombrero5"},
	{18952,1500,"CascoBox"},
	{18953,500,"Gorra1"},
	{18954,750,"Gorra2"},
	{18955,750,"Gorra3"},
	{18956,750,"Gorra4"},
	{18957,750,"Gorra5"},
	{18958,750,"Gorra6"},
	{18959,750,"Gorra7"},
	{18960,1000,"Gorra8"},
	{18961,750,"Gorra9"},
	{18962,750,"Sombrero"},
	{18964,1000,"SkullyGorra"},
	{18965,1250,"SkullyGorra2"},
	{18966,1500,"SkullyGorra3"},
	{18967,1000,"HatMan1"},
	{18968,1000,"HatMan2"},
	{18969,1000,"HatMan3"},
	{18970,2000,"HatTiger"},
	{18971,1000,"HatCool1"},
	{18972,1250,"HatCool2"},
	{18973,1500,"HatCool3"},
	{18974,10000,"MaskZorro"},
	{18976,1000,"CascoMoto-1"},
	{18977,1000,"CascoMoto-2"},
	{18978,1250,"CascoMoto-3"},
	{18979,1500,"CascoMoto-4"},
	{19006,500,"Lentes1"},
	{19007,500,"Lentes2"},
	{19008,500,"Lentes3"},
	{19009,500,"Lentes4"},
	{19010,500,"Lentes5"},
	{19011,500,"Lentes6"},
	{19012,500,"Lentes7"},
	{19013,500,"Lentes8"},
	{19014,500,"Lentes9"},
	{19015,500,"Lentes10"},
	{19016,1000,"Lentes11"},
	{19017,1000,"Lentes12"},
	{19018,1000,"Lentes13"},
	{19019,1000,"Lentes14"},
	{19020,1000,"Lentes15"},
	{19021,1000,"Lentes16"},
	{19022,1000,"Lentes17"},
	{19023,1000,"Lentes18"},
	{19024,1000,"Lentes19"},
	{19025,1000,"Lentes20"},
	{19026,1500,"Lentes21"},
	{19027,1500,"Lentes22"},
	{19028,1500,"Lentes23"},
	{19029,1500,"Lentes24"},
	{19030,1500,"Lentes25"},
	{19031,1500,"Lentes26"},
	{19032,1500,"Lentes27"},
	{19033,1500,"Lentes28"},
	{19034,1500,"Lentes29"},
	{19035,1500,"Lentes30"},
	{19036,2000,"HockeyMask1"},
	{19037,2000,"HockeyMask2"},
	{19038,2000,"HockeyMask3"},
	{19039,500,"Reloj1"},
	{19040,500,"Reloj2"},
	{19041,500,"Reloj3"},
	{19042,500,"Reloj4"},
	{19043,500,"Reloj5"},
	{19044,500,"Reloj6"},
	{19045,500,"Reloj7"},
	{19046,1000,"Reloj8"},
	{19047,1000,"Reloj9"},
	{19048,1000,"Reloj10"},
	{19049,1000,"Reloj11"},
	{19050,1000,"Reloj12"},
	{19051,1000,"Reloj13"},
	{19052,1000,"Reloj14"},
	{19053,1000,"Reloj15"},
	{19064,10000, "Santa-1"},
	{19065,20000, "Santa-2"},
	{19066,30000, "Santa-3"},
	{19067,1000, "HoodyHat1"},
	{19068,1000, "HoodyHat2"},
	{19069,1000, "HoodyHat3"},
	{19078,7500, "Loro-1"},
	{19079,7500, "Loro-2"},
	{19085,5000, "ParcheOjo"},
	{19090,1500, "PomPomAzul"},
	{19091,1500, "PomPomRojo"},
	{19092,1500, "PomPomVerde"},
	{19094,2000, "BurgerShotHat"},
	{19095,500, "CowboyHat1"},
	{19096,500, "CowboyHat3"},
	{19097,1000, "CowboyHat4"},
	{19098,1000, "CowboyHat5"},
	{19101,2000, "ArmyHelmet1"},
	{19102,2000, "ArmyHelmet2"},
	{19103,2000, "ArmyHelmet3"},
	{19104,2000, "ArmyHelmet4"},
	{19105,2000, "ArmyHelmet5"},
	{19106,2000, "ArmyHelmet6"},
	{19107,4000, "ArmyHelmet7"},
	{19108,4000, "ArmyHelmet8"},
	{19109,4000, "ArmyHelmet9"},
	{19110,4000, "ArmyHelmet10"},
	{19111,4000, "ArmyHelmet11"},
	{19112,4000, "ArmyHelmet12"},
	{19113,1000, "SillyHelmet1"},
	{19114,2000, "SillyHelmet2"},
	{19115,3000, "SillyHelmet3"},
	{19116,500, "PlainHelmet1"},
	{19117,500, "PlainHelmet2"},
	{19118,750, "PlainHelmet3"},
	{19119,1000, "PlainHelmet4"},
	{19120,1000, "PlainHelmet5"},
	{19137,5000, "CluckinBellHat"},
	{19163,1000, "GimpMask"}
};

new HoldingBones[][] = {
	"Nada",
	"Columna",
	"Cabeza",
	"Brazo Izq Sup",
	"Brazo Der Sup",
	"Mano Izq",
	"Mano Derecha",
	"Muslo Izq",
	"Muslo Der",
	"Pie Izq",
	"Pie Der",
	"Right calf",
	"Left calf",
	"AnteBrazo Izq",
	"AnteBrazo Der",
	"Clavicula Izq",
	"Clavicula Der",
	"Cuello",
	"Quijada"
};

enum pInfo
{
	pKey[24],
	pLevel,
	pAdminCP,
	pFacciones,
	pHelper,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pWalk,
	pExp,
	pCash,
	pAccount,
	pCheques,
	pKills,
	pDeaths,
	pArrested,
	pLottoNr,
	pJob,
	pJailed,
	pJailTime,
	pMats,
	pDrugs,
	pSpeed,
	pEctasy,
	pRitalin,
	pHeroina,
	pMarihuana,
	pLeader,
	pMember,
	pRank,
	pChar,
	Float:pHealth,
	Float:pArmour,
	pInt,
	pTeam,
	pModel,
	pPnumber,
	pMinutes,
	pMTexto,
	pIpod,
	pPhousekey,
	pPbizzkey,
	pPcarkey,
	pPcarkey2,
	pTimeCar,
	pTimeCar2,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pGunLic,
	pGafas,
	pTut,
	pVirWorld,
	pAntecedente1[64],
	pAntecedente2[64],
	pAntecedente3[64],
	pNote1[80],
	pNote2[80],
	pNote3[80],
	pNote4[80],
	pNote5[80],
	pSMS_1[80],
	pSMS_2[80],
	pSMS_3[80],
	pSMS_4[80],
	pSMS_5[80],
	pLighter,
	pCigarettes,
	pMask,
	pLocked,
	pAdvertencias,
	pAdminAdver,
	pDNI,
	pMSN[48],
	pEstado[18],
	pWeapon,
	pWeapon2,
	pWeapon3,
	pWeapon4,
	pWeapon5,
	pWeapon6,
	pWeapon7,
	pWeapon8,
	pWeapon9,
	pWeapon10,
	pWeapon11,
	pWeapon12,
	pAmmo,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pAmmo5,
	pAmmo6,
	pAmmo7,
	pAmmo8,
	pAmmo9,
	pAmmo10,
	pAmmo11,
	pAmmo12,
	pMaleta,
	pMochila,
	pCasco,
	pSIDA,
	pCancer,
	pEpilepsia,
	pDEagle,
	pShotgun,
	pMP5,
	pAK47,
	pM4,
	pSniper,
	pFStyle,
	pLeccion,
	pBusqueda,
	pAntiSIDA,
	pAntiCancer,
	pAntiEpilepsia,
	pRent,
	pRob,
	pDonateT,
	pCarPremium,
	pCarPremium2,
	pBanDuda,
	pSeguro,
	pWalkie,
	pHead,
	pMarried,
	pMarriedTo[64],
	pEntered,
	pPeces,
	pImplementos,
	pCarnada,
	pFichas,
	pDNIFalse,
	pDNIName[32],
	pSuciedad,
	pContract,
	pAnilloCom,
	pAnilloOro,
	pCollar,
	pAnilloDia,
	pPulsera,
	pAretes,
	pReloj
};

new PlayerInfo[MAX_PLAYERS][pInfo];

/*  AttachedObject Info

	Index:
	0. We will use it for attach on hands.
	1. We will use it for attach on spin.
	2. We will use it for attach on head.
	3. We will use it for attach on eyes.
	4. We will use it for attach on Optional.
*/

// AttachedInfo

	new	Att_Obj_Slot_0[MAX_PLAYERS][20],
	Att_Obj_Slot_1[MAX_PLAYERS][20],
	Att_Obj_Slot_2[MAX_PLAYERS][20],
	Att_Obj_Slot_3[MAX_PLAYERS][20],
	Att_Obj_Slot_4[MAX_PLAYERS][20];

	new EventoOn = 0;
	new comisaria;
	new Puertas[MAX_PLAYERS];
	new Climas;
	new Advertencia_Debe	[MAX_PLAYERS];
new Scripter_Ocupado	[MAX_PLAYERS]; // adminduty scripter
new HasArmor			[MAX_PLAYERS];
new Float:ScriptArmor	[MAX_PLAYERS];
new ScriptMoney			[MAX_PLAYERS];
new PizzaCall = 999;
new JobDuty             [MAX_PLAYERS];
new PizzaCallTime[MAX_PLAYERS];
new sPizza[MAX_PLAYERS];
new bPizza[MAX_PLAYERS];
new Hotdog[MAX_PLAYERS];
new Muted[MAX_PLAYERS];
new skinlist = mS_INVALID_LISTID; //skins del binco
new armariolist = mS_INVALID_LISTID;

/* --- Kick con retraso --- */
new ckick[MAX_PLAYERS]; 

stock KickRetrasado(playerid) {
	KillTimer(ckick[playerid]);
	ckick[playerid] = SetTimerEx("KickRetra", 1, false, "i", playerid);
	return 1;
}

forward KickRetra(playerid);
public KickRetra(playerid) {
	if (!IsPlayerConnected(playerid)) return 1;
	Kick(playerid);
	return 1;
}
/* ------------------------ */

function GiveArmorToPlayer(playerid, Float:armour)
{
	SetPlayerArmour(playerid, Float:armour);
	HasArmor[playerid] = 1;
	ScriptArmor[playerid] = armour;
	if(Team_LSPD(playerid)){SetPlayerAttachedObject(playerid,1,19142,1,0.099258,0.031748,-0.015871,360.000000,358.979064,357.476074,1.072590,1.239796,-1.046599);}
	else{SetPlayerAttachedObject(playerid, 1, 373, 1, 0.300327, -0.004779, -0.178271, 73.442504, 25.958881, 32.691726);}
	Att_Obj_Slot_1[playerid] = "Chaleco";
	return 1;
}

function MoneyGiveToPlayer(playerid,amount)
{
	if(IsPlayerConnected(playerid))
	{
		GivePlayerMoney(playerid,amount);
		ScriptMoney[playerid] += amount;
		return 1;
	}
	return 0;
}

function MoneyResetToPlayer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		ResetPlayerMoney(playerid);
		ScriptMoney[playerid] = 0;
		return 1;
	}
	return 0;
}

function GetScriptMoney(playerid)
{
	new amount;
	if(IsPlayerConnected(playerid))
	{
		if(GetPlayerMoney(playerid)<ScriptMoney[playerid]) amount=GetPlayerMoney(playerid);
		else amount=ScriptMoney[playerid];
	}
	return amount;
}

function SetMoneyToPlayer(playerid,amount)
{
	if(IsPlayerConnected(playerid))
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid,amount);
		ScriptMoney[playerid] = amount;
		return 1;
	}
	return 0;
}

function SetHP(playerid, Float:hp)
{
	PlayerInfo[playerid][pHealth] =hp;
	SetPlayerHealth(playerid, hp);
	return 1;
}

#define DLOGIN 			501
#define ShowLoginDialog(%1,%2) ShowPlayerDialog(%1, %2, DIALOG_STYLE_PASSWORD, "Ingreso", "{FFFFFF}Ingrese su contraseña para comenzar a jugar\n\n\t\t", "Conectar", "Salir")
#define DREGISTER 504
#define ShowRegisterDialog(%1,%2) ShowPlayerDialog(%1, %2, DIALOG_STYLE_INPUT, "Registro", "{FFFFFF}Bienvenido a {00FF00}HermandadZero\n\n{FFFFFF}Tu cuenta no está registrada, ingresa una\ncontraseña para registrarte.\n\n\t\t{FF0000}Gracias por preferirnos", "Registrar", "Salir")
// -==================-
#define SendRequest(%1,%2)  ShowPlayerDialog(%1, PETITION_DIALOG, DIALOG_STYLE_MSGBOX, "Petición", %2, "Aceptar", "Rechazar")
// -=========REGISTER~~TUTORIAL=========-
#define DIALOG_REG_AGE 		505
#define DIALOG_REG_NAC 		506
#define DIALOG_REG_MSN 		507
#define DIALOG_REG_MSNC 	508
#define DIALOG_REG_TUT 		509
// -====== GMLimits ======-
#define DINFO   		510
// -======= Toys ========-
#define TOYS        	511
#define DELETETOY       512
#define WEARTOY         513
#define BUYTOYS         514
#define BUYTOYS2        515
#define BUYTOYS3        516
#define EDITTOYS        517
#define EDITTOYS2       518
#define EDITTOYSBONE    519
#define EDITTOYSPX      520
#define EDITTOYSPY      521
#define EDITTOYSPZ      522
#define EDITTOYSRX      523
#define EDITTOYSRY      524
#define EDITTOYSRZ      525
// -=========24/7\SHOPS===========-
#define D247_BUY 		550
// -================== NARCO & MAFIA ======================-
#define CAMEL_MENU 			2200
#define CREATE_WEAPON     	2201
// -=================== u7 OPENDOOR ================- //
#define U7_OPEN         562
// -================= FSTYLE =================-
#define FSTYLE_DIALOG   563
// -================= AMMUNATION ================-
#define AMMUNATION_MENU     566
#define AMMUNATION_MENU_DEF 567
#define AMMUNATION_MENU_PIS 568
#define AMMUNATION_MENU_AME 569
#define AMMUNATION_MENU_ESC 570
#define AMMUNATION_MENU_PRO 572
#define AMMUNATION_MENU_LEC 573
// -==================== AMMUNATION MANAGER =====================-
#define DIALOG_LECCION 574
#define DIALOG_AMMU_MANAGER 575
// -==================== LSPD =========================-
#define DIALOG_LSPD_ELEVATOR   576
// -=================== Transportes ======================-
#define DIALOG_TAXI_RADAR 577

// -================= DIALOG FARMACIA ===================- //
#define DIALOG_FARMACIA 581
// -================= DIALOGO AYUDA ===================- //
#define DIALOG_AYUDAA 581
// -=======------======== MECÁNICO MENÚ ========---------=========- //
#define MECANICO_MENU   584
#define MECANICO_MENU_REPARACION    585
#define MECANICO_MENU_GASOLINA      586
#define MECANICO_MENU_TUNING        587
#define MECANICO_MENU_TUNING_global 592
#define MECANICO_MENU_TUNING_global_suspensionystereo 593
#define MECANICO_MENU_TUNING_SPECIAL    603
#define TUNING_WAA  610
#define MECANICO_MENU_TUNING_color  594
#define MECANICO_MENU_TUNING_color_1  595
#define MECANICO_MENU_TUNING_color_2  596
#define MECANICO_MENU_TUNING_name  597
#define MECANICO_MENU_TUNING_motor 598
#define MECANICO_MENU_TUNING_bateria 599
#define TUNING_MENU_NITRO   600
#define TUNING_MENU_RUEDAS 604
#define MECANICO_MENU_EMBARGAR      588
#define MECANICO_MENU_DESEMBARGAR   589
#define MECANICO_MENU_MULTAR        590
#define MECANICO_MENU_REMOLCAR      591
#define MECANICO_MENU_OTROS         601
#define MECANICO_MENU_OTROS_matricula  602
// -= Contrato =- //
#define REQF_ACCEPT 910
// -= Petition / Trade =- //
#define PETITION_DIALOG 911
// -= Gafas =- //
#define BRILLO_GAFAS 915
// -= LSTV =- //
#define ENTER_LSTV 916
// -= Gasolina =- //
#define GASOLINA_DIALOG 917
// -= Importar =- //
#define IMPORTAR_MOTOR  918
// -= GOOGLE =- //
#define GOOGLE  919
// -= Drugs =- //
#define DRUGS_DIALOG 920
#define CONFIRM_DRUGS_DIALOG    921
// -= IPHONE =- //
#define TEL_INPUT   	923
#define TEL_MSGBOX  	924
#define IPHONE_OPTIONS  925
#define IPHONE_AGENDA   926
#define IPHONE_AGENDA_VB     	912
#define IPHONE_AGENDA_ESCRIBIR  913
// -= Ropa =- //
#define CLOTHES_CHOOSE_DIALOG   927
// -= PaintBall =- //
#define DIALOG_PAINTBALL    	928
#define DIALOG_PAINTBALL_TVT	929
// -= Estado =- //
#define DIALOG_ESTADO   	930
#define DIALOG_REG_ESTADO   931
// -= IPOD =- //
#define IPOD_MENU       934
#define IPOD_MP3        936
// -= Saldo OTECEL =- //
#define RECARGA_PHONE   	937
#define OTECEL_CONFIRM  	938
#define OTECEL_PAQUETES 	939
#define DIALOG_SAMUR_ELEVATOR   940
#define DIALOG_FBI_ELEVATOR     941
// -= Matrimonio =- //
#define MATRIMONIO_DIALOG   942
#define MATRIMONIO_CONFIRM  943
#define MATRIMONIO_CONFIRM2 944
#define DIVORCIO_DIALOG     945
#define DIVORCIO_CONFIRM    946
// -= Trabajo Camioneros =- //
#define CARGAR_CAMION       947
// -= Vehicle GPS =- //
#define	GPS_DIALOG  	948
#define BARES       	949
#define EMERGENCIAS 	950
#define NEGOCIOS     	951
#define LUGARPUBLICO    952
#define SERVICIOS       953
// -= Trabajo Pescador =- //
#define DIALOG_PUERTO   954
// -= Casino LS =- //
#define CASINO_FICHAS   955
#define COMPRAR_FICHAS  956
#define METODO_FICHAS   957
// -= Sex Shop =- //
#define DELE_BUY_SEX    958
#define DELE_BUY_SEXM   959
#define DELE_BUY_SEXF   960
#define DELE_BUY_SEXJ   961
// -= Negocios =- //
#define QUIT_EXTORTION  962
// -= Electrónica =- //
#define ELECTRONIC_BUY  963
// -= DNI Falso =- //
#define DNI_MENU        964
#define DNI_CONFIRM     965
// -= Impuestos Casa =- //
#define HOUSE_IMPUESTOS 966
// -= Joyeria =- //
#define COMPRAR_JOYAS   967
// -= Vehiculos renta =- //
#define DIA_RENTA 968
#define CREDITOS 969
#define MECANICO_MENU_CHECK_REMOVEALL 971
#define CAMARAS_LSPD 972
/* -= FORWARD -==================================================== */
forward LoadProperty();
forward Tiempos();
forward CambiarClima();
forward LoadCar();
forward SetPlayerSpawn(playerid);
forward SetPlayerUnjail();
forward GameModeExitFunc();
forward SetPlayerWeapons(playerid);
forward SetPlayerToTeamColor(playerid);
forward OnPlayerLogin(playerid);
forward LoadUser(playerid, name[], value[]);
forward OnPlayerRegister(playerid, password[]);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward DiseaseSystem();
forward CheckGas();
forward SaveAccounts();
forward OnPlayerUpdateTime(playerid);
// carwash
forward Autocruise(playerid, in);
forward OpenExit(playerid);
forward EndWash(playerid);
forward Water(playerid, on);

//
forward BancoTextDraw();

//Progressbars
//forward Menos(playerid);
//forward MenosDormir(playerid);
//forward DespuesDeMear(playerid);
//forward DespuesDeDormir(playerid);
new JetPack[MAX_PLAYERS];
//////////////////////////////
// -= Petition =-
new Petition_ID[MAX_PLAYERS];
// 	-= Estado =-
new Text3D:Estado[MAX_PLAYERS],
EstadoON[MAX_PLAYERS];
// ==============--.
new PlayerGotSpottedRecently[MAX_PLAYERS];
new ScriptWeaponsUpdated[MAX_PLAYERS];
new ScriptWeapons[MAX_PLAYERS][13];
new Checked[MAX_PLAYERS];
new NumBuy[MAX_PLAYERS], NumSeller[MAX_PLAYERS], NumPrice[MAX_PLAYERS];
new RecNumber[MAX_PLAYERS];
new ActiveTeleport[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
new DrugTimer[MAX_PLAYERS]
new See_MP[MAX_PLAYERS];
// Paintball
new PaintballType[MAX_PLAYERS];
new PaintballDMKills[MAX_PLAYERS], TvTNaranjaKills = 0, TvTVerdeKills = 0, PaintPvPKills[MAX_PLAYERS];
new TotalDM = 0, TTeamVerde = 0, TTeamNaranja = 0, TotalPlayer = 0;
// Trunk system
new vehTrunkCounter[MAX_VEHICLES] = 1;
new vehTrunk[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new vehTrunkAmmo[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new Float:vehTrunkArmour[MAX_VEHICLES];
new ClothesID[MAX_PLAYERS],
ClothesPrice[MAX_PLAYERS];
new TEL_INPUT_ID[MAX_PLAYERS];
new TEL_NUMBER[MAX_PLAYERS];
new Skate[MAX_PLAYERS];
new BuyNarco[MAX_PLAYERS],
NarcoSellPrice[MAX_PLAYERS],
NarcoSellArm[MAX_PLAYERS],
NarcoSellAmmo[MAX_PLAYERS];
new QuitExtortion[MAX_PLAYERS], ExtortionID[MAX_PLAYERS];
new Smuggling[MAX_PLAYERS],SmugglingType[MAX_PLAYERS];
new Blinded[MAX_PLAYERS], Tied[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new AFK[MAX_PLAYERS];
new AFKTime[MAX_PLAYERS];
new Matrimonio[MAX_PLAYERS];
new Divorciar[MAX_PLAYERS];
new Fichas[MAX_PLAYERS];
new Speaker[MAX_PLAYERS];
new AdminChat[MAX_PLAYERS];
new HireKey[MAX_PLAYERS];
new DrugFarming[MAX_PLAYERS];
new Train_Route[MAX_PLAYERS];
new Plane_Route[MAX_PLAYERS];
new Intentar[MAX_PLAYERS];
new nod = 0;
new PFrecuencia[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new WhoFind[MAX_PLAYERS];
new RequestingBackup[MAX_PLAYERS];
new ReqF_Faction[MAX_PLAYERS];
new ReqF_Name[MAX_PLAYERS][32];
new UsingBelt[MAX_PLAYERS];
new Freezed[MAX_PLAYERS];
new bool:PuedePresionar[MAX_PLAYERS char];
new FailTuto[MAX_PLAYERS];
new Accesory[MAX_PLAYERS];
new InAmbu[MAX_PLAYERS];
new Bowling[MAX_PLAYERS];
new BowlingMoney[MAX_PLAYERS];
new Revisado[MAX_PLAYERS];
new Misile_Launcher;

// Gafas
new Text:SunGlasses;

// textdraw camara de seguridad
new Text:TVCAM_Background,
Text:TVCAM_CornerTopLeft,
Text:TVCAM_CornerTopRight,
Text:TVCAM_CornerBottomLeft,
Text:TVCAM_CornerBottomRight,
Text:TextdrawUp,
Text:TextdrawDown,
Text:TextdrawLeft,
Text:TextdrawRight,
Text:TextdrawFinish;

// Tuto
new Text:Tutorial[MAX_PLAYERS];
new
Text:Version;
new
Text:Film_1,
Text:arl,
Text:ttr,
Text:ktm,
Text:Textdraw0,
Text:Textdraw1,
Text:Textdraw2,
Text:Textdraw3,
Text:Textdraw4,
Text:Textdraw5,
Text:Textdraw6,
Text:Textdraw7,
Text:Textdraw8,
Text:Textdraw9,
//Text:TextdrawBanco,
Text:btt,
Text:htt,
Text:ptt,
Text:bnn,
Text:mnn,
Text:ccc,
Text:eef,
Text:Film_2;
new
gGas95_Cost 	= 	1,  gGas95_Full=50,
gGas98_Cost 	= 	1,  gGas98_Full=60,
gGasoil_Cost    =   2,  gGasoil_Full=70,
gBiogas_Cost    =   3,  gBiogas_Full=80;
// -===============
new Ganzuas[MAX_PLAYERS];
new Interview = 0;
new Interviewer[32] = "Nadie";
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new Blood = 1000;
new RPirata, RGroove, RHerman, RLKings, RLCN, RYakuza, RRusos, RBallas;
new TaxiCalled[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new TarifaTaxi[MAX_PLAYERS];
new Fishing[MAX_PLAYERS];
new RStep[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new Delivery[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new CorteJudicial[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PropRob[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new Situacion[MAX_PLAYERS];
new DeathPlayer[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerTazeado[MAX_PLAYERS];
new Tazer[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new First_Spawn[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new Guardes_Oferta[MAX_PLAYERS];
new Guardes_Precio[MAX_PLAYERS];
new Reparar_Precio[MAX_PLAYERS];
new Reparar_Oferta[MAX_PLAYERS];
new bool:ConEstado[MAX_PLAYERS];
new Text3D:estado[MAX_PLAYERS];
new noac = 0;
new noooc = 1;
new DobleOn = 0;
new TripleOn = 0;
new adds = 0;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new dollah = 0; // Amount player recieves on spawn.
new realtime = 1;
new wtime = 16;
new realchat = 1;
new shifthour;
new othtimer;
new globaltimer;
new timevehtimer;
new timehousetimer;
new camtimer;
new mmtimer;
new LifeTimer;
new KeysTimer;
new disease;
new unjailtimer;
new accountstimer;
new checkgastimer;
new jetpackTimer;
new levelexp = 4;
new cchargetime = 20;
new Text:BalanceTextDraw[MAX_PLAYERS];
new BankTimer;
// 	-= New CarWash System =-
new Text3D:entrancetext;
new entrancegate, exitgate;
new water1, water2, water3, water4, water5, water6, water7;
new usingcarwash = -1;
new unwashable[89][0] = {
	{403},{406},{408},{414},{417},
	{423},{424},{425},{430},{431},
	{432},{433},{435},{437},{441},
	{443},{444},{446},{447},{448},
	{452},{453},{454},{455},{456},
	{457},{460},{461},{462},{463},
	{464},{465},{468},{469},{471},
	{472},{473},{476},{481},{484},
	{485},{486},{487},{488},{493},
	{497},{498},{501},{508},{509},
	{510},{511},{512},{513},{514},
	{515},{519},{520},{521},{522},
	{523},{524},{530},{531},{532},
	{539},{544},{548},{553},{556},
	{557},{563},{564},{568},{571},
	{572},{573},{574},{577},{578},
	{581},{583},{586},{588},{592},
	{593},{594},{595},{609}
};

// Pos
new Float:AFKLoc[MAX_PLAYERS][3];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:InceptionPos[MAX_PLAYERS][3];
// ---- Vehicle Control
new
engineOn[MAX_VEHICLES],
LightsOn[MAX_VEHICLES],
BootOpen[MAX_VEHICLES],
BonnetOpen[MAX_VEHICLES],
gEngine[MAX_PLAYERS],
NoWheels[MAX_VEHICLES],
Alarm[MAX_VEHICLES];
// -==================
new JustDied[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new DefaultWeather = 10;
new UsingDrugs[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new PlayerIsSweeping[MAX_PLAYERS];
new PlayerIsRuta[MAX_PLAYERS];
new PlayerCargando[MAX_PLAYERS], PlayerDescargando[MAX_PLAYERS];
new Mercancia[MAX_PLAYERS], Camion[MAX_PLAYERS];
new YaAposto[MAX_PLAYERS];
new Color[MAX_PLAYERS];
new HouseExplo[MAX_PLAYERS];
new RecentlyShot[MAX_PLAYERS];
new PlayerStatInfo[MAX_PLAYERS][8][32];
new StatString[MAX_PLAYERS][3][32];
new DNIName[MAX_PLAYERS][32];
new StatInt[MAX_PLAYERS][12];
new Maskuse[MAX_PLAYERS];
//antispam
new AntiSpamC = 0;
new AntiSpam[100][100];
// Drugs System
new UsingEctasy[MAX_PLAYERS];
new EctasyEffect[MAX_PLAYERS];
new UsingRitalin[MAX_PLAYERS];
new RitalinEffect[MAX_PLAYERS];
new UsingHeroina[MAX_PLAYERS];
new HeroinaEffect[MAX_PLAYERS];
new HeroinaBeat[MAX_PLAYERS];
new UsingMarihuana[MAX_PLAYERS];
new MarihuanaEffect[MAX_PLAYERS];
new MarihuanaBeat[MAX_PLAYERS];
// Illnes Sys.
new CancerEffect[MAX_PLAYERS];
new EpilepsiaCrack[MAX_PLAYERS];
new SIDA[MAX_PLAYERS];
new Ibuprofeno[MAX_PLAYERS];
new Nicotina[MAX_PLAYERS];
new Energysil[MAX_PLAYERS];
new cNicotina[MAX_PLAYERS];
new cEnergysil[MAX_PLAYERS];
new cSIDA[MAX_PLAYERS];
new cCancer[MAX_PLAYERS];
new cEpilepsia[MAX_PLAYERS];
// Rob Sys.
new TelfRob[MAX_PLAYERS];
new PickLock[MAX_PLAYERS];
// ------------
new UsingRayBan[MAX_PLAYERS];
new VehicleWindows[MAX_VEHICLES] = 0;
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new JustReported[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new PlayerDuda[MAX_PLAYERS], Mochila[MAX_PLAYERS][2], SmokeTimer[MAX_PLAYERS];
new PlayerSol[MAX_PLAYERS];
new ComproBoleto[MAX_PLAYERS];
new ComproCine[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new RegText[MAX_PLAYERS];
new RegConfig[MAX_PLAYERS];
new RadioOn[MAX_PLAYERS];
new Saludo_ID[MAX_PLAYERS];
new Regalo_Offer[MAX_PLAYERS];
new Regalo_ID[MAX_PLAYERS];
new Regalo_ITEM[MAX_PLAYERS];
// Vida Sys.
new MensajeMuriendo[MAX_PLAYERS];
new ForbidHandsUp[MAX_PLAYERS];
new Left4Life[MAX_PLAYERS];
new Rescued[MAX_PLAYERS];
new MsgL4L[MAX_PLAYERS];
// Factura
new Facturing[MAX_PLAYERS];
new duda[MAX_PLAYERS];
new NewUsed[MAX_PLAYERS];
//dutyadmin
new AdminDuty[MAX_PLAYERS];
new AntiAbusos[MAX_PLAYERS];//sistema anti AA
// Transport Variables LS
new
TaxiSlot1 = 999, SlotZone1[64] = "Sin Localizar", SlotCity1[4] = "No", TiempoSlot1 = 0,
TaxiSlot2 = 999, SlotZone2[64] = "Sin Localizar", SlotCity2[4] = "No", TiempoSlot2 = 0,
TaxiSlot3 = 999, SlotZone3[64] = "Sin Localizar", SlotCity3[4] = "No", TiempoSlot3 = 0,
TaxiSlot4 = 999, SlotZone4[64] = "Sin Localizar", SlotCity4[4] = "No", TiempoSlot4 = 0,
TaxiSlot5 = 999, SlotZone5[64] = "Sin Localizar", SlotCity5[4] = "No", TiempoSlot5 = 0,
TaxiSlot6 = 999, SlotZone6[64] = "Sin Localizar", SlotCity6[4] = "No", TiempoSlot6 = 0,
TaxiSlot7 = 999, SlotZone7[64] = "Sin Localizar", SlotCity7[4] = "No", TiempoSlot7 = 0,
TaxiSlot8 = 999, SlotZone8[64] = "Sin Localizar", SlotCity8[4] = "No", TiempoSlot8 = 0;

new dm[] = "      \n {45F86C}DeathMatch {FFFFFF} - Muy simple, es matar a una persona sin razón alguna o sin ningún tipo de ROL.\n {FFFFFF}No olvide que el DM es una falta muy grave, usted puede ser {FF150E}baneado{FFFFFF}.";
new mg[] = "      \n {45F86C}MetaGaming {FFFFFF} - Es Confundir canales IC u OOC, para asi tomar ventaja usando informacion externa \n {5CFFCD}El MetaGaming {FFFFFF}es uno de los terminos mas importantes en Role Play.\n {FFFFFF}Deben estudiar bien este termino si desea sobrevivir en este modo de juego.";
new pg[] = "      \n {45F86C}PowerGaming {FFFFFF} - Se llama a las acciones ficticias o irreales que usted puede llegar a hacer.\n {FFFFFF}Tambien se llama PG, cuando usted obliga a alguien a hacer un {FF150E}Rol.\n {FFFFFF}Recuerde que esta falta es sancionada con {FF150E}Jail Administrativa.\n {54F288}Ejemplos de PowerGaming - {FFFFFF}Usando /me: \n\n {A615E0}* Juan Carlos le roba todo su dinero y se corre.";
new bpc[] ="      \n {45F86C}Badly Parked Car {FFFFFF} - Esta regla se caracteriza cuando un usuario estaciona incorrectamente su vehiculo en las calles,\n como sancion tiene la venta del vehiculo y un envio a prisión administrativa.";
new bd[] ="      \n {45F86C}Bad Driving {FFFFFF} - Manejar incorrectamente un vehiculo, causando desastres y desorden entre otros vehiculos. Recuerda manejar como en la vida real.";
new cj[] ="       \n {45F86C}CarJack {FFFFFF} - Esta es una de las reglas muy importantes, es cuando usted roba un auto sin un rol previo \n cometer esta falta es {DEDC44}Anti-RolePlay {FFFFFF}y si usted hace esto puede ser {FF150E}sancionado{FFFFFF}.";
new rk[] ="       \n {45F86C}RevengeKill {FFFFFF} - Es la acción de cobrar vengaza despues de que usted haya {DEDC44}'muerto' \n {FFFFFF}Verdaderamente usted no muere, usted logra salvarse y aparece en el hospital. \n Lo que usted no debe hacer es volver al rol en el cual usted {DEDC44}'murio'.";
new na[] ="       \n {45F86C}Noob Abuser {FFFFFF} - Hacer NA se considera abusar de un usuario nuevo {0096E5}(Novato - Noob). \n\n {54F288}Por Ejemplo: \n\n {45F86C}> {FFFFFF}Confundirlo para aprovecharse de su inexperiencia en RolePlay.\n {45F86C}> {FFFFFF}Obligarlo a que te de dinero o que siga un rol de secuestro. \n\n {F4E3D5}* Recuerde nunca Abusar de un novato. {FFFFFF}Usted puede resultar {FF150E}baneado {FFFFFF}del servidor.";

new Text:RegDraw[MAX_PLAYERS];
new Text:RegInfo;
new Text:Taximeter[MAX_PLAYERS];
new Text3D:House3DText[MAX_HOUSES];
new HousePickup[MAX_HOUSES];

#define GasMax 180
#define RunOutTime 120000
#define RefuelWait 10000

//Processbars:
#define OrdenadoC 300000
#define Tiempo 			1000
//////////////////


#define CAR_AMOUNT VEH
new Gas[CAR_AMOUNT];

new Refueling[MAX_PLAYERS];

stock Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

#define MAX_ROADBLOCKS 35

enum rInfo
{
	sCreated,
	Float:sX,
	Float:sY,
	Float:sZ,
	sObject,
};

new Roadblocks[MAX_ROADBLOCKS][rInfo];

enum hInfo
{
	hOwned,
	hOwner[MAX_PLAYER_NAME],
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hInt,
	hLevel,
	hValue,
	hLock,
	hRooms,
	hRent,
	hRentabil,
	hWep,
	hAmmo,
	hMats,
	hDrugs,
	hSpeed,
	hEctasy,
	hRitalin,
	hHeroina,
	hMarihuana,
	hWorld,
	hTime
};

new HouseInfo[MAX_HOUSES][hInfo];

enum cInfo
{
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[MAX_PLAYER_NAME],
	cName[MAX_PLAYER_NAME],
	cValue,
	cOwned,
	cLock,
	cBattery,
	cSpoiler, 	// Aleron
	cHood,      // Capó
	cRoof,      // Techo
	cSideskirt, // Faldones
	cNitro,     // N20
	cLamps,     // Luces Delanteras
	cExhaust,   // Tubo Escape
	cWheel,     // Llantas
	cHydraulics,    // Hidráulica
	cPaintjob,    // Stereo
	cFrontBumper,    // Par. Delantero
	cRearBumper,    // Par. Trasero
	cVents,     // Respiraderos
	cEmbargo,
	cMulta,
	cPlate[16],
	cGas,
	cAlarm,
	cVehTime,
	cGPS
};

new CarInfo[VEH][cInfo];

enum Faction
{
	LSPD,
	FBI,
	SAMUR,
	CNN,
	SAEM,
	LCN,
	YAK,
	RUS,
	PIR
};

new Fondos[Faction];

enum hqLocks
{
	GS,
	MOT,
	LH,
	LK,
	ITA,
	RUS,
	HIT,
	YAK,
	BL,
	PIR
};

new hqlock[hqLocks];

new Bar:Cargando[MAX_PLAYERS] = {INVALID_BAR_ID, ...};

new Float:gDrugFarmVar[12][3] = {
	{-1185.3206,-1049.9336,129.2188},
	{-1122.1041,-1054.1355,129.2188},
	{-1084.2592,-1056.0363,129.2119},
	{-1030.9105,-1056.3110,129.2188},
	{-1020.9789,-977.7290,129.2188},
	{-1074.0260,-984.7910,129.2188},
	{-1122.7734,-987.4319,129.2188},
	{-1178.1708,-991.1383,129.2188},
	{-1180.0258,-938.9026,129.2188},
	{-1135.5679,-926.2295,129.2188},
	{-1076.0167,-923.2093,129.2188},
	{-1024.3663,-922.9048,129.2126}
};

new Float:AFKZone[5][3] = {
	{-1753.7677,885.5895,295.8750},
	{-1942.7980,537.1266,209.6516},
	{-1807.5276,523.5158,234.8906},
	{-1837.2823,574.0678,234.8874},
	{-1774.7689,573.7373,234.8906}
};

new Float:gSweeperPoints[61][3] = {
	{351.8791,-1542.9525,32.8241},
	{528.3840,-1421.4326,15.5214},
	{540.4012,-1581.2511,15.5786},
	{717.4601,-1588.2983,13.7824},
	{641.3878,-1290.5045,14.7365},
	{697.1915,-1154.5682,15.0319},
	{624.9969,-1500.6953,14.2819},
	{657.1359,-1754.1011,12.9295},
	{807.3387,-1786.8031,12.9919},
	{855.5547,-1599.3353,12.9575},
	{920.0758,-1435.9244,12.9004},
	{829.3325,-1318.7393,12.9412},
	{800.4104,-1153.3473,23.5362},
	{919.1944,-983.7144,37.6564},
	{960.5366,-1125.8149,23.2350},
	{1027.4044,-1222.7533,16.3308},
	{1055.6002,-1347.0660,12.9492},
	{1035.0167,-1661.7706,12.9492},
	{1135.6582,-1714.5726,13.2095},
	{1199.2737,-1449.2653,12.9445},
	{1166.7722,-1279.0509,13.1084},
	{1175.7271,-1139.5891,23.2408},
	{1165.6539,-996.5869,36.7975},
	{1003.9905,-956.1555,41.1873},
	{1259.8721,-1006.3247,33.8007},
	{1328.4585,-1282.8423,12.9490},
	{1367.6403,-1077.8971,24.8246},
	{1479.8086,-1109.1764,23.2225},
	{1452.0596,-1320.6748,12.9491},
	{1427.4011,-1576.5649,12.9273},
	{1425.8943,-1669.9651,12.9492},
	{1487.8964,-1734.6465,12.9490},
	{1510.6815,-1735.1931,12.9490},
	{1532.3123,-1674.5083,12.9493},
	{1532.5154,-1663.3816,12.9490},
	{1566.7845,-1823.5012,12.9490},
	{1443.2334,-1869.8840,12.9569},
	{1691.9636,-1775.9987,12.9493},
	{1692.5615,-1628.3645,12.9492},
	{1848.1118,-1512.0933,12.9324},
	{1852.4690,-1359.8696,12.9649},
	{1869.1888,-1079.5444,23.2335},
	{1968.1589,-1195.7958,25.2591},
	{2020.4669,-1264.0336,23.3865},
	{2118.3831,-1222.1611,23.3709},
	{2178.0645,-1160.1169,24.2061},
	{2329.2275,-1156.1409,26.3632},
	{2269.0276,-1248.3162,23.3730},
	{2164.4541,-1366.1935,23.3944},
	{2109.7114,-1488.5392,23.3842},
	{2079.1208,-1842.4808,12.9491},
	{2185.7046,-1897.3514,12.9632},
	{2218.7041,-1798.5983,12.7617},
	{2349.9788,-1750.7246,12.9493},
	{2432.4709,-1653.3844,26.1642},
	{2453.5630,-1373.6967,23.4024},
	{2565.4963,-1260.5342,45.5413},
	{2640.2383,-1369.0193,30.8336},
	{2674.0586,-1448.9202,29.9459},
	{2719.6277,-1570.2716,18.7877},
	{2513.8059,-1599.9224,17.1046}
};

new Float:PaintballDMSpawns[4][3] = {
	{-1487.1887,1641.8083,1060.6719},
	{-1361.2830,1631.6606,1053.5317},
	{-1453.2238,1578.0221,1052.7500},
	{-1456.6083,1635.8208,1052.5313}
};

new Float:PaintPvPSpawns[3][3] = {
	{1948.7115,1653.6857,-11.8821},
	{1975.8000,1619.4677,-11.8929},
	{2003.1938,1598.9515,-11.8828}
};

/* Incluir partes modulares de HermandadZero */

//Headers
#include "system/vehiculos.h"
#include "system/negocios.h"

//Sistemas
#include "system/vehiculos.pwn"
#include "system/payday.pwn"
#include "system/mapeados.pwn"
#include "system/pickups.pwn"
#include "system/3DLabels.pwn"
#include "system/novedades.pwn"
#include "system/negocios.pwn"
#include "system/licencias.pwn"
#include "system/pinchos.pwn"

//Servicios
#include "services/lottery.pwn"
#include "services/mapas.pwn"
#include "services/bar.pwn"
#include "services/peaje.pwn"

main()
{
	print("\n-========================================-");
	print("Cargando...  Hermandadzero - RolePlay 0.1");
	print("   Chicle  <----------------> Puto amo");
	print("-==================== *** ====================-");
	print("Todos los derechos reservados. HermandadZero 2017\n");
}

// -====== AntiCheat =======-
#define GetPlayerMoney GetScriptMoney
#define ResetPlayerMoney MoneyResetToPlayer
#define GivePlayerMoney MoneyGiveToPlayer
#define SetPlayerMoney SetMoneyToPlayer
#define SetPlayerArmour GiveArmorToPlayer
// -=========================-

function DollahScoreUpdate()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerScore(i, PlayerInfo[i][pLevel]);
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new Float:cx, Float:cy, Float:cz;
	
	if(IsAnOwnableCar(vehicleid))
	{
		AddCarTuning(vehicleid);
	}
	if(isLSPDVehicle(vehicleid) && !ispassenger)
	{
		if(Team_LSPD(playerid)) return 1;
		else GetPlayerPos(playerid, cx, cy, cz);	SetPlayerPos(playerid, cx,  cy, cz);
	}
	return 1;
}

Team_LSPD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	1)		{	return 1;	}
		else if(leader	==	1)	{	return 1;	}
	}
	return 0;
}

Team_NG(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	3)		{	return 1;	}
		else if(leader	==	3)	{	return 1;	}
	}
	return 0;
}

Team_FBI(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	24)		{	return 1;	}
		else if(leader	==	24)	{	return 1;	}
	}
	return 0;
}
Team_CorteJudicial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	25)		{	return 1;	}
		else if(leader	==	25)	{	return 1;	}
	}
	return 0;
}

Team_Mecanicos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	7)		{	return 1;	}
		else if(leader	==	7)	{	return 1;	}
	}
	return 0;
}

Team_SAMUR(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	4)		{	return 1;	}
		else if(leader	==	4)	{	return 1;	}
	}
	return 0;
}

Team_Groove(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	9)		{	return 1;	}
		else if(leader	==	9)	{	return 1;	}
	}
	return 0;
}
Ballas_pand(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	5 )		{	return 1;	}
		else if(leader	==	5)	{	return 1;	}
	}
	return 0;
}
Team_Hermandad(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	10)		{	return 1;	}
		else if(leader	==	10)	{	return 1;	}
	}
	return 0;
}

Team_LK(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	11)		{	return 1;	}
		else if(leader	==	11)	{	return 1;	}
	}
	return 0;
}	

Mafia_Italiana(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	12)		{	return 1;	}
		else if(leader	==	12)	{	return 1;	}
	}
	return 0;
}

Hitman(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	23)		{	return 1;	}
		else if(leader	==	23)	{	return 1;	}
	}
	return 0;
}



Mafia_Yakuza(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	13)		{	return 1;	}
		else if(leader	==	13)	{	return 1;	}
	}
	return 0;
}

Mafia_Rusa(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	14)		{	return 1;	}
		else if(leader	==	14)	{	return 1;	}
	}
	return 0;
}

Mafioso(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member == 2 || member	==	12 || member ==	13 || member ==	14 || member == 8)		{	return 1;	}
		else if(leader == 2 || leader	==	12 || leader ==	13 || leader ==	14 || leader == 8 )	{	return 1;	}
	}
	return 0;
}

Pandilleros(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	9 || member	==	10 || member	==	11)		{	return 1;	}
		else if(leader	==	9 || leader	==	10 || leader	==	11)	{	return 1;	}
	}
	return 0;
}

Journalist(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	17)		{	return 1;	}
		else if(leader == 17)	{	return 1;	}
	}
	return 0;
}

Gobierno(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	16)		{	return 1;	}
		else if(leader == 16)	{	return 1;	}
	}
	return 0;
}

Presidente(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		if(leader == 16)	{	return 1;	}
	}
	return 0;
}

IsANarco(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	19)		{	return 1;	}
		else if(leader == 19)	{	return 1;	}
	}
	return 0;
}

IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	1 || member	==	3 || leader	==	24)		{	return 1;	}
		else if(leader	==	1 || leader	==	3 || member	==	24)	{	return 1;	}
	}
	return 0;
}
IsACorteJudicial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member	==	25)		{	return 1;	}
		else if(leader == 25)	{	return 1;	}
	}
	return 0;
}

Moteros(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member==8)		{	return 1;	}
		else if(leader==8)	{	return 1;	}
	}
	return 0;
}

Piratas4x4(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member==2)		{	return 1;	}
		else if(leader==2)	{	return 1;	}
	}
	return 0;
}

FacRadio(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member == 1 || member == 3 || member	== 4 || member == 7 || member == 8 || member == 16 || member == 17 || member == 23 || member == 24 || member == 25 || leader == 26)		{	return 1;	}
		else if(leader == 1 || leader == 3 || leader == 4 || leader == 7 || leader == 8 || leader == 16 || leader == 17 || leader == 23 || leader == 24 || leader == 25 || member == 26)	{	return 1;	}
	}
	return 0;
}

IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(30.0,playerid,544.5143,-1280.5714,17.2482)) { return 1; }
		else if(PlayerToPoint(30.0,playerid,1045.3408,-905.2751,42.6273)) { return 1; }
		else if(PlayerToPoint(50.0,playerid,2152.0850,-1150.7964,24.1398)) { return 1; }
		else if(PlayerToPoint(20.0,playerid,633.4413,-1950.7174,1.6708)) { return 1; }
	}
	return 0;
}

IsAtClothShop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(30.0,playerid,211.7609,-7.6523,1001.2109)) { return 1; }
		else if(PlayerToPoint(20.0,playerid,207.7558,-103.3743,1005.2578)) { return 1; }
	}
	return 0;
}

IsAt247(playerid){
	if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573)) { return 1; }
	}
	return 0;
}

IsAtATM(playerid){
	if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(2.0,playerid,1144.09912109,-1766.47509766,13.42406273)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1269.66125488,-1323.76599121,13.40214443)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,2823.22656250,-1593.80871582,11.00387192)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1589.39196777,-2295.21191406,13.46932220)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1591.40454102,-2295.21191406,13.46932220)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1593.41723633,-2295.21191406,13.46932220)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,450.53472900,-1794.50781250,5.43714857)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1415.19128418,-1020.33685303,23.73026848)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1417.67700195,-1020.33593750,23.73026848)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1832.7850,-1848.1703,13.5781)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1498.6565,-1749.2366,15.4453)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1832.2637,-1851.1232,13.5781)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1187.0133,-1372.0013,13.5532)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,-1836.5343,63.8226,1055.1891)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,2389.5063,2463.1174,-18.9097)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,1476.8065,-1778.5776,15.3706)) { return 1; }
	}
	return 0;
}

IsAtBank(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(2.0,playerid,344.5987,134.3012,1007.9657)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,347.0113,133.3898,1007.9657)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,358.8446,-1627.3136,39.2349)) { return 1; }
		else if(PlayerToPoint(2.0,playerid,349.0368,132.7026,1007.9657)) { return 1; }
		else if(PlayerToPoint(30.0,playerid,361.3453,-1621.5684,39.2349)) { return 1; }
	}
	return 0;
}

IsAtBowling(playerid){
	if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(1.0,playerid, -2355.6067,920.6121,93.8007)) return 1;
		else if(PlayerToPoint(1.0,playerid, -2355.7280,914.9425,93.8007)) return 1;
		else if(PlayerToPoint(1.0,playerid, -2355.5491,910.4331,93.8007)) return 1;
		else if(PlayerToPoint(1.0,playerid, -2355.8269,905.1210,93.8007)) return 1;
	}
	return 0;
}

IsAtGasStation(playerid){
	if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(8.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(8.0,playerid,1944.3260,-1772.9254,13.3906))			return 1;
		else if(PlayerToPoint(8.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(8.0,playerid,-1609.7958,-2718.2048,48.5391))    return 1;
		else if(PlayerToPoint(8.0,playerid,2114.5444,920.1169,10.8203) || PlayerToPoint(8.0,playerid,2640.6272,1106.5349,10.8203))      return 1;
		else if(PlayerToPoint(8.0,playerid,1625.0463,-2167.6428,13.4402) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))     return 1;
		else if(PlayerToPoint(8.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(8.0,playerid,614.9333,1689.7418,6.6968))       return 1;
		else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(8.0,playerid,70.3882,1218.6783,18.5165))      return 1;
		else if(PlayerToPoint(8.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(8.0,playerid,-1327.7218,2678.8723,50.0625))     return 1;
		else if(PlayerToPoint(8.0,playerid,1637.0149,2331.5129,10.8722) || PlayerToPoint(8.0,playerid,1636.6686,2325.8711,10.8722))     return 1;
		else if(PlayerToPoint(8.0,playerid,1636.6140,2320.6423,10.8722) || PlayerToPoint(8.0,playerid,1595.5337,2198.9404,10.8203))     return 1;
		else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(8.0,playerid,656.3797,-570.4138,16.5015))       return 1;
		else if(PlayerToPoint(8.0,playerid,1099.2325,-350.4425,73.9922))    return 1;
	}
	return 0;
}

IsAtTaller(playerid)
{
	if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(50.0,playerid,1641.2056,-2139.6641,13.4100))   	return 1;
		else if(PlayerToPoint(20.0,playerid,1603.8342,2376.0271,10.8203))   return 1;
		else if(PlayerToPoint(20.0,playerid,1615.6462,2376.8767,10.8203))   return 1;
		else if(PlayerToPoint(20.0,playerid,1629.5187,2376.5425,10.8203))   return 1;
		else if(PlayerToPoint(50.0,playerid,587.1603,-2002.3984,3.8381))    return 1;
	}
	return 0;
}

IsAtHotdog(playerid)
{
	if(IsPlayerConnected(playerid)){
		if(PlayerToPoint(5.0,playerid,1357.8468,-1749.8292,13.3789))         return 1;
		else if(PlayerToPoint(5.0,playerid,1589.6941,-1288.7108,17.5133))   return 1;
		else if(PlayerToPoint(5.0,playerid,1100.6458,-1383.2819,13.7813))   return 1;
		else if (PlayerToPoint(5.0,playerid,1301.0686,-1248.4834,13.5469))  return 1;
	}
	return 0;
}

public OnPlayerConnect(playerid)
{
	SendRconCommand("hostname |Ø| Hermandad Zero RolePlay |Ø| WIP |Ø| ");
	if(IsPlayerNPC(playerid))
	{
		ShowPlayerMarkers(0);
		SpawnPlayer(playerid);
	}
	new plname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, plname, sizeof(plname));
	new namestring = strfind(plname, "_", true);
	new pointstring = strfind(plname, ".", true);
	if(namestring == -1 || pointstring != -1)
	{
		Message(playerid, COLOR_YELLOW2, "-=== HermandadZero ===-");
		Message(playerid, COLOR_YELLOW2, "Su nombre debe ser en el formato Nombre_Apellido. Ejemplo: Juan_Perez");
		Kick(playerid);
		return 1;
	}
	gActivePlayers[playerid]++;
	numplayers++;
	//PlayAudioStreamForPlayer(playerid,"https://dl.dropboxusercontent.com/u/88698185/zonazero.mp3");
	new string[64];
	
	TextDrawShowForPlayer(playerid,Film_1);
	TextDrawShowForPlayer(playerid,Film_2);
	TextDrawShowForPlayer(playerid,arl);
	TextDrawShowForPlayer(playerid,btt);
	TextDrawShowForPlayer(playerid,ttr);
	TextDrawShowForPlayer(playerid,Textdraw0);
	TextDrawShowForPlayer(playerid,Textdraw1);
	TextDrawShowForPlayer(playerid,Textdraw2);
	TextDrawShowForPlayer(playerid,Textdraw3);
	TextDrawShowForPlayer(playerid,Textdraw4);
	TextDrawShowForPlayer(playerid,Textdraw5);
	TextDrawShowForPlayer(playerid,Textdraw6);
	TextDrawShowForPlayer(playerid,Textdraw7);

    MensajeMuriendo[playerid] = 0; 	ForbidHandsUp[playerid]=0; 	Left4Life[playerid]=0; 				MsgL4L[playerid]=0; 			Rescued[playerid] = 0;
    RegText[playerid] = 0;			RegConfig[playerid] = 0; 	PuedePresionar{playerid} = true;    Accesory[playerid] = 0;         CallCost[playerid] = 0;
    HidePM[playerid] = 0; 			PhoneOnline[playerid] = 0;	UsedFind[playerid] = 0;             ActiveTeleport[playerid] = 0;   Camion[playerid] = 9999;
    Freezed[playerid] = 0; 			Condom[playerid] = 0;		TalkingLive[playerid] = 0;          PlayerDescargando[playerid] = 0;
    LiveOffer[playerid] = 999; 		Fichas[playerid] = 0;               FailTuto[playerid] = 0;
    PlayerCuffed[playerid] = 0;		PlayerTazeado[playerid] = 0; Tazer[playerid] = 0;				RStep[playerid] = 0;		 	OnDuty[playerid] = 0;
    Muted[playerid] = 0;			Train_Route[playerid] = 0; 	 Plane_Route[playerid] = 0;			PlayerIsSweeping[playerid] = 0; PlayerIsRuta[playerid] = 0;
    TransportDuty[playerid] = 0;	Mobile[playerid] = 255;      PlayerCargando[playerid] = 0;   Mercancia[playerid] = 0;
    PlayerDrunk[playerid] = 0;	PlayerDrunkTime[playerid] = 0;		Blinded[playerid] = 0;          Regalo_Offer[playerid] = 0;     Regalo_ID[playerid] = 999;
    Tied[playerid] = 0;				Revisado[playerid] = 0;		First_Spawn[playerid] = 1;			gOoc[playerid] = 0; 			gNews[playerid] = 0;
    BigEar[playerid] = 0; 			gFam[playerid] = 0;         DrugTimer[playerid] = 0;            See_MP[playerid] = 0;           Regalo_ITEM[playerid] = 0;
    gPlayerLogged[playerid] = 0; 	gPlayerLogTries[playerid] = 0; 									gPlayerSpawned[playerid] = 0;   HouseExplo[playerid] = 9999;
    TicketOffer[playerid] = 999;	TicketMoney[playerid] = 0;	Delivery[playerid] = 0;        		YaAposto[playerid] = 0;
    CorteJudicial[playerid] = 999;
    HireKey[playerid] = 9999;		BuyNarco[playerid] = 999;	PlayerInfo[playerid][pCash] = dollah; 								NoFuel[playerid] = 0;
    DeathPlayer[playerid] = 0;		PropRob[playerid] = 999;        UsingRayBan[playerid] = 0;      TarifaTaxi[playerid] = 5;       RecentlyShot[playerid] = 0;
    TransportTime[playerid] = 0; 	TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
    GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);     	Hotdog[playerid] = 0;
    gEngine[playerid] = 0; 			JustDied[playerid] = 0; 	KnockedDown[playerid] = 0; 			Divorciar[playerid] = 999;      Speaker[playerid] = 0;
    UsingDrugs[playerid] = 0; 		AFK[playerid] = 0;              AFKTime[playerid] = 0;          Saludo_ID[playerid] = 999;
    UsingEctasy[playerid] = 0; 		EctasyEffect[playerid] = 0; UsingRitalin[playerid] = 0; 		RitalinEffect[playerid] = 0; 	UsingMarihuana[playerid] = 0;
    MarihuanaEffect[playerid] = 0; 	MarihuanaBeat[playerid] = 0; UsingHeroina[playerid] = 0; 		HeroinaEffect[playerid] = 0; 	HeroinaBeat[playerid] = 0;
    OwnableCarOffer[playerid] = 999; 							OwnableCarID[playerid] = 999; 		OwnableCarPrice[playerid] = 0;  RecNumber[playerid] = 0;
    PlayerIsSweeping[playerid] = 0; TEL_INPUT_ID[playerid] = 0;	JustReported[playerid] = 0;			PlayerNeedsHelp[playerid] = 0;  Matrimonio[playerid] = 999;
	IsSmoking[playerid] = 0; 	ReduceTime[playerid] = 0;       Color[playerid] = COLOR_WHITE;  PlayerInfo[playerid][pSuciedad] = 0;
	CancerEffect[playerid] = 0;		PlayerDuda[playerid] = 0;	PlayerSol[playerid] = 0;			RadioOn[playerid] = 0; 			Mochila[playerid][0] = 0;
	Mochila[playerid][1] = 0;		NewUsed[playerid] = 0;		ComproBoleto[playerid] = 0;			EpilepsiaCrack[playerid] = 0;	SIDA[playerid] = 0;
	JobDuty[playerid] = 0;			PizzaCallTime[playerid] = 0;	sPizza[playerid] = 0;           PlayerInfo[playerid][pImplementos] = 0;
	bPizza[playerid] = 0;			duda[playerid] = 0;			TaxiCalled[playerid] = 0;         	Fishing[playerid] = 0;          TutTime[playerid] = 0;
	PFrecuencia[playerid] = 0;		TelfRob[playerid] = 0; 		PickLock[playerid] = 0;             PlayerInfo[playerid][pIpod] = 0;
	cEnergysil[playerid] = 0; 		cNicotina[playerid] = 0; 	cSIDA[playerid] = 0; 				cCancer[playerid] = 0; 			cEpilepsia[playerid] = 0;
	Facturing[playerid] = 0; 		RequestingBackup[playerid] = 0;                                 Ganzuas[playerid] = 0;          PlayerInfo[playerid][pCarnada] = 0;
	InAmbu[playerid] = 0;   		Refueling[playerid] = -1;	PlayerInfo[playerid][pLevel] = 0;	PlayerInfo[playerid][pAdminCP] = 0; PlayerInfo[playerid][pHelper] = 0;
	PlayerStatInfo[playerid][0] = "No"; PlayerStatInfo[playerid][1] = "No";	PlayerStatInfo[playerid][2] = "No"; PlayerStatInfo[playerid][3] = "No";
	PlayerStatInfo[playerid][4] = "No";	PlayerStatInfo[playerid][5] = "No"; PlayerStatInfo[playerid][6] = "No"; PlayerStatInfo[playerid][7] = "No";
	PlayerInfo[playerid][pAnilloCom] = 0;       PlayerInfo[playerid][pAnilloOro] = 0;   PlayerInfo[playerid][pCollar] = 0;      PlayerInfo[playerid][pAnilloDia] = 0;
	PlayerInfo[playerid][pPulsera] = 0;         PlayerInfo[playerid][pAretes] = 0;      PlayerInfo[playerid][pReloj] = 0;       PlayerInfo[playerid][pFacciones] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;		PlayerInfo[playerid][pReg] = 0;			PlayerInfo[playerid][pSex] = 0;			PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;			PlayerInfo[playerid][pExp] = 0;			PlayerInfo[playerid][pAccount] = 0;		PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;		PlayerInfo[playerid][pLottoNr] = 0;		PlayerInfo[playerid][pJob] = 0;         PlayerInfo[playerid][pCheques] = 0;
	PlayerInfo[playerid][pJailed] = 0;			PlayerInfo[playerid][pJailTime] = 0;	PlayerInfo[playerid][pMats] = 0;		PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pSpeed] = 0;			PlayerInfo[playerid][pEctasy] = 0;		PlayerInfo[playerid][pRitalin] = 0;		PlayerInfo[playerid][pHeroina] = 0;
	PlayerInfo[playerid][pMarihuana] = 0;		PlayerInfo[playerid][pLeader] = 0;		PlayerInfo[playerid][pMember] = 0;		PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;			PlayerInfo[playerid][pHealth] = 50.0;	PlayerInfo[playerid][pArmour] = 0.0;	PlayerInfo[playerid][pPos_x] = 1612.3240;
	PlayerInfo[playerid][pPos_y] = -2330.1670;	PlayerInfo[playerid][pPos_z] = 13.5469;	PlayerInfo[playerid][pInt] = 0;			PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pModel] = 7;			PlayerInfo[playerid][pPnumber] = 0;		PlayerInfo[playerid][pPcarkey] = 9999;	PlayerInfo[playerid][pPhousekey] = 9999;
	PlayerInfo[playerid][pCarLic] = 0;			PlayerInfo[playerid][pFlyLic] = 0;		PlayerInfo[playerid][pBoatLic] = 0;		PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pGafas] = 0;			PlayerInfo[playerid][pTut] = 0;         PlayerInfo[playerid][pTimeCar] = 0;     PlayerInfo[playerid][pPbizzkey] = 9999;
	strmid(PlayerInfo[playerid][pAntecedente1], "None", 0, strlen("None"), 64);         PlayerInfo[playerid][pMinutes] = 0;     PlayerInfo[playerid][pMTexto] = 0;
	strmid(PlayerInfo[playerid][pAntecedente2], "None", 0, strlen("None"), 64);         PlayerInfo[playerid][pMarried] = 0;     PlayerInfo[playerid][pContract] = 0;
	strmid(PlayerInfo[playerid][pAntecedente3], "None", 0, strlen("None"), 64);         PlayerInfo[playerid][pPcarkey2] = 9999; ComproCine[playerid] = 0;
	strmid(PlayerInfo[playerid][pNote1], "None", 0, strlen("None"), 80);	strmid(PlayerInfo[playerid][pNote2], "None", 0, strlen("None"), 80);
	strmid(PlayerInfo[playerid][pNote3], "None", 0, strlen("None"), 80);	strmid(PlayerInfo[playerid][pNote4], "None", 0, strlen("None"), 80);
	strmid(PlayerInfo[playerid][pNote5], "None", 0, strlen("None"), 80);    strmid(PlayerInfo[playerid][pMarriedTo], "Nadie", 0, strlen("Nadie"), 64);
	strmid(PlayerInfo[playerid][pSMS_1], "Vacío", 0, strlen("Vacío"), 80);	strmid(PlayerInfo[playerid][pSMS_2], "Vacío", 0, strlen("Vacío"), 80);
	strmid(PlayerInfo[playerid][pSMS_3], "Vacío", 0, strlen("Vacío"), 80);	strmid(PlayerInfo[playerid][pSMS_4], "Vacío", 0, strlen("Vacío"), 80);
	strmid(PlayerInfo[playerid][pSMS_5], "Vacío", 0, strlen("Vacío"), 80);              PlayerInfo[playerid][pTimeCar2] = 0;    PlayerInfo[playerid][pPeces] = 0;
	PlayerInfo[playerid][pLighter] = 0;		PlayerInfo[playerid][pCigarettes] = 0;		PlayerInfo[playerid][pMask] = 0;        Maskuse[playerid] = 0;
	PlayerInfo[playerid][pLocked] = 0;      PlayerInfo[playerid][pEntered] = -1;   		PlayerInfo[playerid][pKills] = 0;       PlayerInfo[playerid][pDNIFalse] = 0;
	new dni = 100000 + random(899999);		PlayerInfo[playerid][pDNI] = dni;           PlayerInfo[playerid][pAdvertencias] = 0;
	strmid(PlayerInfo[playerid][pMSN], "None", 0, strlen("None"), 48);     strmid(PlayerInfo[playerid][pEstado], "Ninguno", 0, strlen("Ninguno"), 18);
	PlayerInfo[playerid][pWeapon] = 0;		PlayerInfo[playerid][pAmmo] = 0;        PlayerInfo[playerid][pAdminAdver] = 0;
	PlayerInfo[playerid][pWeapon2] = 0;		PlayerInfo[playerid][pAmmo2] = 0;       PlayerInfo[playerid][pFichas] = 0;
	PlayerInfo[playerid][pWeapon3] = 0;		PlayerInfo[playerid][pAmmo3] = 0;       strmid(DNIName[playerid], "Nadie", 0, strlen("Nadie"), 32);
	PlayerInfo[playerid][pWeapon4] = 0;		PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pWeapon5] = 0;		PlayerInfo[playerid][pAmmo5] = 0;
	PlayerInfo[playerid][pWeapon6] = 0;		PlayerInfo[playerid][pAmmo6] = 0;
	PlayerInfo[playerid][pWeapon7] = 0;		PlayerInfo[playerid][pAmmo7] = 0;
	PlayerInfo[playerid][pWeapon8] = 0;		PlayerInfo[playerid][pAmmo8] = 0;
	PlayerInfo[playerid][pWeapon9] = 0;		PlayerInfo[playerid][pAmmo9] = 0;
	PlayerInfo[playerid][pWeapon10] = 0;	PlayerInfo[playerid][pAmmo10] = 0;
	PlayerInfo[playerid][pWeapon11] = 0;	PlayerInfo[playerid][pAmmo11] = 0;
	PlayerInfo[playerid][pWeapon12] = 0;	PlayerInfo[playerid][pAmmo12] = 0;
	PlayerInfo[playerid][pMaleta] = 0;		PlayerInfo[playerid][pMochila] = 0;		PlayerInfo[playerid][pCasco] = 0;    Advertencia_Debe[playerid] = 0;
	PlayerInfo[playerid][pSIDA] = 0;		PlayerInfo[playerid][pCancer] = 0;		PlayerInfo[playerid][pEpilepsia] = 0;
	PlayerInfo[playerid][pDEagle] = 100;		PlayerInfo[playerid][pShotgun] = 100;	PlayerInfo[playerid][pMP5] = 100;
	PlayerInfo[playerid][pAK47] = 100;			PlayerInfo[playerid][pM4] = 100;		PlayerInfo[playerid][pSniper] = 100;	PlayerInfo[playerid][pFStyle] = 4;
	PlayerInfo[playerid][pLeccion] = 0;			PlayerInfo[playerid][pBusqueda] = 0;	PlayerInfo[playerid][pAntiSIDA] = 0;
	PlayerInfo[playerid][pAntiCancer] = 0;		PlayerInfo[playerid][pAntiEpilepsia] = 0;										PlayerInfo[playerid][pRent] = 0;
    PlayerInfo[playerid][pRob] = 0;	            PlayerInfo[playerid][pDonateT] = 0;		PlayerInfo[playerid][pCarPremium] = 9999;   PlayerInfo[playerid][pCarPremium2] = 9999;
	PlayerInfo[playerid][pBanDuda] = 0;			PlayerInfo[playerid][pSeguro] = 0;		PlayerInfo[playerid][pWalkie] = 0;
	PlayerInfo[playerid][pHead] = 0;            EstadoON[playerid] = 0;                 strmid(PlayerInfo[playerid][pDNIName], "Ninguno", 0, strlen("Ninguno"), 12);
	PaintballType[playerid] = 0; 	PaintballDMKills[playerid] = 0; PaintPvPKills[playerid] = 0;    Bowling[playerid] = 0;		BowlingMoney[playerid] = 0;
	AdminDuty[playerid] = 0;	JetPack[playerid] = 0;
	for(new v = 0; v < MAX_PLAYERTOYS; v++)
	{
		PlayerToyInfo[playerid][v][ptModelID] = 0;
		PlayerToyInfo[playerid][v][ptBone] = 0;
		PlayerToyInfo[playerid][v][ptPosX] = 0.0;
		PlayerToyInfo[playerid][v][ptPosY] = 0.0;
		PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][v][ptRotX] = 0.0;
		PlayerToyInfo[playerid][v][ptRotY] = 0.0;
		PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
	}
	PlayerGotSpottedRecently[playerid] = 1;
	Checked[playerid] = 1;
	Mapeados_RemoveObjects(playerid);
	for (new c=0; c<13; c++) ScriptWeapons[playerid][c] = 0;
		ScriptWeaponsUpdated[playerid] = 0;
	SetTimerEx("ResetAcWarn", 30000, 0, "i", playerid);
	SetPlayerColor(playerid,COLOR_GRAD2);
	SetPVarString(playerid, "pPassword", "0") ;
	SetTimerEx("CameraLogin", 100, false, "i", playerid);
	GetPlayerName(playerid, plname, sizeof(plname));
	format(string, sizeof(string), "users/%s.ini", plname);
	if(INI_Exist(string))		ShowLoginDialog(playerid, DLOGIN);
	else                    ShowRegisterDialog(playerid, DREGISTER);
	SetPlayerVirtualWorld(playerid, 20);
	return 1;
}

INI_Exist(filename[]) {
	if (fexist(filename)) return true;
	return false;
}

public OnPlayerDisconnect(playerid, reason)
{
	new string[128];
	SaveGuns(playerid);
	OnPlayerUpdateTime(playerid);

	gActivePlayers[playerid]--;
	numplayers--;
	if(usingcarwash == playerid)
	{
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		usingcarwash = -1;
		Update3DTextLabelText(entrancetext, 0x008B00FF, "Nadie está lavando su auto, puedes lavar el tuyo.\nPor: $5 (/lavar)");
	}


	TextDrawHideForPlayer(playerid, SunGlasses);
	Delete3DTextLabel(Estado[playerid]);
	if(SmokeTimer[playerid]) KillTimer(SmokeTimer[playerid]);
	if(DrugTimer[playerid]) KillTimer(DrugTimer[playerid]);
	if(PlayerInfo[playerid][pPcarkey] != 9999 && PlayerInfo[playerid][pTimeCar] > gettime())
	{
		SetVehicleVirtualWorld(PlayerInfo[playerid][pPcarkey], PlayerInfo[playerid][pPcarkey]);
	}
	if(PlayerInfo[playerid][pPcarkey2] != 9999 && PlayerInfo[playerid][pTimeCar2] > gettime())
	{
		SetVehicleVirtualWorld(PlayerInfo[playerid][pPcarkey2], PlayerInfo[playerid][pPcarkey2]);
	}
	if(PlayerInfo[playerid][pCarPremium] != 9999)
	{
		SetVehicleVirtualWorld(PlayerInfo[playerid][pCarPremium], PlayerInfo[playerid][pCarPremium]);
	}
	if(PlayerInfo[playerid][pCarPremium2] != 9999)
	{
		SetVehicleVirtualWorld(PlayerInfo[playerid][pCarPremium2], PlayerInfo[playerid][pCarPremium2]);
	}
	if(HireKey[playerid] != 9999)
	{
		SetVehicleToRespawn(HireKey[playerid]);
	}
	if(Interview != 0)
	{
		if(strcmp(Interviewer,PlayerName(playerid),true) == 0 )
		{
			Message(playerid, COLOR_WHITE, "Se canceló tu entrevista!");
			Interviewer = "Nadie";
			Interview = 0;
		}
	}
	if(PaintballType[playerid] > 0)
	{
		switch(PaintballType[playerid])
		{
			case 1: TotalDM -= 1;
			case 2: TTeamNaranja -= 1;
			case 3: TTeamVerde -= 1;
			case 4: TotalPlayer -= 1;
		}
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
		if(IsPlayerConnected(TransportDriver[playerid]))
		{
			Bought(playerid, TransportCost[playerid]);
			Earn(TransportDriver[playerid], TransportCost[playerid]);
			format(string, sizeof(string), "~w~Te costo ~r~%d$",TransportCost[playerid]);
			GameTextForPlayer(playerid, string, 5000, 1);
			format(string, sizeof(string), "~w~Has ganado ~g~%d$",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
			TextDrawHideForPlayer(playerid, Taximeter[playerid]);
			TextDrawHideForPlayer(TransportDriver[playerid], Taximeter[TransportDriver[playerid]]);
			TransportCost[playerid] = 0;    TransportTime[playerid] = 0;    TransportDriver[playerid] = 999;
		}
	}
	if(TaxiCalled[playerid] > 0)
	{
		switch(TaxiCalled[playerid])
		{
			case 1: { TaxiSlot1 = 999; SlotZone1 = "Sin Localizar"; SlotCity1 = "No"; TiempoSlot1 = 0; }
			case 2: { TaxiSlot2 = 999; SlotZone2 = "Sin Localizar"; SlotCity2 = "No"; TiempoSlot2 = 0; }
			case 3: { TaxiSlot3 = 999; SlotZone3 = "Sin Localizar"; SlotCity3 = "No"; TiempoSlot3 = 0; }
			case 4: { TaxiSlot4 = 999; SlotZone4 = "Sin Localizar"; SlotCity4 = "No"; TiempoSlot4 = 0; }
			case 5: { TaxiSlot5 = 999; SlotZone5 = "Sin Localizar"; SlotCity5 = "No"; TiempoSlot5 = 0; }
			case 6: { TaxiSlot6 = 999; SlotZone6 = "Sin Localizar"; SlotCity6 = "No"; TiempoSlot6 = 0; }
			case 7: { TaxiSlot7 = 999; SlotZone7 = "Sin Localizar"; SlotCity7 = "No"; TiempoSlot7 = 0; }
			case 8: { TaxiSlot8 = 999; SlotZone8 = "Sin Localizar"; SlotCity8 = "No"; TiempoSlot8 = 0; }
		}
	}
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return 0;
	else if(PlayerInfo[playerid][pAdminCP] > 0 && ActiveTeleport[playerid])
	{
		SetPlayerPos(playerid, fX, fY, fZ);
		return 1;
	}
	return 1;
}

function FBIGATEC1(){
	MoveDynamicObject(fbig1, 200.02711487,160.48478699,1002.02343750, 3.0, -1000.0, -1000.0, -1000.0);
	return 1;
}

function FBIGATEC2(){
	MoveDynamicObject(fbig2, 200.15646362,185.94311523,1002.03552246, 3.0, -1000.0, -1000.0, -1000.0);
	return 1;
}

function TumbarPuerta(playerid, Float:x, Float:y, Float:z)
{
	CreateExplosion(x, y, z, 3, 5);
	HouseInfo[HouseExplo[playerid]][hLock] = 0;
	ProxDetector(25.0, playerid, "¡El C4 ha sido detonado con exito, ya pueden entrar!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	HouseExplo[playerid] = 9999;
	return 1;
}

function MissileLaunchEx(Float:x, Float:y, Float:z, Float:radius, type)
{
	CreateExplosion(x, y, z, type, radius);
	Misile_Launcher --;
	new string[100];
	format(string, sizeof(string), "** Lanzamiento detonado en %0.2f - %0.2f - %0.2f, radio %d.",x,y,z,radius);
	SendRadioMessage(3, TEAM_RADIO_COLOR, string);
	return 1;
}

function MissileLaunch(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);
	Misile_Launcher --;
	new string[68];
	format(string, sizeof(string), "** Lanzamiento detonado en el objetivo, vehículo %d.",vehicleid);
	SendRadioMessage(3, TEAM_RADIO_COLOR, string);
	return 1;
}


public SetPlayerSpawn(playerid)
{
	FixAnim(playerid);
	if(IsPlayerConnected(playerid))
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		if(PlayerInfo[playerid][pTut] == 0)
		{
			SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
			ClearChatbox(playerid, 10);
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			SetPosEx(playerid, -1832.2977,15.7958,1061.1436,180.0000,14,playerid);
			SetPlayerCameraPos(playerid,-1832.000,13.000,1062.000);
			SetPlayerCameraLookAt(playerid,-1832.000,18.000,1061.000);
			RStep[playerid] = 1;
			RegText[playerid] = 1;
			RegConfig[playerid] = 1;
			PlayerInfo[playerid][pAge] = 30;
			PlayerInfo[playerid][pSex] = 1;
			TextDrawShowForPlayer(playerid, RegInfo);
			TextDrawShowForPlayer(playerid, RegDraw[playerid]);
			TDStr(RegDraw[playerid], "~n~~>~Sexo:  ~r~Sin Sexo          ~w~Edad: ~r~?~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?");
			Message(playerid, COLOR_WHITE, "Bienvenido al Departamento de Immigración, rellene sus datos.");
			ClearChatbox(playerid, 5);
			Message(playerid, COLOR_YELLOW, "Utiliza las teclas DERECHA y IZQUIERDA para variar las opciones.");
			Message(playerid, COLOR_YELLOW, "Confirma con INTRO");
			return 1;
		}
		if(TutTime[playerid] == 0 && PlayerInfo[playerid][pTut] == 1 && DeathPlayer[playerid] == 0)
		{
			SetPosEx(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z] + 1, 0, PlayerInfo[playerid][pInt], PlayerInfo[playerid][pVirWorld]);
			SetHP(playerid, PlayerInfo[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
			SetPlayerWeapons(playerid);
			UpdatePlayerStat(playerid);
			return 1;
		}
		new rand;
		if(PaintballType[playerid] == 1)
		{
			ResetPlayerWeapons(playerid);
			ArmarPaintBall(playerid);
			rand = random(sizeof(PaintballDMSpawns));
			SetPosEx(playerid, PaintballDMSpawns[rand][0], PaintballDMSpawns[rand][1], PaintballDMSpawns[rand][2],0,14,0);
			return 1;
		}
		if(PaintballType[playerid] == 2)
		{
			ResetPlayerWeapons(playerid);
			ArmarPaintBall(playerid);
			SetPosEx(playerid, -973.1844,1061.3037,1345.6699,0,10,0);
			SetPlayerColor(playerid, ORANGE_ADMIN);
			return 1;
		}
		if(PaintballType[playerid] == 3)
		{
			ResetPlayerWeapons(playerid);
			ArmarPaintBall(playerid);
			SetPosEx(playerid, -1131.2336,1057.7888,1346.4170,0,10,0);
			SetPlayerColor(playerid, VERDE_ADMIN);
			return 1;
		}
		if(PaintballType[playerid] == 4)
		{
			ResetPlayerWeapons(playerid);
			ArmarPaintBall(playerid);
			rand = random(sizeof(PaintPvPSpawns));
			Pause(playerid);
			SetPosEx(playerid, PaintPvPSpawns[rand][0], PaintPvPSpawns[rand][1], PaintPvPSpawns[rand][2],0,0,0);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
			SetPosEx(playerid, 2767.8936,445.4332,3.7747,163.2555,1,0);
			Message(playerid, COLOR_LIGHTRED, "No has cumplido tu condena, estas denuevo en la carcel.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
			SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid,268.5777,1857.9351,9.8133);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 3)
		{
			SetPosEx(playerid, 263.4922,77.0915,1001.0391,322.1463,6,0);
			Message(playerid, COLOR_LIGHTRED, "Has tenido un accidente en prisión.");
			Message(playerid, COLOR_LIGHTRED, "Te hemos transladado a la ultima celda.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 4)
		{
			SetPosEx(playerid, 194.3425,158.1145,1003.0234,272.9291,3,0);
			Message(playerid, COLOR_LIGHTRED, "Has tenido un accidente en prisión.");
			Message(playerid, COLOR_LIGHTRED, "Te hemos transladado de celda.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 5)
		{
			SetPosEx(playerid, 1553.4100,-1665.9277,1718.9019,273.6029,0,0);
			Message(playerid, COLOR_LIGHTRED, "Has tenido un accidente en prisión.");
			Message(playerid, COLOR_LIGHTRED, "Te hemos transladado de celda.");
			return 1;
		}
		if(DeathPlayer[playerid] == 1 && PlayerInfo[playerid][pJailed] == 0)
		{
			DeathPlayer[playerid] = 0;
			Message(playerid, TEAM_CYAN_COLOR, "Te has recuperado exsitósamente de tu accidente.");
			Message(playerid, TEAM_CYAN_COLOR, "Te hemos transladado al hospital.");
			Message(playerid, TEAM_CYAN_COLOR, "Desafortunadamente tienes amnesia, no recuerdas nada.");
			PlayerInfo[playerid][pSuciedad] += 2;
			SetPosEx(playerid, -2671.2676,509.5787,48.0791,272.0,0,0);
			if(PlayerInfo[playerid][pSeguro] == 0) { Bought(playerid, 500);  Fondos[SAMUR] += 500; Message(playerid, COLOR_GREEN, "* No tienes seguro, te cobramos 1000$. Compre uno en el hospital de LS."); }
			return 1;
		}
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new string[128];
	new Float:px,Float:py,Float:pz;
	InAmbu[playerid] = 0;
	DeathPlayer[playerid] = 1;
	UsingDrugs[playerid] = 0;
	UsingEctasy[playerid] = 0;
	EctasyEffect[playerid] = 0;
	UsingRitalin[playerid] = 0;
	RitalinEffect[playerid] = 0;
	UsingHeroina[playerid] = 0;
	HeroinaEffect[playerid] = 0;
	HeroinaBeat[playerid] = 0;
	UsingMarihuana[playerid] = 0;
	MarihuanaEffect[playerid] = 0;
	MarihuanaBeat[playerid] = 0;
	Left4Life[playerid] = 0;
	PlayerInfo[playerid][pArmour] = 0;
	gPlayerSpawned[playerid] = 0;
	GetPlayerPos(playerid, px, py, pz);
	PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0;
	new drunk = GetPlayerDrunkLevel(playerid);
	if(drunk > 0) SetPlayerDrunkLevel(playerid, 0);
	Checked[playerid] = 1;
	PlayerGotSpottedRecently[playerid] = 1;
	SetTimerEx("ResetAcWarn",20000,false, "i", playerid);
	PlayerInfo[killerid][pKills] += 1;
	PlayerInfo[playerid][pDeaths] += 1;
	if(usingcarwash == playerid)
	{
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		usingcarwash = -1;
		Update3DTextLabelText(entrancetext, 0x008B00FF, " Nadie está lavando su auto, puedes lavar el tuyo.\nPor: $5 (/lavar)");
	}

	if(SmokeTimer[playerid]) KillTimer(SmokeTimer[playerid]);
	if(DrugTimer[playerid]) KillTimer(DrugTimer[playerid]);
	if(IsPlayerConnected(killerid))
	{
		if(GetPlayerWeapon(killerid) == 24)	{   PlayerInfo[killerid][pDEagle] += 10;   	}
		if(GetPlayerWeapon(killerid) == 25)	{   PlayerInfo[killerid][pShotgun] += 15;   }
		if(GetPlayerWeapon(killerid) == 29)	{   PlayerInfo[killerid][pMP5] += 15;   	}
		if(GetPlayerWeapon(killerid) == 31)	{   PlayerInfo[killerid][pM4] += 15;   		}
		if(GetPlayerWeapon(killerid) == 30)	{   PlayerInfo[killerid][pAK47] += 15;    	}
		if(GetPlayerWeapon(killerid) == 34)	{   PlayerInfo[killerid][pSniper] += 30;   }
	}
	if(Pandilleros(killerid) && Pandilleros(playerid))
	{
		if(PlayerToPoint(30.0, playerid, 2491.8098,-1664.8685,13.3438) || PlayerToPoint(30.0, playerid, 1882.5814,-2027.3207,13.3906) || PlayerToPoint(30.0, playerid, 2819.5747,-1182.8378,25.2364))
		{
			if(PlayerInfo[killerid][pMember] == PlayerInfo[playerid][pMember]) { Message(playerid, COLOR_GRAD2, "No mates a los de tu banda!"); }
			if(PlayerInfo[killerid][pMember] != PlayerInfo[playerid][pMember])
			{
				if(GetPlayerMoney(playerid) > 14)
				{
					Message(playerid, COLOR_WHITE, "Te ha matado el de la banda enemiga, pierdes 15$ que van hacia el.");
					if(PlayerInfo[killerid][pMember] == 9) 	{ GText(playerid, "own~g~3~w~d", 5000, 1); }
					if(PlayerInfo[killerid][pMember] == 10) { GText(playerid, "own~b~3~w~d", 5000, 1); }
					if(PlayerInfo[killerid][pMember] == 11) { GText(playerid, "own~y~3~w~d", 5000, 1); }

					GText(killerid, "Muerte ~r~enemiga~n~~w~+15~g~$", 5000, 1);
					format(string, sizeof(string), "~w~Te ha ~r~matado~n~~r~%s", PlayerName(killerid));
					GText(playerid, string, 5000, 1);

					GivePlayerMoney(playerid, -15); GivePlayerMoney(killerid, 15);
				}
				else
				{
					Message(playerid, COLOR_WHITE, "Te ha matado el de la banda enemiga, pierdes 15$ que van hacia el.");
					Message(killerid, COLOR_WHITE, "No recibes dinero ya que el enemigo no tiene 15$, pero el si los perdió!");
					if(PlayerInfo[killerid][pMember] == 9) 	{ GText(playerid, "own~g~3~w~d", 5000, 1); }
					if(PlayerInfo[killerid][pMember] == 10) { GText(playerid, "own~b~3~w~d", 5000, 1); }
					if(PlayerInfo[killerid][pMember] == 11) { GText(playerid, "own~y~3~w~d", 5000, 1); }

					GivePlayerMoney(playerid, -15);
				}
			}
		}
	}
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			Message(caller,  COLOR_GRAD2, "La llamada se perdió.");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	if(PaintballType[playerid] > 0)
	{
		if(PaintballType[playerid] == 1)
		{
			PaintballDMKills[killerid] += 1;
			format(string, sizeof(string), "* [DM] %s[%d] hizo polvo a %s[%d]", PlayerName(killerid), PaintballDMKills[killerid], PlayerName(playerid), PaintballDMKills[playerid]);
			SendPBMessage(1, 0xFFB18CFF, string);
		}
		if(PaintballType[playerid] == 2)
		{
			TvTVerdeKills += 1;
			format(string, sizeof(string), "{3CB9FF}* [TVT] Muerte naranja. El equipo verde aumenta su puntaje a %d", TvTVerdeKills);
			SendPBMessage(2, -1, string);
			SendPBMessage(3, -1, string);
		}
		if(PaintballType[playerid] == 3)
		{
			TvTNaranjaKills += 1;
			format(string, sizeof(string), "{3CB9FF}* [TVT] Muerte verde. El equipo naranja aumenta su puntaje a %d", TvTNaranjaKills);
			SendPBMessage(2, -1, string);
			SendPBMessage(3, -1, string);
		}
		if(PaintballType[playerid] == 4)
		{
			PaintPvPKills[killerid] += 1;
			format(string, sizeof(string), "* [PVP] %s[%d] ha masacrado a %s[%d]", PlayerName(killerid), PaintPvPKills[killerid], PlayerName(playerid), PaintPvPKills[playerid]);
			SendPBMessage(4, 0xEBBDA3FF, string);
		}
	}
	if(PlayerInfo[playerid][pHead] > 0)
	{
		if(IsPlayerConnected(killerid))
		{
			if(Hitman(killerid) && PlayerInfo[killerid][pRank] > 0)
			{
				GivePlayerMoney(killerid, PlayerInfo[playerid][pHead]);
				format(string, sizeof(string), "** Central: %s mató a %s, y consiguió %d$", PlayerName(killerid), PlayerName(playerid), PlayerInfo[playerid][pHead]);
				SendRadioMessage(23, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "** Te mató un hitman. Tu cabeza tenía un valor de: %d$", PlayerInfo[playerid][pHead]);
				Message(playerid, COLOR_WHITE, string);
				PlayerInfo[playerid][pHead] = 0;
			}
		}
	}
 	StopAudioStreamForPlayer(playerid); // Parar las retransmisiones
 	killerid = INVALID_PLAYER_ID;
 	SetPlayerColor(playerid,COLOR_GRAD2);
 	return 1;
 }

 public OnPlayerSpawn(playerid)
 {

 	StopAudioStreamForPlayer(playerid);
 	if(IsPlayerNPC(playerid))
 	{
 		new npcname[MAX_PLAYER_NAME];
 		GetPlayerName(playerid, npcname, sizeof(npcname));
 		RequestNPCLoad(playerid,npcname);
 		return 1;
 	}

 	SetPlayerStats(playerid);
 	TextDrawHideForPlayer(playerid, Film_1);
 	TextDrawHideForPlayer(playerid, Film_2);
 	TextDrawHideForPlayer(playerid, arl);
 	TextDrawHideForPlayer(playerid, btt);
 	TextDrawHideForPlayer(playerid, ttr);
 	TextDrawShowForPlayer(playerid,Version);
 	TextDrawShowForPlayer(playerid,ktm);
 	TextDrawHideForPlayer(playerid,Textdraw0);
 	TextDrawHideForPlayer(playerid,Textdraw1);
 	TextDrawHideForPlayer(playerid,Textdraw2);
 	TextDrawHideForPlayer(playerid,Textdraw3);
 	TextDrawHideForPlayer(playerid,Textdraw4);
 	TextDrawHideForPlayer(playerid,Textdraw5);
 	TextDrawHideForPlayer(playerid,Textdraw6);
 	TextDrawHideForPlayer(playerid,Textdraw7);
 	TextDrawShowForPlayer(playerid,Textdraw8);
 	TextDrawShowForPlayer(playerid,Textdraw9);
 	TextDrawShowForPlayer(playerid, BalanceTextDraw[playerid]);
 	SetObjectMaterial(comisaria, 4, 19378, "all_walls", "mp_shop_floor2", 0);
 	SetObjectMaterial(comisaria, 5, 19378, "all_walls", "mp_shop_floor2", 0);
 	SetObjectMaterial(comisaria, 6, 19378, "all_walls", "cj_lightwood", 0);
 	SetObjectMaterial(comisaria, 7, 19378, "all_walls", "cj_lightwood", 0);
 	SetObjectMaterial(comisaria, 8, 19378, "all_walls", "cj_lightwood", 0);
 	SetObjectMaterial(comisaria, 12, 8419, "vgsbldng1", "buildng01wind_128", 0);
 	SetObjectMaterial(comisaria, 13, 19378, "all_walls", "mp_shop_floor2", 0);
 	if(PlayerInfo[playerid][pPcarkey] != 9999)
 	{
 		SetVehicleVirtualWorld(PlayerInfo[playerid][pPcarkey], 0);
 	}
 	if(PlayerInfo[playerid][pPcarkey2] != 9999)
 	{
 		SetVehicleVirtualWorld(PlayerInfo[playerid][pPcarkey2], 0);
 	}
 	if(PlayerInfo[playerid][pCarPremium] != 9999)
 	{
 		SetVehicleVirtualWorld(PlayerInfo[playerid][pCarPremium], 0);
 	}
 	if(PlayerInfo[playerid][pCarPremium2] != 9999)
 	{
 		SetVehicleVirtualWorld(PlayerInfo[playerid][pCarPremium2], 0);
 	}
 	if(PlayerInfo[playerid][pAdminCP] > 6 && PlayerInfo[playerid][pAdminCP] < 2012 || PlayerInfo[playerid][pAdminCP] > 2014)
 	{
 		new string[80];
 		new year, month,day;    getdate(year, month, day);
 		format(string, sizeof(string), "%s ha sido baneado por el AntiHack, razón: AdminHack (%d/%d/%d)",PlayerName(playerid),day,month,year);
 		Message(playerid, COLOR_RED2, string);
 		A_Info(string);
 		BanLog(string);
 		PlayerInfo[playerid][pLocked] = 8;
 		Ban(playerid);
 	}
 	if(gPlayerLogged[playerid] == 0)
 	{
 		Message(playerid, COLOR_LIGHTRED, "** Este servidor requiere una conexion antes de entrar (Kick) **");
 		Kick(playerid);
 	}
 	SetPlayerSpawn(playerid);
 	SetPlayerToTeamColor(playerid);
 	return 1;
 }

 function BanLog(string[])
 {
 	new entry[128];
 	format(entry, sizeof(entry), "%s\n",string);
 	new File:hFile;
 	hFile = fopen("ban.log", io_append);
 	fwrite(hFile, entry);
 	fclose(hFile);
 }

 public OnVehicleDeath(vehicleid)
 {
 	if(IsAnOwnableCar(vehicleid))
 	{
 		SetVehicleVirtualWorld(vehicleid, vehicleid);
 		SetTimerEx("MostrarVehiculo", 90000, false, "i", vehicleid);
 	}
 	return 1;
 }

 function MostrarVehiculo(vehicleid)
 {
 	SetVehiclePos(vehicleid, CarInfo[vehicleid][cLocationx], CarInfo[vehicleid][cLocationy], CarInfo[vehicleid][cLocationz]);
 	SetVehicleZAngle(vehicleid, CarInfo[vehicleid][cAngle]);
 	SetVehicleParamsEx(vehicleid ,0,0,0,CarInfo[vehicleid][cLock],0,0,0);
 	Gas[vehicleid] = 100;
 	SetVehicleVirtualWorld(vehicleid, 0);
 }

 public OnPlayerEnterCheckpoint(playerid)
 {
 	Licencias_OnPlayerEnterCP(playerid);

 	DisablePlayerCheckpoint(playerid);
 	new carid = GetPlayerVehicleID(playerid), string[128];
 	if(PlayerInfo[playerid][pJob] == 1 && Train_Route[playerid] > 0)
 	{
 		if(!IsPlayerInAnyVehicle(playerid)) { Message(playerid, COLOR_GRAD2, "¡No estás en un Tren!"); Train_Route[playerid] = 0; return 1; }

 		switch(Train_Route[playerid])
 		{
 			case 1:
 			{
 				SetPlayerCheckpoint(playerid, -1943.2317,159.9102,27.0006, 5.0);
 				GText(playerid, "~g~0$~n~~n~~w~Proxima estacion:~n~~r~SF", 5000, 1);
 				Train_Route[playerid] = 2;
 				GivePlayerMoney(playerid, 0);
 			}
 			case 2:
 			{
 				SetPlayerCheckpoint(playerid, 1455.6279,2632.2500,12.1256, 5.0);
 				GText(playerid, "~g~0$~n~~n~~w~Proxima estacion:~n~~r~LV", 5000, 1);
 				Train_Route[playerid] = 3;
 				GivePlayerMoney(playerid, 0);
 			}
 			case 3:
 			{
 				SetPlayerCheckpoint(playerid, 2864.7500,1274.8271,12.1256, 5.0);
 				GText(playerid, "~g~0$~n~~n~~w~Proxima estacion:~n~~r~LV", 5000, 1);
 				Train_Route[playerid] = 4;
 				GivePlayerMoney(playerid, 0);
 			}
 			case 4:
 			{
 				SetPlayerCheckpoint(playerid, 1715.0220,-1953.7056,14.8756, 5.0);
 				GText(playerid, "~g~0$~n~~n~~w~Proxima estacion:~n~~r~LS", 5000, 1);
 				Train_Route[playerid] = 5;
 				GivePlayerMoney(playerid, 0);
 			}
 			case 5:
 			{
 				GText(playerid, "~g~30$~n~~n~~w~Final recorrido", 5000, 1);
 				Train_Route[playerid] = 0;
 				GivePlayerMoney(playerid, 350);
 				Message(playerid, COLOR_YELLOW2, "Final del recorrido, obtenido: 350$");
 				RemovePlayerFromVehicle(playerid);
 			}
 		}
 	}
 	else if(PlayerInfo[playerid][pJob] == 6 && PizzaCallTime[playerid] > 0)
 	{
 		PizzaCallTime[playerid] = 0;
 		Message(playerid, COLOR_WHITE, "* Has llegado a tiempo al punto de entrega de la pizza.");
 	}
 	else if(PlayerInfo[playerid][pJob] == 2 && PlayerIsSweeping[playerid] == 1)
 	{
 		if(!IsPlayerInAnyVehicle(playerid)) { Message(playerid, COLOR_GRAD2, "¡No estás en un Sweeper!"); PlayerIsSweeping[playerid] = 0; return 1; }

 		if(isBarrenderoVehicle(carid))
 		{
 			new cashes = random(60);
 			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
 			Earn(playerid, cashes);
 			new randomss;
 			randomss = random(sizeof(gSweeperPoints));
 			SetPlayerCheckpoint(playerid, gSweeperPoints[randomss][0], gSweeperPoints[randomss][1], gSweeperPoints[randomss][2], 5.0);
 		}
 	}
 	else if(PlayerInfo[playerid][pJob] == 3 && Plane_Route[playerid] > 0)
 	{
 		if(!IsPlayerInAnyVehicle(playerid)) { Message(playerid, COLOR_GRAD2, "¡No estás en un avión!"); Train_Route[playerid] = 0; return 1; }

 		switch(Plane_Route[playerid])
 		{
 			case 1:
 			{
 				GText(playerid, "~w~proximo destino: ~n~~r~Verdant Meadows", 5000, 1);
 				Plane_Route[playerid] = 2;
 				SetPlayerCheckpoint(playerid, 211.2588,2502.7649,17.4063, 15.0);
 			}
 			case 2:
 			{
 				GText(playerid, "~w~proximo destino: ~n~~r~san fierro", 5000, 1);
 				Plane_Route[playerid] = 3;
 				SetPlayerCheckpoint(playerid, -1378.8790,113.1982,15.0826, 15.0);
 			}
 			case 3:
 			{
 				GText(playerid, "~w~proximo destino: ~n~~r~LAX airport", 5000, 1);
 				Plane_Route[playerid] = 4;
 				SetPlayerCheckpoint(playerid, 2004.8916,-2593.5776,14.4709, 15.0);
 			}
 			case 4:
 			{
 				GText(playerid, "~w~proximo destino: ~n~~r~Los Santos", 5000, 1);
 				Plane_Route[playerid] = 5;
 				SetPlayerCheckpoint(playerid, 1563.2407,-2458.6262,16.6014, 15.0);
 			}
 			case 5:
 			{
 				GText(playerid, "~w~final del recorrido~n~~g~1100$ ganados en cheque", 5000, 1);
 				Plane_Route[playerid] = 0;
 				PlayerInfo[playerid][pCheques] += 600;
 				SetVehicleToRespawn(carid);
 			}
 		}
 	}
 	else if(PlayerInfo[playerid][pJob] == 8 && PlayerIsRuta[playerid] == 1)
 	{
 		if(!isCamionerosVehicle(carid)) { Message(playerid, COLOR_GRAD2, "¡No estás en un Camión!"); PlayerIsRuta[playerid] = 0; Mercancia[playerid] = 0; return 1; }
 		PlayerCargando[playerid] = 10;
 		TogglePlayerControllable(playerid, 0);
 		Cargando[playerid] = CreateProgressBar(286.00, 171.00, 92.50, 4.50, 1107243007, 10.0);
 		ShowProgressBarForPlayer(playerid, Cargando[playerid]);
 		Message(playerid, COLOR_GRAD4, "¡Debes esperar a que se cargue el camión!");
 	}
 	else if(PlayerIsRuta[playerid] == 2 && Mercancia[playerid] > 0)
 	{
 		if(!isCamionerosVehicle(carid)) { Message(playerid, COLOR_GRAD2, "¡No estás en un Camión!"); PlayerIsRuta[playerid] = 0; Mercancia[playerid] = 0; return 1; }
 		PlayerDescargando[playerid] = 10;
 		TogglePlayerControllable(playerid, 0);
 		Cargando[playerid] = CreateProgressBar(286.00, 171.00, 92.50, 4.50, 1107243007, 10.0);
 		ShowProgressBarForPlayer(playerid, Cargando[playerid]);
 		SetProgressBarValue(Cargando[playerid], 100);
 		UpdateProgressBar(Cargando[playerid], playerid);
 		Message(playerid, COLOR_GRAD4, "¡Debes esperar a que se descargue el ..!");
 	}
 	else if(PlayerIsRuta[playerid] == 3 && Mercancia[playerid] > 0)
 	{
 		if(!isCamionerosVehicle(carid)) { Message(playerid, COLOR_GRAD2, "¡Debes regresar con el camión!"); SetPlayerCheckpoint(playerid, 2228.5657,-2636.0427,13.4365, 5.0); return 1; }
 		switch(Mercancia[playerid])
 		{
 			case 1:	{ PlayerInfo[playerid][pCheques] += 200; Message(playerid, COLOR_WHITE, "* Has recibido un cheque de $200 por completar la entrega."); }
 			case 2:	{ PlayerInfo[playerid][pCheques] += 300; Message(playerid, COLOR_WHITE, "* Has recibido un cheque de $300 por completar la entrega."); }
 			case 3:	{ PlayerInfo[playerid][pCheques] += 400; Message(playerid, COLOR_WHITE, "* Has recibido un cheque de $400 por completar la entrega."); }
 			case 4:	{ PlayerInfo[playerid][pCheques] += 500; Message(playerid, COLOR_WHITE, "* Has recibido un cheque de $500 por completar la entrega."); }
 			case 5:	{ PlayerInfo[playerid][pCheques] += 600; Message(playerid, COLOR_WHITE, "* Has recibido un cheque de $600 por completar la entrega."); }
 			case 6: { PlayerInfo[playerid][pCheques] += 700; Message(playerid, COLOR_WHITE, "* Has recibido un cheque de $700 por completar la entrega."); }
 		}
 		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
 		RemovePlayerFromVehicle(playerid);
 		Mercancia[playerid] = 0;
 		PlayerIsRuta[playerid] = 0;
 		PlayerCargando[playerid] = 0;
 		PlayerDescargando[playerid] = 0;
 	}
 	else if(IsANarco(playerid))
 	{
 		if(DrugFarming[playerid] > 0)
 		{
 			new drugs = random(10);
 			format(string, sizeof(string), "¡Has cosechado y has conseguido %d gramos de droga!", drugs+1);
 			Message(playerid, COLOR_WHITE, string);
 			PlayerInfo[playerid][pDrugs] += drugs+1;
 			new randomize = random(sizeof(gDrugFarmVar));
 			SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
 			return 1;
 		}
 		else if(Smuggling[playerid] > 0)
 		{
 			switch(SmugglingType[playerid])
 			{
 				case 1:
 				{
 					format(string, sizeof(string), "** Entrega completada ** - Has conseguido %d gramos de Speed",Smuggling[playerid]);
 					Message(playerid, 0xF0AB4FFF, string);
 					PlayerInfo[playerid][pSpeed] += Smuggling[playerid];
 					Smuggling[playerid] = 0;
 					SmugglingType[playerid] = 0;
 				}
 				case 2:
 				{
 					format(string, sizeof(string), "** Entrega completada ** - Has conseguido %d gramos de Extasis",Smuggling[playerid]);
 					Message(playerid, 0xF0AB4FFF, string);
 					PlayerInfo[playerid][pEctasy] += Smuggling[playerid];
 					Smuggling[playerid] = 0;
 					SmugglingType[playerid] = 0;
 				}
 				case 3:
 				{
 					format(string, sizeof(string), "** Entrega completada ** - Has conseguido %d gramos de Ritalin",Smuggling[playerid]);
 					Message(playerid, 0xF0AB4FFF, string);
 					PlayerInfo[playerid][pRitalin] += Smuggling[playerid];
 					Smuggling[playerid] = 0;
 					SmugglingType[playerid] = 0;
 				}
 				case 4:
 				{
 					format(string, sizeof(string), "** Entrega completada ** - Has conseguido %d gramos de Heroina",Smuggling[playerid]);
 					Message(playerid, 0xF0AB4FFF, string);
 					PlayerInfo[playerid][pHeroina] += Smuggling[playerid];
 					Smuggling[playerid] = 0;
 					SmugglingType[playerid] = 0;
 				}
 				case 5:
 				{
 					format(string, sizeof(string), "** Entrega completada ** - Has conseguido %d gramos de Marihuana",Smuggling[playerid]);
 					Message(playerid, 0xF0AB4FFF, string);
 					PlayerInfo[playerid][pMarihuana] += Smuggling[playerid];
 					Smuggling[playerid] = 0;
 					SmugglingType[playerid] = 0;
 				}
 			}
 		}
 	}
 	return 1;
 }

 public OnPlayerStateChange(playerid, newstate, oldstate)
 {
 	if(IsPlayerNPC(playerid))
 	{
 		return 1;
 	}

 	Licencias_OnPlayerStateChange(playerid, newstate);

 	new string[128];
 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	if(newstate == PLAYER_STATE_ONFOOT)
 	{
 		MsgL4L[playerid]=0; MensajeMuriendo[playerid] = 0;
 		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
 		{
 			if(IsPlayerConnected(TransportDriver[playerid]))
 			{
 				Bought(playerid, TransportCost[playerid]);
 				Earn(TransportDriver[playerid], TransportCost[playerid]);
 				format(string, sizeof(string), "~w~Te costo ~r~%d$",TransportCost[playerid]);
 				GameTextForPlayer(playerid, string, 5000, 1);
 				format(string, sizeof(string), "~w~Has ganado ~g~%d$",TransportCost[playerid]);
 				GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
 				TextDrawHideForPlayer(playerid, Taximeter[playerid]);
 				TextDrawHideForPlayer(TransportDriver[playerid], Taximeter[TransportDriver[playerid]]);
 				TransportCost[playerid] = 0;	TransportTime[playerid] = 0;	TransportDriver[playerid] = 999;
 			}
 		}
 		if(Train_Route[playerid] > 0)
 		{
 			Train_Route[playerid] = 0;
 			Message(playerid, COLOR_WHITE, "Ruta tren finalizada");
 			if(isTrenVehicle(GetPlayerVehicleID(playerid)))
 			{
 				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
 			}
 		}
 		if(PlayerIsSweeping[playerid] > 0)
 		{
 			PlayerIsSweeping[playerid] = 0;
 			Message(playerid, COLOR_WHITE, "Dejaste de barrer las calles.");
 			DisablePlayerCheckpoint(playerid);
 			if(isBarrenderoVehicle(GetPlayerVehicleID(playerid)))
 			{
 				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
 			}
 		}
 		if(DrugFarming[playerid] > 0)
 		{
 			DisablePlayerCheckpoint(playerid);
 			DrugFarming[playerid] = 0;
 			Message(playerid, COLOR_WHITE, "¡Dejaste de cosechar drogas!");
 		}
 		if(Plane_Route[playerid] > 0)
 		{
 			Plane_Route[playerid] = 0;
 			Message(playerid, COLOR_WHITE, "¡Has abandonado el avión!");
 			DisablePlayerCheckpoint(playerid);
 			if(isPilotosVehicle(GetPlayerVehicleID(playerid)))
 			{
 				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
 			}
 		}
	 	        // Si sale del vehiculo
 		if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
 		{
 			if (PlayerInfo[playerid][pDonateT] >= 1)
 			{
	    			StopAudioStreamForPlayer(playerid); // Parar las retransmisiones
	    		}
	    	}
	    }

	    new newcar = GetPlayerVehicleID(playerid);
	    if(newstate == PLAYER_STATE_PASSENGER)
	    {
	    	new vehicleid = GetPlayerVehicleID(playerid);
	    	for(new i = 0; i < MAX_PLAYERS; i++)
	    	{
	    		if(IsPlayerConnected(i))
	    		{
	    			if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0 && isTaxiTransportVehicle(vehicleid))
	    			{
	    				if(GetPlayerMoney(playerid) < TarifaTaxi[i])
	    				{
	    					format(string, sizeof(string), "* Necesitas %d$ para pagar el taxi!", TarifaTaxi[i]);
	    					Message(playerid, COLOR_NEGATIVE, string);
	    					RemovePlayerFromVehicle(playerid);
	    				}
	    				else
	    				{
	    					TransportTime[playerid] = 1;
	    					TransportCost[playerid] = TarifaTaxi[i];
	    					TransportDriver[playerid] = i;
	    					format(string, sizeof(string), "* Has entrado al taxi. Tarifa: %d", TarifaTaxi[i]);
	    					Message(playerid, COLOR_WHITE, string);
	    					format(string, sizeof(string), "* %s entró a su taxi.", PlayerName(playerid));
	    					Message(i, COLOR_WHITE, string);
	    					TextDrawShowForPlayer(playerid, Taximeter[playerid]);
	    					TextDrawShowForPlayer(i, Taximeter[i]);
	    					format(string, sizeof(string), "   A pagar: ~g~%d$ ~w~- Tiempo: ~b~%d",TransportCost[playerid],TransportTime[playerid]);
	    					TextDrawSetString(Taximeter[playerid], string);
	    					TextDrawSetString(Taximeter[i], string);
	    				}
	    			}
	    			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
	    			{
	    				if(GetPlayerVehicleSeat(playerid) >= 2)
	    				{
	    					Pause(playerid);
	    					SetPosEx(playerid, 2003.3566,2288.7163,1011.1256,0,0,GetPlayerVehicleID(playerid));
	    					InAmbu[playerid] = GetPlayerVehicleID(playerid);
	    				}
	    			}
	    		}
	    	}
	    }
	    if(newstate == PLAYER_STATE_DRIVER)
	    {
	    	GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
	    	SetVehicleParamsEx(newcar,engineOn[newcar],lights,alarm,doors,bonnet,boot,objective);

		// =================================Carros de Renta ==================================//
	    	if(isRentaVehicle(newcar))
	    	{
	    		if(HireKey[playerid] == 9999)
	    		{
	    			ShowPlayerDialog(playerid,DIA_RENTA,DIALOG_STYLE_MSGBOX, "Vehiculo de alquiler","{FFFFFF}Este vehiculo es de alquiler.\n\n{FFFFFF}- Cuando no lo use devuelvalo usando{FF0000} /desrentarveh{FFFFFF}\n\n{FFFFFF}¿Desea Rentarlo?","Si","No");
			} //else SendClientMessage(playerid, 0xFFFFFFFF, "Recuerda que tienes un vehículo alquilado. Utiliza /desrentarveh para poder alquilar otro.");
		}
		if(isCamionerosVehicle(newcar) && PlayerInfo[playerid][pJob] == 8)
		{
			if(PlayerIsRuta[playerid] == 0)
			{
				Camion[playerid] = newcar;
				ShowPlayerDialog(playerid, CARGAR_CAMION, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona la carga", "{FFFFFF}Ropa - Binco\nComida y Accesorios - 24-7\nMedicamentos - Farmacia\nMateriales - Anmunation\nMateriales Ilegales\nDetergentes - Lavandería", "Aceptar", "Cancelar");
			}
			else Message(playerid, COLOR_GRAD2, "¡Debes terminar la entrega que tienes pendiente!");
		}
		// ========================== Info Embargos & Multa ================================ //
		if(PlayerInfo[playerid][pPcarkey] == newcar || PlayerInfo[playerid][pPcarkey2] == newcar)
		{
			if(CarInfo[newcar][cEmbargo] > 0 || CarInfo[newcar][cMulta] > 0)
			{
				Message(playerid, COLOR_YELLOW, "-------------------------------------------");
				format(string, sizeof(string), "  Embargos: %d <> Multa: %d$", CarInfo[newcar][cEmbargo], CarInfo[newcar][cMulta]);
				Message(playerid, COLOR_WHITE, string);
				Message(playerid, COLOR_YELLOW, "-------------------------------------------");
				return 1;
			}
		}
        // ============================ Embargos ============================== //
		if(IsAnOwnableCar(newcar) && CarInfo[newcar][cEmbargo] > 2)
		{
			Message(playerid, COLOR_GRAD2, "Este vehículo esta embargado! No puede ser conducido.");
			RemovePlayerFromVehicle(playerid);
			return 1;
		}
		// -=========================== Vehículo en Venta =================================- //
		if(IsAnOwnableCar(newcar) && CarInfo[newcar][cOwned] == 0)
		{
			ClearChatbox(playerid, 10);
			Message(playerid,0x0080FFFF,"|---------------[ Vehículo en Venta ]---------------|");
			format(string, sizeof(string), "  Modelo: %s", GetVehicleFriendlyName(newcar));
			Message(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "  Precio: %d", CarInfo[newcar][cValue]);
			Message(playerid, COLOR_WHITE, string);
			if(GetPlayerMoney(playerid) > CarInfo[newcar][cValue])
			{
				Message(playerid, COLOR_GREEN, "  Usted puede comprar este vehículo.");
				Message(playerid, COLOR_GREEN, "  Utilize /cvehiculo(2)");
			}
			else
			{
				Message(playerid, 0xD21515FF, "  No puede adquirir este vehículo.");
				format(string, sizeof(string), "  Le faltan: %d$", GetPlayerMoney(playerid)-CarInfo[newcar][cValue]);
				Message(playerid, 0xD21515FF, string);
			}
			Message(playerid,0x0080FFFF,"|---------------[ ----------------------------- ]---------------|");
		}
		// -================================= Quitar Vehículo ==========================- //
		if(IsAnOwnableCar(newcar) && PlayerInfo[playerid][pPcarkey] != 9999)
		{
			new give = CarInfo[PlayerInfo[playerid][pPcarkey]][cValue]/4;
			if(newcar == PlayerInfo[playerid][pPcarkey] && PlayerInfo[playerid][pTimeCar] <= gettime())
			{
				Earn(playerid, give*3);
				CarInfo[PlayerInfo[playerid][pPcarkey]][cLock] = 0;
				PlayerInfo[playerid][pPcarkey] = 9999;
				PlayerInfo[playerid][pTimeCar] = 0;
				ClearChatbox(playerid, 10);
				Message(playerid, COLOR_RED2, "Este vehículo ya no te pertenece.");
			}
		}
		if(IsAnOwnableCar(newcar) && PlayerInfo[playerid][pPcarkey2] != 9999)
		{
			new give = CarInfo[PlayerInfo[playerid][pPcarkey2]][cValue]/4;
			if(newcar == PlayerInfo[playerid][pPcarkey2] && PlayerInfo[playerid][pTimeCar2] <= gettime())
			{
				Earn(playerid, give*3);
				CarInfo[PlayerInfo[playerid][pPcarkey2]][cLock] = 0;
				PlayerInfo[playerid][pPcarkey2] = 9999;
				PlayerInfo[playerid][pTimeCar2] = 0;
				ClearChatbox(playerid, 10);
				Message(playerid, COLOR_RED2, "Este vehículo ya no te pertenece.");
			}
		}
  		// -================================ Carros de Facciones ================================- //
		else if(isFBIVehicle(newcar))
		{
			if(Team_FBI(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!"); return 1;
		}
		else if(isSAMDVehicle(newcar))
		{
			if(Team_SAMUR(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isGrooveVehicle(newcar))
		{
			if(Team_Groove(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isGobiernoVehicle(newcar))
		{
			if(Gobierno(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isLaHermandadVehicle(newcar))
		{
			if(Team_Hermandad(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isLatinKingsVehicle(newcar))
		{
			if(Team_LK(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isHitmanVehicle(newcar))
		{
			if(Hitman(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		} 
		else if(isJuzgadosVehicle(newcar))
		{
			if(Team_CorteJudicial(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isMecanicosVehicle(newcar))
		{
			if(Team_Mecanicos(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isMoterosVehicle(newcar))
		{
			if(Moteros(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}

		else if(isLCNVehicle(newcar))
		{
			if(Mafia_Italiana(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isYakuzaVehicle(newcar))
		{
			if(Mafia_Yakuza(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isRusosVehicle(newcar))
		{
			if(Mafia_Rusa(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isCNNVehicle(newcar))
		{
			if(Journalist(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isTraficantesVehicle(newcar))
		{
			if(IsANarco(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isSAEMVehicle(newcar))
		{
			if(Team_NG(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isPiratasAsfaltoVehicle(newcar))
		{
			if(Piratas4x4(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isBallasVehicle(newcar))
		{
			if(Ballas_pand(playerid)) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡Este vehículo no es de tu facción!");return 1;
		}
		else if(isTrenVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 1) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡No eres Conductor de Tren!");return 1;
		}
		else if(isBarrenderoVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 2) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡No eres Barrendero!");return 1;
		}
		else if(isPizzerosVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 6) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡No eres Pizzero!");return 1;
		}
		else if(isCamionerosVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 8) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡No eres camionero!");return 1;
		}
		else if(isPescadoresVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 7) { return 1;}
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡No eres pescador!");return 1;
		}
		else if(IsABike(newcar))
		{
			SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
		}
		else if(isTaxiTransportVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 9) { return 1; }
			else RemovePlayerFromVehicle(playerid); Message(playerid, COLOR_GRAD2, "¡No eres taxista!"); return 1;
		}
		else if(isPilotosVehicle(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 3 || PlayerInfo[playerid][pFlyLic] > 0 && PlayerInfo[playerid][pJob] == 0) { return 1; }
			else
			{
				RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1);
			}
		}

		if(IsAnOwnableCar(newcar)) format(string, 16, "%s", CarInfo[newcar][cName]);
		else format(string, 16, "%s", GetVehicleFriendlyName(newcar));
		GText(playerid, string, 3000, 1);
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		SetHP(playerid, 50.0);
		gPlayerSpawned[playerid] = 1;
	}
	return 1;
}

public DiseaseSystem()
{
	new string[80];
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
		if(IsPlayerConnected(j))
		{
			new Float:health;
			GetPlayerHealth(j, health);
			// -============================== Cancer ================================- //
			if(PlayerInfo[j][pCancer] > 250 && PlayerInfo[j][pCancer] < 300)
			{
				if(CancerEffect[j] > 30)
				{
					SetHP(j, health-20);
					format(string, sizeof(string), "* %s tose.", PlayerName(j));
					ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					CancerEffect[j] = 0;
					PlayerInfo[j][pCancer] += 3;
				}
				CancerEffect[j] += 1;
			}
			if(PlayerInfo[j][pCancer] > 300 && PlayerInfo[j][pCancer] < 400)
			{
				if(CancerEffect[j] > 30)
				{
					SetHP(j, health-30);
					format(string, sizeof(string), "* %s tose.", PlayerName(j));
					ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					CancerEffect[j] = 0;
					PlayerInfo[j][pCancer] += 6;
				}
				CancerEffect[j] += 1;
			}
			if(PlayerInfo[j][pCancer] > 400 && PlayerInfo[j][pCancer] < 600)
			{
				if(CancerEffect[j] > 30)
				{
					SetHP(j, health-40);
					format(string, sizeof(string), "* %s tose.", PlayerName(j));
					ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					CancerEffect[j] = 0;
					PlayerInfo[j][pCancer] += 10;
				}
				CancerEffect[j] += 1;
			}
			// -================================ Epilepsia ===============================- //
			if(cEpilepsia[j] == 0)
			{
				if(PlayerInfo[j][pEpilepsia] > 250 && PlayerInfo[j][pEpilepsia] < 350)
				{
					if(EpilepsiaCrack[j] > 50)
					{
						ApplyAnimation(j, "CRACK", "crckdeth2", 2.5, 0, 0, 0, 1, 60000);
						ApplyAnimation(j, "CRACK", "crckdeth2", 2.5, 0, 0, 0, 1, 60000);
						format(string, sizeof(string), "* %s se cae y empieza a echar saliva.", PlayerName(j));
						ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						EpilepsiaCrack[j] = 0;
						PlayerInfo[j][pEpilepsia] += 10;
						SetHP(j, health-30);
						SetPlayerDrunkLevel(j, 30000);
					}
					EpilepsiaCrack[j] += 1;
				}
				if(PlayerInfo[j][pEpilepsia] > 350 && PlayerInfo[j][pEpilepsia] < 600)
				{
					if(EpilepsiaCrack[j] > 50)
					{
						ApplyAnimation(j, "CRACK", "crckdeth1", 2.5, 0, 0, 0, 1, 90000);
						ApplyAnimation(j, "CRACK", "crckdeth1", 2.5, 0, 0, 0, 1, 90000);
						format(string, sizeof(string), "* %s se cae y empieza a echar saliva.", PlayerName(j));
						ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						EpilepsiaCrack[j] = 0;
						PlayerInfo[j][pEpilepsia] += 20;
						SetHP(j, health-40);
						SetPlayerDrunkLevel(j, 40000);
					}
					EpilepsiaCrack[j] += 1;
				}
				if(PlayerInfo[j][pEpilepsia] > 600)
				{
					if(EpilepsiaCrack[j] > 50)
					{
						ApplyAnimation(j, "CRACK", "crckdeth3", 2.5, 0, 0, 0, 1, 120000);
						ApplyAnimation(j, "CRACK", "crckdeth3", 2.5, 0, 0, 0, 1, 120000);
						format(string, sizeof(string), "* %s se cae y empieza a echar saliva.", PlayerName(j));
						ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						EpilepsiaCrack[j] = 0;
						PlayerInfo[j][pEpilepsia] += 30;
						SetHP(j, health-60);
						SetPlayerDrunkLevel(j, 50000);
					}
					EpilepsiaCrack[j] += 1;
				}
			}
			// -================================= SIDA ========================================- //
			if(PlayerInfo[j][pSIDA] > 0 && PlayerInfo[j][pSIDA] < 2)
			{
				if(SIDA[j] > 30)
				{
					ApplyAnimation(j, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 5000);
					ApplyAnimation(j, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 5000);
					format(string, sizeof(string), "* %s vomita.", PlayerName(j));
					ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					if(health > 15) { SetHP(j, health-50); }
				}
				SIDA[j] -= 1;
			}
			if(PlayerInfo[j][pSIDA] > 1 && PlayerInfo[j][pSIDA] < 3)
			{
				if(SIDA[j] > 20)
				{
					ApplyAnimation(j, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 10000);
					ApplyAnimation(j, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 10000);
					format(string, sizeof(string), "* %s vomita.", PlayerName(j));
					ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					if(health > 15) { SetHP(j, health-76); }
				}
				SIDA[j] -= 1;
			}
			if(PlayerInfo[j][pSIDA] > 3)
			{
				if(SIDA[j] > 10)
				{
					ApplyAnimation(j, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 15000);
					ApplyAnimation(j, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 15000);
					format(string, sizeof(string), "* %s vomita.", PlayerName(j));
					ProxDetector(30.0, j, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					if(health > 15) { SetHP(j, health-70); }
				}
				SIDA[j] -= 1;
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(isBarrenderoVehicle(vehicleid)) SetVehicleToRespawn(vehicleid);

	if(UsingBelt[playerid] == 1) UsingBelt[playerid] = 0;

	if(NoFuel[playerid] == 1) TogglePlayerControllable(playerid, 1); NoFuel[playerid]= 0;

	TogglePlayerControllable(playerid, 1);

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	SendRconCommand("hostname |Ø| Hermandad Zero RolePlay |Ø| WIP |Ø|");
	if(IsPlayerNPC(playerid)) return 1;
	if(gPlayerLogged[playerid] == 1)
	{
		SpawnPlayer(playerid);
	}
	return 1;
}

function OtherTimer()
{
	new string[100];
	if(TaxiSlot1 < 999) { TiempoSlot1 += 1; }
	if(TaxiSlot2 < 999) { TiempoSlot2 += 1; }
	if(TaxiSlot3 < 999) { TiempoSlot3 += 1; }
	if(TaxiSlot4 < 999) { TiempoSlot4 += 1; }
	if(TaxiSlot5 < 999) { TiempoSlot5 += 1; }
	if(TaxiSlot6 < 999) { TiempoSlot6 += 1; }
	if(TaxiSlot7 < 999) { TiempoSlot7 += 1; }
	if(TaxiSlot8 < 999) { TiempoSlot8 += 1; }
	AddsOn();
	NameTimer();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		OnPlayerCheckStat(i);
		if(IsPlayerConnected(i))
		{
			new vehicleid = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(Gas[vehicleid] < 10) PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
			}
			if(Tied[i] > 0)
			{
				TogglePlayerControllable(i, 0);
			}
			if(CellTime[i] > 0)
			{
				if(CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
				}
				if(Mobile[Mobile[i]] == i)
				{
					if(CallCost[i] >= PlayerInfo[i][pMinutes]) { StopCall(i); Message(i, COLOR_WHITE, "{018CFE}OTECEL: {FFFFFF}Se te acabó el saldo, debes realizar una recarga."); }
					else { CallCost[i] = CallCost[i]+1; }
				}
				CellTime[i] = CellTime[i] +1;
				if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
					if(IsPlayerConnected(Mobile[i]))
					{
						format(string, sizeof(string), "* El teléfono de %s suena", PlayerName(Mobile[i]));
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~La llamada te costo~n~~r~$%d",CallCost[i]/10);
				GameTextForPlayer(i, string, 5000, 1);
				PlayerInfo[i][pMinutes] -= CallCost[i];
				CallCost[i] = 0;
			}
			if(engineOn[vehicleid] && Gas[vehicleid] == 0 && IsPlayerInAnyVehicle(i))
			{
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(vehicleid,0,lights,alarm,doors,bonnet,boot,objective);
				engineOn[vehicleid] = false;
				GameTextForPlayer(i,"~w~vehiculo sin~n~~r~gasolina",1500,1);
			}
			if (PlayerToPoint(2.0, i, 1425.2998,-1291.2107,13.5560))
			{
				GameTextForPlayer(i, "~b~Hitman ~w~Deje su mensaje~n~Use: ~y~~n~/hitman (id) (Monto)", 3000, 3);
			}
			if(TransportTime[i] > 0)
			{
				if(TransportTime[i] >= 10)
				{
					TransportTime[i] = 1;
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
							TransportCost[i] += TarifaTaxi[TransportDriver[i]];
						}
					}
				}
				TransportTime[i] += 1;
				format(string, sizeof(string), "   A pagar: ~g~%d$ ~w~- Tiempo: ~b~%d",TransportCost[i], TransportTime[i]);
				TextDrawSetString(Taximeter[i], string);
				TextDrawSetString(Taximeter[TransportDriver[i]], string);
			}
			if(AFK[i] > 0){
				if(AFKTime[i] == gettime())
				{
					SetPlayerPos(i, AFKLoc[i][0],AFKLoc[i][1],AFKLoc[i][2]);
					SetTimerEx("KickAFK", 1200, false, "i", i);
				}
			}
		}
	}
	vehiculosTimer();
	return 1;
}

function CamionTimer()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsRuta[i] == 1 && PlayerCargando[i] >= 1)
		{
			PlayerCargando[i] -= 1;
			if(PlayerCargando[i] >= 1)
			{
				SetProgressBarValue(Cargando[i], 10-PlayerCargando[i]);
				UpdateProgressBar(Cargando[i], i);
			}
			else if(PlayerCargando[i] == 0)
			{
				SetProgressBarValue(Cargando[i], 10);
				UpdateProgressBar(Cargando[i], i);
				SetTimerEx("DestroyProgg", 1000, false, "i", i);
				PlayerIsRuta[i] = 2;
				switch(Mercancia[i])
				{
					case 1:
					{
						new point = random(2);
						if(point == 1) SetPlayerCheckpoint(i, 2245.7646,-1658.8499,15.2865, 5.0);
						else SetPlayerCheckpoint(i, 454.2690,-1502.2506,30.8709, 5.0);
						Message(i, COLOR_WHITE, "¡Has cargado tu camión con prendas de vestir, ve y entregalas a binco!");
					}
					case 2:
					{
						new mappo = random(2);
						if(mappo == 1) SetPlayerCheckpoint(i, 1841.0033,-1863.2201,13.3897, 5.0);
						else SetPlayerCheckpoint(i, 1314.4264,-918.9805,38.0876, 5.0);
						Message(i, COLOR_WHITE, "¡Has cargado tu camión con comida y accesorios, ve y entregalas al 24-7!");
					}
					case 3:
					{
						SetPlayerCheckpoint(i, 890.6088,-1665.0690,13.5469, 5.0);
						Message(i, COLOR_WHITE, "¡Has cargado tu camión con medicamentos, ve y entregalas a la farmacia!");
					}
					case 4:
					{
						SetPlayerCheckpoint(i, 1361.2109,-1279.8762,13.3828, 5.0);
						Message(i, COLOR_WHITE, "¡Has cargado tu camión con materiales armamentisticos, ve y entregalos a ammunation!");
					}
					case 5:
					{
						SetPlayerCheckpoint(i, -84.9333,-1572.7817,2.6107, 5.0);
						Message(i, COLOR_WHITE, "¡Has cargado tu camión con materiales ilegales, ve y entregalos pero ten cuidado con la policia!");
					}
					case 6:
					{
						SetPlayerCheckpoint(i, 1841.4935,-1417.0869,13.5625, 5.0);
						Message(i, COLOR_WHITE, "¡Has cargado tu camión detergentes, ve y entregalos en la lavanderia!");
					}
				}
			}
		}
		if(PlayerIsRuta[i] == 2 && PlayerDescargando[i] >= 1)
		{
			PlayerDescargando[i] -= 1;
			if(PlayerDescargando[i] >= 1)
			{
				SetProgressBarValue(Cargando[i], PlayerDescargando[i]);
				UpdateProgressBar(Cargando[i], i);
			}
			else if(PlayerDescargando[i] == 0)
			{
				DestroyProgressBar(Cargando[i]);
				Cargando[i] = INVALID_BAR_ID;
				TogglePlayerControllable(i, 1);
				PlayerIsRuta[i] = 3;
				SetPlayerCheckpoint(i, 2224.5657,-2636.0427,13.4365, 8.0);
				Message(i, COLOR_WHITE, "¡Has entregado la carga, ahora regresa a la estacion por tu paga y recuerda regresar con el camión!");
			}
		}
		if(RecentlyShot[i] == 1)	RecentlyShot[i] = 0;
	}
	return 1;
}

public Tiempos()
{
	SetTimer("CambiarClima",600000, true);
	return 1;
}
public CambiarClima()
{
	Climas = random(20);
	if(Climas == 1)
	{
		SetWeather(1);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Soleado, sin nubes.");
	}
	else if(Climas == 2)
	{
		SetWeather(2);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Tiempo soleado con cambios significativos!");
	}
	else if(Climas == 3)
	{
		SetWeather(3);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Tiempo soleado, buena visibilidad!");
	}
	else if(Climas == 4)
	{
		SetWeather(4);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado y soleado en parte!");
	}
	else if(Climas == 5)
	{
		SetWeather(5);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Cielo muy limpio, con un clima templado!");
	}
	else if(Climas == 6)
	{
		SetWeather(6);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Temperatura de 20 grados, despejado.!");
	}
	else if(Climas == 7)
	{
		SetWeather(7);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, baja probabilidad de lluvia.");
	}
	else if(Climas == 8)
	{
		SetWeather(8);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado. Probabilidad de tormentas.");
	}
	else if(Climas == 9)
	{
		SetWeather(9);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, niebla intensa. Conducir con precaución.");
	}
	else if(Climas == 10)
	{
		SetWeather(10);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Despejado, viento del sector norte.");
	}
	else if(Climas == 11)
	{
		SetWeather(11);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Calor, mucho calor. Se recomienda prender aires acondicionados.");
	}
	else if(Climas == 12)
	{
		SetWeather(12);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Algunas nubes en el cielo. Buen tiempo.");
	}
	else if(Climas == 13)
	{
		SetWeather(13);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Algunas nubes en el cielo, baja probabilidad de lluvia.");
	}
	else if(Climas == 14)
	{
		SetWeather(14);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Despejado, corre viento moderado.");
	}
	else if(Climas == 15)
	{
		SetWeather(15);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Frío intenso.");
	}
	else if(Climas == 16)
	{
		SetWeather(16);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: LLuvias intensas, llevar paragua.");
	}
	else if(Climas == 17)
	{
		SetWeather(17);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Calor, 40 grados centígrados. Humedad 5 porciento.");
	}
	else if(Climas == 18)
	{
		SetWeather(18);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Mucho calor, 41 grados centígrados, corre viento caliente.");
	}
	else if(Climas == 19)
	{
		SetWeather(19);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]:¡Tormenta de arena! Se recomiendo no salir de su casa.");
	}
	else if(Climas == 20)
	{
		SetWeather(20);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, probabilidad de lluvia moderada. LLevar paragua.");
	}
	else if(Climas == 21)
	{
		SetWeather(21);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, probabilidad de lluvia moderada. LLevar paragua.");
	}
	else if(Climas == 22)
	{
		SetWeather(22);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, probabilidad de lluvia moderada. LLevar paragua.");
	}
	else if(Climas == 23)
	{
		SetWeather(23);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, probabilidad de lluvia moderada. LLevar paragua.");
	}
	else if(Climas == 24)
	{
		SetWeather(2009);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, probabilidad de lluvia moderada. LLevar paragua.");
	}
	else if(Climas == 25)
	{
		SetWeather(32);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, niebla, visibilidad de 25 metros.");
	}
	else if(Climas == 26)
	{
		SetWeather(45);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Templado, se acerca una tormenta.");
	}
	else if(Climas == 27)
	{
		SetWeather(42);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Mucha niebla y probabilidad de lluvia.");
	}
	else if(Climas == 28)
	{
		SetWeather(43);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Nublado, niebla, visibilidad de 60 metros.");
	}
	else if(Climas == 29)
	{
		SetWeather(250);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Todo el pueblo está porreado.");
	}
	else if(Climas == 30)
	{
		SetWeather(48);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Despejado. Tranquilo, sin apuros.");
	}
	else if(Climas == 31)
	{
		SetWeather(36);
		SendClientMessageToAll(COLOR_CLIMA,"[Parte Meteorológico]: Cambiante. Poca posibilidad de lluvia.");
	}
	return 1;
}

public SetPlayerUnjail()
{
	new string[128], Float:health, Float:armor;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerMoney(i) > ScriptMoney[i])  SetMoneyToPlayer(i, ScriptMoney[i]);
			
			switch(GetPlayerWeapon(i)) {   case 9, 18, 26, 28, 32, 35 .. 40, 44, 45 :	ResetPlayerWeapons(i);  }

			GetPlayerHealth(i, health);		GetPlayerArmour(i, armor);
			if(health > PlayerInfo[i][pHealth])		SetHP(i, PlayerInfo[i][pHealth]);

			if(armor > ScriptArmor[i])				GiveArmorToPlayer(i, ScriptArmor[i]);
			
			if(PlayerInfo[i][pJailed] > 0)
			{
				if(PlayerInfo[i][pJailTime] > 0)
				{
					PlayerInfo[i][pJailTime]--;
				}
				if(PlayerInfo[i][pJailTime] <= 0)
				{
					PlayerInfo[i][pJailTime] = 0;
					switch(PlayerInfo[i][pJailed])
					{
						case 1:
						{
							SetPlayerInterior(i, 0);
							PlayerInfo[i][pInt] = 0;
							SetPlayerPos(i, 1549.6013,-1681.5797,13.5563);
						}
						case 3:
						{
							SetPosEx(i,243.5500,71.0335,1003.6406,225.9520,6,0);
							PlayerInfo[i][pBusqueda] = 0;
							SetPlayerWantedLevel(i, PlayerInfo[i][pBusqueda]);
						}
						case 4:
						{
							SetPosEx(i,230.1667,141.7600,1003.0234,280.4726,3,0);
							PlayerInfo[i][pBusqueda] = 0;
							SetPlayerWantedLevel(i, PlayerInfo[i][pBusqueda]);
						}
						case 5:
						{
							SetPosEx(i,2440.4939,2371.7617,11.1414,87.1910,0,0);
							PlayerInfo[i][pBusqueda] = 0;
							SetPlayerWantedLevel(i, PlayerInfo[i][pBusqueda]);
						}
					}
					PlayerInfo[i][pJailed] = 0;
					Message(i, COLOR_GRAD1,"Warden: Usted ha sido dejado en libertad.");
					Message(i, COLOR_GRAD1,"Warden: Piense un tiempo, antes de que usted cometa un crimen.");
					GameTextForPlayer(i, "~g~Dejado En Libertad~n~~w~Trate de ser un mejor ciudadano", 5000, 1);
					SetPlayerToTeamColor(i);
				}
			}
			if(HasArmor[i] == 1 && armor < 1)
			{
				HasArmor[i] = 0;
				RemovePlayerAttachedObject(i, 1);
				Att_Obj_Slot_1[i] = "Vacío";
			}
			if(PlayerInfo[i][pBusqueda] > 0)
			{
				SetPlayerWantedLevel(i, PlayerInfo[i][pBusqueda]);
			}
			if(UsedFind[i] >= 1)
			{
				UsedFind[i] -= 1;
			}
			if(PlayerDrunk[i] > 0)
			{
				if(PlayerDrunk[i] > 9)
				{
					if(PlayerDrunkTime[i] > 20)
					{
						ApplyAnimation(i,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[i]*1000);
						ApplyAnimation(i,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[i]*1000);
						SetPlayerDrunkLevel(i, PlayerDrunk[i]*1000);
						PlayerDrunk[i] -= 1;
						PlayerDrunkTime[i] = 0;
					}
					PlayerDrunkTime[i] += 1;
				}
				if(PlayerDrunk[i] < 10 && PlayerDrunk[i] > 0)
				{
					if(PlayerDrunkTime[i] > 30)
					{
						PlayerDrunk[i] -= 1;
						PlayerDrunkTime[i] = 0;
					}
					PlayerDrunkTime[i] += 1;
				}
			}
			if(UsingRitalin[i] > 0)
			{
				if(UsingRitalin[i] == 200 && armor < 101) { SetPlayerArmour(i, armor+20); }
				if(UsingRitalin[i] == 100 && armor < 101) { SetPlayerArmour(i, armor+20); }
				UsingRitalin[i] -= 1;
			}
			if(UsingRitalin[i] == 0 &&RitalinEffect[i] == 1 && UsingDrugs[i] == 1)
			{
				GText(i, "~w~Efecto ~b~ritalin ~n~~w~pasado", 5000, 1);
				UsingDrugs[i] = 0;
				SetPlayerWeather(i, DefaultWeather);
				UsingRitalin[i] = 0;
				RitalinEffect[i] = 0
			}
			if(UsingHeroina[i] > 0)
			{
				new Float:PlayerHealth;
				GetPlayerHealth(i, PlayerHealth);
				new crack = random(10);
				if(crack == 2) { ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 0, 0, 0, 0, 5000); }
				if(HeroinaBeat[i] == 1) { SetHP(i, PlayerHealth-1);}
				UsingHeroina[i] -= 1;
			}
			if(UsingHeroina[i] == 0 &&HeroinaEffect[i] == 1 && UsingDrugs[i] == 1)
			{
				GText(i, "~w~Efecto ~g~heroina ~n~~w~pasado", 5000, 1);
				UsingDrugs[i] = 0;
				UsingHeroina[i] = 0;
				HeroinaEffect[i] = 0
				HeroinaBeat[i] = 0;
				SetHP(i, 25);
			}
			if(UsingMarihuana[i] > 0)
			{
				new Float:PlayerHealth;
				GetPlayerHealth(i, PlayerHealth);
				new crack = random(10);
				if(crack == 2) { ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 0, 0, 0, 0, 5000); }
				if(MarihuanaBeat[i] == 1) { SetHP(i, PlayerHealth-1);}
				UsingMarihuana[i] -= 1;
			}
			if(UsingMarihuana[i] == 0 &&MarihuanaEffect[i] == 1 && UsingDrugs[i] == 1)
			{
				GText(i, "~w~Efecto ~g~marihuana ~n~~w~pasado", 5000, 1);
				UsingDrugs[i] = 0;
				UsingMarihuana[i] = 0;
				MarihuanaEffect[i] = 0
				MarihuanaBeat[i] = 0;
				SetHP(i, 25);
			}
			if(Left4Life[i] > 0)
			{
				switch(Left4Life[i])
				{
					case 1:{
						format(string, sizeof(string), "* %s muere desangrado.", PlayerName(i));
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetHP(i, 0);
						PlayerInfo[i][pEpilepsia] += 1;
						PlayerInfo[i][pCancer] += 3;
						Left4Life[i] = 0;
					}
					case 30:
					{
						format(string, sizeof(string), "* %s agoniza lentamente.", PlayerName(i));
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:PlayerHealth;
						GetPlayerHealth(i, PlayerHealth)
						SetHP(i, PlayerHealth-5);
						if(Rescued[i] == 0)
						{
							ApplyAnimation(i, "CRACK", "crckdeth4", 2.5, 1, 0, 1, 0, 0);
							ApplyAnimation(i, "CRACK", "crckdeth4", 2.5, 1, 0, 1, 0, 0);
						}
					}
					case 100:
					{
						format(string, sizeof(string), "* %s empieza a sangrar más.", PlayerName(i));
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:PlayerHealth;
						GetPlayerHealth(i, PlayerHealth)
						SetHP(i, PlayerHealth-3);
						if(Rescued[i] == 0)
						{
							ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
							ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
						}
					}
					case 150:
					{
						format(string, sizeof(string), "* %s se encuentra incosciente y sangrando.", PlayerName(i));
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:PlayerHealth;
						GetPlayerHealth(i, PlayerHealth)
						SetHP(i, PlayerHealth-2);
						if(Rescued[i] == 0)
						{
							ApplyAnimation(i, "CRACK", "crckdeth1", 2.5, 1, 0, 1, 0, 0);
							ApplyAnimation(i, "CRACK", "crckdeth1", 2.5, 1, 0, 1, 0, 0);
						}
					}
				}
				Left4Life[i] -= 1;
			}
			if(PizzaCallTime[i] > 0)
			{
				if(PizzaCallTime[i] == 90) { PizzaCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GText(i, "~r~CheckPoint~n~~w~Eliminado!", 2500, 1); }
				else
				{
					format(string, sizeof(string), "%d", 90 - PizzaCallTime[i]);
					GText(i, string, 1500, 6);
					PizzaCallTime[i] += 1;
				}
			}
		}
	}
}

public CheckGas()
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	for(new i=0;i<VEH;i++)
	{
		if(engineOn[i] == 1)
		{
			if(Gas[i] >= 1 && !isPilotosVehicle(i) && !isTrenVehicle(i))
			{
				Gas[i] --;
			}
			if(IsAnOwnableCar(i) && CarInfo[i][cOwned] == 1 && CarInfo[i][cBattery] > 0)
			{
				CarInfo[i][cBattery] -= 1;
				if(CarInfo[i][cBattery] < 40)
				{
					GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(i,0,lights,alarm,doors,bonnet,boot,objective);
					engineOn[i] = false;
				}
			}
		}
	}
	CheckCarHealth();
	return 1;
}

public SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJailed] < 1)
		{
			if (PlayerInfo[playerid][pWeapon] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon], PlayerInfo[playerid][pAmmo]);
				PlayerInfo[playerid][pWeapon] = 0; PlayerInfo[playerid][pAmmo] = 0;
			}
			if (PlayerInfo[playerid][pWeapon2] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon2], PlayerInfo[playerid][pAmmo2]);
				PlayerInfo[playerid][pWeapon2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
			}
			if (PlayerInfo[playerid][pWeapon3] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon3], PlayerInfo[playerid][pAmmo3]);
				PlayerInfo[playerid][pWeapon3] = 0; PlayerInfo[playerid][pAmmo3] = 0;
			}
			if (PlayerInfo[playerid][pWeapon4] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon4], PlayerInfo[playerid][pAmmo4]);
				PlayerInfo[playerid][pWeapon4] = 0; PlayerInfo[playerid][pAmmo4] = 0;
			}
			if (PlayerInfo[playerid][pWeapon5] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon5], PlayerInfo[playerid][pAmmo5]);
				PlayerInfo[playerid][pWeapon5] = 0; PlayerInfo[playerid][pAmmo5] = 0;
			}
			if (PlayerInfo[playerid][pWeapon6] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon6], PlayerInfo[playerid][pAmmo6]);
				PlayerInfo[playerid][pWeapon6] = 0; PlayerInfo[playerid][pAmmo6] = 0;
			}
			if (PlayerInfo[playerid][pWeapon7] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon7], PlayerInfo[playerid][pAmmo7]);
				PlayerInfo[playerid][pWeapon7] = 0; PlayerInfo[playerid][pAmmo7] = 0;
			}
			if (PlayerInfo[playerid][pWeapon8] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon8], PlayerInfo[playerid][pAmmo8]);
				PlayerInfo[playerid][pWeapon8] = 0; PlayerInfo[playerid][pAmmo8] = 0;
			}
			if (PlayerInfo[playerid][pWeapon9] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon9], PlayerInfo[playerid][pAmmo9]);
				PlayerInfo[playerid][pWeapon9] = 0; PlayerInfo[playerid][pAmmo9] = 0;
			}
			if (PlayerInfo[playerid][pWeapon10] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon10], PlayerInfo[playerid][pAmmo10]);
				PlayerInfo[playerid][pWeapon10] = 0; PlayerInfo[playerid][pAmmo10] = 0;
			}
			if (PlayerInfo[playerid][pWeapon11] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon11], PlayerInfo[playerid][pAmmo11]);
				PlayerInfo[playerid][pWeapon11] = 0; PlayerInfo[playerid][pAmmo11] = 0;
			}
			if (PlayerInfo[playerid][pWeapon12] > 0)
			{
				SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon12], PlayerInfo[playerid][pAmmo12]);
				PlayerInfo[playerid][pWeapon12] = 0; PlayerInfo[playerid][pAmmo12] = 0;
			}
		}
	}
}

UpdatePlayerStat(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pSex] == 2) 	PlayerStatInfo[playerid][0] = "Mujer";
		else 									PlayerStatInfo[playerid][0] = "Hombre";

		switch (PlayerInfo[playerid][pDonateT]) 
		{
			case 0: PlayerStatInfo[playerid][5] = "No";
			case 1: PlayerStatInfo[playerid][5] = "Nivel 1";
			case 2: PlayerStatInfo[playerid][5] = "Nivel 2";
		}

		if(PlayerInfo[playerid][pMarried] == 1) PlayerStatInfo[playerid][6] = "Si";
		else 									PlayerStatInfo[playerid][6] = "No";
		
		if(PlayerInfo[playerid][pSeguro] == 1)  PlayerStatInfo[playerid][7] = "LS";
		else 									PlayerStatInfo[playerid][7] = "No";

		switch(PlayerInfo[playerid][pOrigin])
		{
			case 1: PlayerStatInfo[playerid][1] = "Argentina";
			case 2: PlayerStatInfo[playerid][1] = "España";
			case 3: PlayerStatInfo[playerid][1] = "Venezuela";
			case 4: PlayerStatInfo[playerid][1] = "Chile";
			case 5: PlayerStatInfo[playerid][1] = "Peru";
		}
		
		switch(PlayerInfo[playerid][pJob]){
			case 1:     PlayerStatInfo[playerid][2] = "Chófer de Tren";
			case 2:     PlayerStatInfo[playerid][2] = "Barrendero";
			case 3:     PlayerStatInfo[playerid][2] = "Piloto";
			case 4:     PlayerStatInfo[playerid][2] = "Vendedor de móviles";
			case 5:     PlayerStatInfo[playerid][2] = "Ladrón";
			case 6:     PlayerStatInfo[playerid][2] = "Pizzero";
			case 7:     PlayerStatInfo[playerid][2] = "Pescador";
			case 8:     PlayerStatInfo[playerid][2] = "Camionero";
			case 9:     PlayerStatInfo[playerid][2] = "Taxista";
			case 11:    PlayerStatInfo[playerid][2] = "Guardaespaldas";
			case 12:    PlayerStatInfo[playerid][2] = "Detective Privado";
			default:    PlayerStatInfo[playerid][2] = "No";
		}
		
		new Faction_Player;
		if(PlayerInfo[playerid][pMember] > PlayerInfo[playerid][pLeader])	Faction_Player = PlayerInfo[playerid][pMember];
		else																Faction_Player = PlayerInfo[playerid][pLeader];

		switch(Faction_Player){
			case 1:     PlayerStatInfo[playerid][3] = "Policía Local";
			case 2:     PlayerStatInfo[playerid][3] = "Piratas Del Asfalto";
			case 3:     PlayerStatInfo[playerid][3] = "Guardia Nacional";
			case 5:     PlayerStatInfo[playerid][3] = "Ballas";
			case 4:     PlayerStatInfo[playerid][3] = "LSMC";
			case 7:     PlayerStatInfo[playerid][3] = "Mecánicos";
			case 8:     PlayerStatInfo[playerid][3] = "Moteros";
			case 9:     PlayerStatInfo[playerid][3] = "Groove Street";
			case 10:    PlayerStatInfo[playerid][3] = "La Hermandad";
			case 11:    PlayerStatInfo[playerid][3] = "Latin Kings";
			case 12:    PlayerStatInfo[playerid][3] = "La Cosa Nostra";
			case 13:    PlayerStatInfo[playerid][3] = "Yakuza";
			case 14:    PlayerStatInfo[playerid][3] = "Família Karsakova";
			case 16:    PlayerStatInfo[playerid][3] = "Gobierno";
			case 17:    PlayerStatInfo[playerid][3] = "Radio-Television";
			case 19:    PlayerStatInfo[playerid][3] = "Traficantes";
			case 23:    PlayerStatInfo[playerid][3] = "Hitman";
			case 24:    PlayerStatInfo[playerid][3] = "FBI";
			case 25:    PlayerStatInfo[playerid][3] = "Corte Judicial";
			default:    PlayerStatInfo[playerid][3] = "No";
		}
		
		if(Team_LSPD(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Cadete";
				case 2:     PlayerStatInfo[playerid][4] = "Oficial";
				case 3:     PlayerStatInfo[playerid][4] = "Investigador";
				case 4:     PlayerStatInfo[playerid][4] = "Sargento";
				case 5:     PlayerStatInfo[playerid][4] = "Teniente";
				case 6:     PlayerStatInfo[playerid][4] = "Capitán";
				case 7:     PlayerStatInfo[playerid][4] = "Inspector";
				case 8:     PlayerStatInfo[playerid][4] = "Comandante";
				default:    PlayerStatInfo[playerid][4] = "Cadete";
			}
		}
		else if(Piratas4x4(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Aprendiz";
				case 2:     PlayerStatInfo[playerid][4] = "Pirata 4x4";
				case 3:     PlayerStatInfo[playerid][4] = "Experimentado";
				case 4:     PlayerStatInfo[playerid][4] = "Especial";
				case 5:     PlayerStatInfo[playerid][4] = "Cabecilla";
				case 6:     PlayerStatInfo[playerid][4] = "El Kapo";
				default:    PlayerStatInfo[playerid][4] = "Aprendiz";
			}
		}
		else if(Team_NG(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Cabo";
				case 2:     PlayerStatInfo[playerid][4] = "Soldado";
				case 3:     PlayerStatInfo[playerid][4] = "Trooper";
				case 4:     PlayerStatInfo[playerid][4] = "Sargento";
				case 5:     PlayerStatInfo[playerid][4] = "Teniente";
				case 6:     PlayerStatInfo[playerid][4] = "Capitán";
				case 7:     PlayerStatInfo[playerid][4] = "Mayor";
				case 8:     PlayerStatInfo[playerid][4] = "Coronel";
				default:    PlayerStatInfo[playerid][4] = "Cabo";
			}
		}
		else if(Team_SAMUR(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Práctico";
				case 2:     PlayerStatInfo[playerid][4] = "Paramédico";
				case 3:     PlayerStatInfo[playerid][4] = "Médico";
				case 4:     PlayerStatInfo[playerid][4] = "Supervisor";
				case 5:     PlayerStatInfo[playerid][4] = "Responsable Técnico";
				case 6:     PlayerStatInfo[playerid][4] = "Director";
				default:    PlayerStatInfo[playerid][4] = "Práctico";
			}
		}
		else if(Team_Mecanicos(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Ayudante";
				case 2:     PlayerStatInfo[playerid][4] = "Trucker";
				case 3:     PlayerStatInfo[playerid][4] = "Mecánico";
				case 4:     PlayerStatInfo[playerid][4] = "Ingeniero";
				case 5:     PlayerStatInfo[playerid][4] = "Supervisor";
				case 6:     PlayerStatInfo[playerid][4] = "Director";
				default:    PlayerStatInfo[playerid][4] = "Ayudante";
			}
		}
		else if(Moteros(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Iniciado";
				case 2:     PlayerStatInfo[playerid][4] = "Asociado";
				case 3:     PlayerStatInfo[playerid][4] = "Satanico";
				case 4:     PlayerStatInfo[playerid][4] = "Consejero";
				case 5:     PlayerStatInfo[playerid][4] = "Mano Derecha";
				case 6:     PlayerStatInfo[playerid][4] = "Jefe Motero";
				default:    PlayerStatInfo[playerid][4] = "Iniciado";
			}
		}
		else if(Pandilleros(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Joto";
				case 2:     PlayerStatInfo[playerid][4] = "Propagador";
				case 3:     PlayerStatInfo[playerid][4] = "Soldado";
				case 4:     PlayerStatInfo[playerid][4] = "Cabezilla";
				case 5:     PlayerStatInfo[playerid][4] = "General";
				case 6:     PlayerStatInfo[playerid][4] = "Líder";
				default:    PlayerStatInfo[playerid][4] = "Joto";
			}
		}
		else if(Mafia_Italiana(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Giovane d' Honore";
				case 2:     PlayerStatInfo[playerid][4] = "Soldati";
				case 3:     PlayerStatInfo[playerid][4] = "Capo";
				case 4:     PlayerStatInfo[playerid][4] = "Consigliere";
				case 5:     PlayerStatInfo[playerid][4] = "Sottocapo";
				case 6:     PlayerStatInfo[playerid][4] = "Don";
				case 7:     PlayerStatInfo[playerid][4] = "Capi Di Tutti Capi";
				default:    PlayerStatInfo[playerid][4] = "Giovane d' Honore";
			}
		}
		else if(Mafia_Yakuza(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Kyodai";
				case 2:     PlayerStatInfo[playerid][4] = "Wakashu";
				case 3:     PlayerStatInfo[playerid][4] = "Senpai Kohai";
				case 4:     PlayerStatInfo[playerid][4] = "Saiko Komon";
				case 5:     PlayerStatInfo[playerid][4] = "Sumiyoshi";
				case 6:     PlayerStatInfo[playerid][4] = "Oyabun";
				default:    PlayerStatInfo[playerid][4] = "Kyodai";
			}
		}
		else if(Mafia_Rusa(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Assotsiirovat";
				case 2:     PlayerStatInfo[playerid][4] = "Soldat";
				case 3:     PlayerStatInfo[playerid][4] = "Kapo";
				case 4:     PlayerStatInfo[playerid][4] = "Konsul'tant";
				case 5:     PlayerStatInfo[playerid][4] = "Zamestitel";
				case 6:     PlayerStatInfo[playerid][4] = "Don";
				case 7:     PlayerStatInfo[playerid][4] = "Líder";
				default:    PlayerStatInfo[playerid][4] = "Assotsiirovat";
			}
		}
		else if(Gobierno(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Seguridad";
				case 2:     PlayerStatInfo[playerid][4] = "Ministro";
				case 3:     PlayerStatInfo[playerid][4] = "Alcalde LS";
				case 4:     PlayerStatInfo[playerid][4] = "Vice-Presidente";
				case 5:     PlayerStatInfo[playerid][4] = "Presidente";
				default:    PlayerStatInfo[playerid][4] = "Seguridad";
			}
		}
		else if(Journalist(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Becario";
				case 2:     PlayerStatInfo[playerid][4] = "Redactor";
				case 3:     PlayerStatInfo[playerid][4] = "Periodista";
				case 4:     PlayerStatInfo[playerid][4] = "Enviado Especial";
				case 5:     PlayerStatInfo[playerid][4] = "Presentador";
				case 6:     PlayerStatInfo[playerid][4] = "Diretor CNN";
				default:    PlayerStatInfo[playerid][4] = "Becario";
			}
		}
		else if(IsANarco(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Guardia";
				case 2:     PlayerStatInfo[playerid][4] = "Cosechador";
				case 3:     PlayerStatInfo[playerid][4] = "Contrabandista";
				case 4:     PlayerStatInfo[playerid][4] = "Traficante";
				case 5:     PlayerStatInfo[playerid][4] = "Mano derecha";
				case 6:     PlayerStatInfo[playerid][4] = "Jefazo";
				default:    PlayerStatInfo[playerid][4] = "Guardia";
			}
		}
		else if(Ballas_pand(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Joto";
				case 2:     PlayerStatInfo[playerid][4] = "Propagador";
				case 3:     PlayerStatInfo[playerid][4] = "Soldado";
				case 4:     PlayerStatInfo[playerid][4] = "Cabezilla";
				case 5:     PlayerStatInfo[playerid][4] = "General";
				case 6:     PlayerStatInfo[playerid][4] = "Líder";
				default:    PlayerStatInfo[playerid][4] = "Joto";
			}
		}

		else if(Hitman(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Novato";
				case 2:     PlayerStatInfo[playerid][4] = "Asesino";
				case 3:     PlayerStatInfo[playerid][4] = "Sicario";
				case 4:     PlayerStatInfo[playerid][4] = "Agente Especial";
				case 5:     PlayerStatInfo[playerid][4] = "Vice-Director";
				case 6:     PlayerStatInfo[playerid][4] = "Director";
				default:    PlayerStatInfo[playerid][4] = "Novato";
			}
		}
		else if(Team_FBI(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 1:     PlayerStatInfo[playerid][4] = "Agente";
				case 2:     PlayerStatInfo[playerid][4] = "S. Agente";
				case 3:     PlayerStatInfo[playerid][4] = "Especial";
				case 4:     PlayerStatInfo[playerid][4] = "Criminalista";
				case 5:     PlayerStatInfo[playerid][4] = "Sub-Director";
				case 6:     PlayerStatInfo[playerid][4] = "Director";
				default:    PlayerStatInfo[playerid][4] = "Agente";
			}
		}
		else if(Team_CorteJudicial(playerid))
		{
			switch(PlayerInfo[playerid][pRank]){
				case 2:     PlayerStatInfo[playerid][4] = "Abogado";
				case 5:     PlayerStatInfo[playerid][4] = "Fiscal";
				case 6:     PlayerStatInfo[playerid][4] = "Juez";
				default:    PlayerStatInfo[playerid][4] = "Juez Supremo";
			}
		}
		else	PlayerStatInfo[playerid][4] = "No";
	}
}

function ShowStats(playerid,targetid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid);			new account = PlayerInfo[targetid][pAccount];
		new carkey = PlayerInfo[targetid][pPcarkey];	new carkey2 = PlayerInfo[targetid][pPcarkey2];
		new CarPremium = PlayerInfo[targetid][pCarPremium]; new CarPremium2 = PlayerInfo[targetid][pCarPremium2];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;	new expamount = nxtlevel*levelexp;
		ClearChatbox(playerid, 10);
		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring),"| Tus Stats : %s",PlayerName(targetid));
		Message(playerid, 0x009BE6FF,coordsstring);
		format(coordsstring, sizeof(coordsstring),"| Edad[%d]  Nivel[%d]  Sexo[%s]  Capital[%d$]  Teléfono[%d]  Seguro[%s]  Adver[%d]", PlayerInfo[targetid][pAge],PlayerInfo[targetid][pLevel],PlayerStatInfo[targetid][0],cash+account,PlayerInfo[targetid][pPnumber], PlayerStatInfo[targetid][7], PlayerInfo[targetid][pAdvertencias]);
		Message(playerid, COLOR_GRAD3,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Proximo Nivel: %d (%d/%d)  Facción[%s]  Rango[%s]  Trabajo[%s]", nxtlevel,PlayerInfo[targetid][pExp],expamount,PlayerStatInfo[targetid][3],PlayerStatInfo[targetid][4],PlayerStatInfo[targetid][2]);
		Message(playerid, COLOR_GRAD3,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Horas Jugadas[%d]  Muertes[%d]  Arrestos[%d]  Frags[%d] Casado[%s]  {23F7FA}Premium{FFFFFF}[%s]",PlayerInfo[targetid][pConnectTime],PlayerInfo[targetid][pDeaths],PlayerInfo[targetid][pArrested],PlayerInfo[targetid][pKills], PlayerStatInfo[targetid][6], PlayerStatInfo[targetid][5]);
		Message(playerid, COLOR_GRAD3,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Casa[%d]  Coche1[%d]  Coche2[%d]  Negocio[%d]  Coche Renta[%d]  Casa Renta[%d]",PlayerInfo[targetid][pPhousekey], PlayerInfo[targetid][pPcarkey], PlayerInfo[targetid][pPcarkey2], PlayerInfo[targetid][pPbizzkey], HireKey[targetid], PlayerInfo[targetid][pRent]);
		Message(playerid, COLOR_GRAD3,coordsstring);
		if(PlayerInfo[targetid][pPcarkey] != 9999)
		{
			format(coordsstring, sizeof(coordsstring), "| Vehículo1: %s  Valor: %d$  Colores:%d/%d  Locked:%d", CarInfo[carkey][cName], CarInfo[carkey][cValue], CarInfo[carkey][cColorOne], CarInfo[carkey][cColorTwo], CarInfo[carkey][cLock]);
			Message(playerid, COLOR_GRAD3,coordsstring);
		}
		if(PlayerInfo[targetid][pPcarkey2] != 9999)
		{
			format(coordsstring, sizeof(coordsstring), "| Vehículo2: %s  Valor: %d$  Colores:%d/%d  Locked:%d", CarInfo[carkey2][cName], CarInfo[carkey2][cValue], CarInfo[carkey2][cColorOne], CarInfo[carkey2][cColorTwo], CarInfo[carkey2][cLock], CarInfo[carkey2][cLock]);
			Message(playerid, COLOR_GRAD3,coordsstring);
		}
		if(PlayerInfo[targetid][pCarPremium] != 9999)
		{
			format(coordsstring, sizeof(coordsstring), "| Vehículo Premium: %s  Valor: %d$  Colores:%d/%d  Locked:%d  Llave:%d", CarInfo[CarPremium][cName], CarInfo[CarPremium][cValue], CarInfo[CarPremium][cColorOne], CarInfo[CarPremium][cColorTwo], CarInfo[CarPremium][cLock], CarPremium);
			Message(playerid, COLOR_GRAD3,coordsstring);
		}
		if(PlayerInfo[targetid][pCarPremium2] != 9999)
		{
			format(coordsstring, sizeof(coordsstring), "| Vehículo Premium2: %s  Valor: %d$  Colores:%d/%d  Locked:%d  Llave:%d", CarInfo[CarPremium2][cName], CarInfo[CarPremium2][cValue], CarInfo[CarPremium2][cColorOne], CarInfo[CarPremium2][cColorTwo], CarInfo[CarPremium2][cLock], CarPremium2);
			Message(playerid, COLOR_GRAD3,coordsstring);
		}
	}
}

public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerColor(playerid,TEAM_HIT_COLOR);
	}
}

public OnGameModeExit()
{
	new year, month,day;	getdate(year, month,day);
	printf("Gamemode HermandadZero Finalizado. [%d/%d/%d]", day,month,year);
	return 1;
}

public GameModeExitFunc()
{
	PayDay_GameModeExitFunc();
	Pinchos_OnGameModeExit();
	KillTimer(unjailtimer);
	KillTimer(camtimer);
	KillTimer(othtimer);
	KillTimer(accountstimer);
	KillTimer(globaltimer);
	KillTimer(timevehtimer);
	KillTimer(timehousetimer);
	KillTimer(checkgastimer);
	KillTimer(disease);
	KillTimer(LifeTimer);
	KillTimer(KeysTimer);
	KillTimer(jetpackTimer);
	GameModeExit();
}

public LoadProperty()
{
	new arrCoords[26][64];
	new strFromFile2[256];
	new File: file = fopen("property.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hOwned] = strval(arrCoords[0]);
			strmid(HouseInfo[idx][hOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[2]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[3]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[5]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[6]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[7]);
			HouseInfo[idx][hInt] = strval(arrCoords[8]);
			HouseInfo[idx][hLevel] = strval(arrCoords[9]);
			HouseInfo[idx][hValue] = strval(arrCoords[10]);
			HouseInfo[idx][hLock] = strval(arrCoords[11]);
			HouseInfo[idx][hRooms] = strval(arrCoords[12]);
			HouseInfo[idx][hRent] = strval(arrCoords[13]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[14]);
			HouseInfo[idx][hWep] = strval(arrCoords[15]);
			HouseInfo[idx][hAmmo] = strval(arrCoords[16]);
			HouseInfo[idx][hMats] = strval(arrCoords[17]);
			HouseInfo[idx][hDrugs] = strval(arrCoords[18]);
			HouseInfo[idx][hSpeed] = strval(arrCoords[19]);
			HouseInfo[idx][hEctasy] = strval(arrCoords[20]);
			HouseInfo[idx][hRitalin] = strval(arrCoords[21]);
			HouseInfo[idx][hHeroina] = strval(arrCoords[22]);
			HouseInfo[idx][hMarihuana] = strval(arrCoords[23]);
			HouseInfo[idx][hWorld] = strval(arrCoords[24]);
			HouseInfo[idx][hTime] = strval(arrCoords[25]);
			idx++;
		}
		printf("Gamemode: Loaded %d houses succesfully.",idx);
		fclose(file);
	}
	return 1;
}

/*public OnPlayerUpdate(playerid){
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK){
    	if(JetPack[playerid] == 0){
    		ClearAnimations(playerid);
		}else{
			return 1;
		}
	}
}*/

public OnGameModeInit()
{
    skinlist = LoadModelSelectionMenu("skins.txt"); //skins del binco
    if(!fexist("armario.ini")) dini_Create("armario.ini");

    ActualizarArchivos();
    AntiDeAMX();
    RequestNPCJoin();
    
    for(new c=0;c<VEH;c++)
    {
    	if(!IsAnOwnableCar(c)) Gas[c] = GasMax;
    	else
    	{
    		if(CarInfo[c][cGas] == 0) Gas[c] = 50;
    		else if(CarInfo[c][cGas] == 1) Gas[c] = 60;
    		else if(CarInfo[c][cGas] == 2) Gas[c] = 70;
    		else if(CarInfo[c][cGas] == 3) Gas[c] = 80;
    	}
    }
	UsePlayerPedAnims(); // CJ Anims
	LoadCar();
	LoadTrunk();
	
	LoadProperty();
	INI_Load("robs.ini");
	INI_Load("stuff.ini");
	INI_Load("fondos.ini");
	INI_Load("hq_locks.ini");
	SetGameModeText("RolePlay Español - RPG");
	SendRconCommand("mapname LS-Versión 3.0 ");
	SendRconCommand("hostname |Ø| Hermandad Zero RolePlay |Ø| WIP |Ø|");
	SendRconCommand("language Español");
	SendRconCommand("rcon_password estaeslaclave");
	KillTimer(BankTimer);
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}

	SetPDistance(10);
	AllowInteriorWeapons(1);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	OnGlobalPropTextdrawUpdate();
	OnGlobalBizzTextdrawUpdate();
	TextDrawCreate(0.0, 0.0, " ");

	Negocios_OnGameModeInit();
	Pinchos_OnGameModeInit();
	PayDay_OnGameModeInit(); //Sistema de PayDay
	Mapeados_OnGameModeInit(); //Create objects y dynamicObjects
	Pickups_OnGameModeInit(); //Pickups
	Labels_OnGameModeInit(); //3DLabels e IconMaps
	Mapas_OnGameModeInit(); //Mapas por LS
	cargarVehiculos(); //Cargar vehiculos y asignar arrays de estos

	// ==================      TextDrawX       ================ //
	Version = TextDrawCreate(496.000000, 5.000000, "~r~HermandadZero ~w~RP");
	TextDrawBackgroundColor(Version, 255);
	TextDrawFont(Version, 2);
	TextDrawLetterSize(Version, 0.329999, 1.500000);
	TextDrawColor(Version, -16776961);
	TextDrawSetOutline(Version, 0);
	TextDrawSetProportional(Version, 1);
	TextDrawSetShadow(Version, 1);

		Film_1 = TextDrawCreate(642.000000,1.000000,"_");//abajo
		TextDrawUseBox(Film_1,1);
		TextDrawBoxColor(Film_1,0x000000ff);
		TextDrawTextSize(Film_1,-61.000000,7.000000);
		TextDrawBackgroundColor(Film_1,0x000000ff);
		TextDrawFont(Film_1,3);
		TextDrawLetterSize(Film_1,0.700000,10.700009);
		TextDrawColor(Film_1,0xffffffff);
		TextDrawSetOutline(Film_1,1);
		TextDrawSetProportional(Film_1,1);
		TextDrawSetShadow(Film_1,1);

		ktm = TextDrawCreate(549.000000, 27.000000, "Version 0.1");
		TextDrawBackgroundColor(ktm, 255);
		TextDrawFont(ktm, 2);
		TextDrawLetterSize(ktm, 0.200000, 1.000000);
		TextDrawColor(ktm, -1);
		TextDrawSetOutline(ktm, 0);
		TextDrawSetProportional(ktm, 1);
		TextDrawSetShadow(ktm, 1);

 Film_2 = TextDrawCreate(642.000000,341.000000,"_");//arriba
 TextDrawUseBox(Film_2,1);
 TextDrawBoxColor(Film_2,0x000000ff);
 TextDrawTextSize(Film_2,-36.000000,2.000000);
 TextDrawBackgroundColor(Film_2,0x000000ff);
 TextDrawFont(Film_2,3);
 TextDrawLetterSize(Film_2,1.300000,18.500022);
 TextDrawColor(Film_2,0xffffffff);
 TextDrawSetOutline(Film_2,1);
 TextDrawSetProportional(Film_2,1);
 TextDrawSetShadow(Film_2,1);

 arl = TextDrawCreate(178.000000, 1.000000, "~r~HermandadZero ~w~RP");
 TextDrawBackgroundColor(arl, 255);
 TextDrawFont(arl, 2);
 TextDrawLetterSize(arl, 0.800000, 8.000000);
 TextDrawColor(arl, -1);
 TextDrawSetOutline(arl, 0);
 TextDrawSetProportional(arl, 1);
 TextDrawSetShadow(arl, 0);

 btt = TextDrawCreate(249.000000, 70.000000, "Version 0.1");
 TextDrawBackgroundColor(btt, 255);
 TextDrawFont(btt, 2);
 TextDrawLetterSize(btt, 0.500000, 1.000000);
 TextDrawColor(btt, -1);
 TextDrawSetOutline(btt, 0);
 TextDrawSetProportional(btt, 1);
 TextDrawSetShadow(btt, 1);

 ttr = TextDrawCreate(284.000000, 80.000000, "~r~HZ~w~:RP");
 TextDrawBackgroundColor(ttr, 255);
 TextDrawFont(ttr, 2);
 TextDrawLetterSize(ttr, 0.500000, 1.000000);
 TextDrawColor(ttr, -1);
 TextDrawSetOutline(ttr, 0);
 TextDrawSetProportional(ttr, 1);
 TextDrawSetShadow(ttr, 1);

 Textdraw0 = TextDrawCreate(10.000000, 349.000000, "~r~Creditos");
 TextDrawBackgroundColor(Textdraw0, 255);
 TextDrawFont(Textdraw0, 2);
 TextDrawLetterSize(Textdraw0, 0.300000, 1.399999);
 TextDrawColor(Textdraw0, -1);
 TextDrawSetOutline(Textdraw0, 0);
 TextDrawSetProportional(Textdraw0, 1);
 TextDrawSetShadow(Textdraw0, 1);

 Textdraw1 = TextDrawCreate(10.000000, 369.000000, "Chicle");
 TextDrawBackgroundColor(Textdraw1, 255);
 TextDrawFont(Textdraw1, 2);
 TextDrawLetterSize(Textdraw1, 0.300000, 1.399999);
 TextDrawColor(Textdraw1, -1);
 TextDrawSetOutline(Textdraw1, 0);
 TextDrawSetProportional(Textdraw1, 1);
 TextDrawSetShadow(Textdraw1, 1);

 Textdraw2 = TextDrawCreate(10.000000, 379.000000, "Chicle");
 TextDrawBackgroundColor(Textdraw2, 255);
 TextDrawFont(Textdraw2, 2);
 TextDrawLetterSize(Textdraw2, 0.300000, 1.399999);
 TextDrawColor(Textdraw2, -1);
 TextDrawSetOutline(Textdraw2, 0);
 TextDrawSetProportional(Textdraw2, 1);
 TextDrawSetShadow(Textdraw2, 1);

 Textdraw3 = TextDrawCreate(10.000000, 389.000000, "Chicle");
 TextDrawBackgroundColor(Textdraw3, 255);
 TextDrawFont(Textdraw3, 2);
 TextDrawLetterSize(Textdraw3, 0.300000, 1.399999);
 TextDrawColor(Textdraw3, -1);
 TextDrawSetOutline(Textdraw3, 0);
 TextDrawSetProportional(Textdraw3, 1);
 TextDrawSetShadow(Textdraw3, 1);

 Textdraw4 = TextDrawCreate(10.000000, 399.000000, "Chicle");
 TextDrawBackgroundColor(Textdraw4, 255);
 TextDrawFont(Textdraw4, 2);
 TextDrawLetterSize(Textdraw4, 0.300000, 1.399999);
 TextDrawColor(Textdraw4, -1);
 TextDrawSetOutline(Textdraw4, 0);
 TextDrawSetProportional(Textdraw4, 1);
 TextDrawSetShadow(Textdraw4, 1);

 Textdraw5 = TextDrawCreate(10.000000, 409.000000, "Y gente sin importancia");
 TextDrawBackgroundColor(Textdraw5, 255);
 TextDrawFont(Textdraw5, 2);
 TextDrawLetterSize(Textdraw5, 0.300000, 1.399999);
 TextDrawColor(Textdraw5, -1);
 TextDrawSetOutline(Textdraw5, 0);
 TextDrawSetProportional(Textdraw5, 1);
 TextDrawSetShadow(Textdraw5, 1);

 Textdraw6 = TextDrawCreate(190.000000, 349.000000, "~r~TeamSpeak3~w~ : ts3.hermandadzero.com");
 TextDrawBackgroundColor(Textdraw6, 255);
 TextDrawFont(Textdraw6, 2);
 TextDrawLetterSize(Textdraw6, 0.500000, 2.400000);
 TextDrawColor(Textdraw6, -1);
 TextDrawSetOutline(Textdraw6, 0);
 TextDrawSetProportional(Textdraw6, 1);
 TextDrawSetShadow(Textdraw6, 1);

 Textdraw7 = TextDrawCreate(190.000000, 399.000000, "~r~Web~w~ : www.hermandadzero.com");
 TextDrawBackgroundColor(Textdraw7, 255);
 TextDrawFont(Textdraw7, 2);
 TextDrawLetterSize(Textdraw7, 0.500000, 2.400000);
 TextDrawColor(Textdraw7, -1);
 TextDrawSetOutline(Textdraw7, 0);
 TextDrawSetProportional(Textdraw7, 1);
 TextDrawSetShadow(Textdraw7, 1);
 
 Textdraw8 = TextDrawCreate(30.000000, 426.000000, "Www.HermandadZero.Com");
 TextDrawBackgroundColor(Textdraw8, 255);
 TextDrawFont(Textdraw8, 3);
 TextDrawLetterSize(Textdraw8, 0.310000, 1.000000);
 TextDrawColor(Textdraw8, 255);
 TextDrawSetOutline(Textdraw8, 1);
 TextDrawSetProportional(Textdraw8, 1);
 TextDrawSetSelectable(Textdraw8, 0);

 Textdraw9 = TextDrawCreate(31.000000, 427.000000, "Www.HermandadZero.Com");
 TextDrawBackgroundColor(Textdraw9, 255);
 TextDrawFont(Textdraw9, 3);
 TextDrawLetterSize(Textdraw9, 0.310000, 1.000000);
 TextDrawColor(Textdraw9, -1);
 TextDrawSetOutline(Textdraw9, 1);
 TextDrawSetProportional(Textdraw9, 1);
 TextDrawSetSelectable(Textdraw9, 0);
 
 htt = TextDrawCreate(160.000000, 8.000000, "-");
 TextDrawBackgroundColor(htt, 255);
 TextDrawFont(htt, 3);
 TextDrawLetterSize(htt, 5.299997, 64.000000);
 TextDrawColor(htt, 255);
 TextDrawSetOutline(htt, 0);
 TextDrawSetProportional(htt, 1);
 TextDrawSetShadow(htt, 1);

 ptt = TextDrawCreate(213.000000, 8.000000, "-");
 TextDrawBackgroundColor(ptt, 255);
 TextDrawFont(ptt, 3);
 TextDrawLetterSize(ptt, 5.299997, 64.000000);
 TextDrawColor(ptt, 255);
 TextDrawSetOutline(ptt, 0);
 TextDrawSetProportional(ptt, 1);
 TextDrawSetShadow(ptt, 1);

 bnn = TextDrawCreate(267.000000, 8.000000, "-");
 TextDrawBackgroundColor(bnn, 255);
 TextDrawFont(bnn, 3);
 TextDrawLetterSize(bnn, 5.299997, 64.000000);
 TextDrawColor(bnn, 255);
 TextDrawSetOutline(bnn, 0);
 TextDrawSetProportional(bnn, 1);
 TextDrawSetShadow(bnn, 1);
 
 for(new playerid; playerid < MAX_PLAYERS; playerid++)
 {
 	BalanceTextDraw[playerid] = TextDrawCreate(498.500000,100.000000,"$00000000");
 	TextDrawLetterSize(BalanceTextDraw[playerid], 0.55, 2.2);
 	TextDrawFont(BalanceTextDraw[playerid], 3);
 	TextDrawSetOutline(BalanceTextDraw[playerid], 2);
 	TextDrawSetProportional(BalanceTextDraw[playerid], 3);
 	BankTimer = SetTimer("BancoTextDraw", 2000, 1);
 }

 mnn = TextDrawCreate(317.000000, 8.000000, "-");
 TextDrawBackgroundColor(mnn, 255);
 TextDrawFont(mnn, 3);
 TextDrawLetterSize(mnn, 5.299997, 64.000000);
 TextDrawColor(mnn, 255);
 TextDrawSetOutline(mnn, 0);
 TextDrawSetProportional(mnn, 1);
 TextDrawSetShadow(mnn, 1);

 ccc = TextDrawCreate(371.000000, 8.000000, "-");
 TextDrawBackgroundColor(ccc, 255);
 TextDrawFont(ccc, 3);
 TextDrawLetterSize(ccc, 5.299997, 64.000000);
 TextDrawColor(ccc, 255);
 TextDrawSetOutline(ccc, 0);
 TextDrawSetProportional(ccc, 1);
 TextDrawSetShadow(ccc, 1);

 eef = TextDrawCreate(424.000000, 8.000000, "-");
 TextDrawBackgroundColor(eef, 255);
 TextDrawFont(eef, 3);
 TextDrawLetterSize(eef, 5.299997, 64.000000);
 TextDrawColor(eef, 255);
 TextDrawSetOutline(eef, 0);
 TextDrawSetProportional(eef, 1);
 TextDrawSetShadow(eef, 1);

 SunGlasses = TextDrawCreate(0.0,0.0,"_");
 TextDrawFont(SunGlasses,1);
 TextDrawLetterSize(SunGlasses,0.0,50.0);
 TextDrawUseBox(SunGlasses,true);
 TextDrawColor(SunGlasses,0);
 
	// Textdraw camaras de seguridad
 TVCAM_Background=TextDrawCreate(0,0,"LD_DUAL:backgnd");
 TextDrawFont(TVCAM_Background,4);
 TextDrawColor(TVCAM_Background,0xFFFFFFFF);
 TextDrawTextSize(TVCAM_Background,640,480);


 TVCAM_CornerTopLeft=TextDrawCreate(0,0,"LD_DUAL:tvcorn");
 TextDrawFont(TVCAM_CornerTopLeft,4);
 TextDrawColor(TVCAM_CornerTopLeft,0xFFFFFFFF);
 TextDrawTextSize(TVCAM_CornerTopLeft,320,240);

 TVCAM_CornerTopRight=TextDrawCreate(640,0,"LD_DUAL:tvcorn");
 TextDrawFont(TVCAM_CornerTopRight,4);
 TextDrawColor(TVCAM_CornerTopRight,0xFFFFFFFF);
 TextDrawTextSize(TVCAM_CornerTopRight,-320,240);

 TVCAM_CornerBottomLeft=TextDrawCreate(0,450,"LD_DUAL:tvcorn");
 TextDrawFont(TVCAM_CornerBottomLeft,4);
 TextDrawColor(TVCAM_CornerBottomLeft,0xFFFFFFFF);
 TextDrawTextSize(TVCAM_CornerBottomLeft,320,-240);

 TVCAM_CornerBottomRight=TextDrawCreate(640,450,"LD_DUAL:tvcorn");
 TextDrawFont(TVCAM_CornerBottomRight,4);
 TextDrawColor(TVCAM_CornerBottomRight,0xFFFFFFFF);
 TextDrawTextSize(TVCAM_CornerBottomRight,-320,-250);

 TextdrawUp = TextDrawCreate(320.000000, 350.000000, "ld_beat:up");
 TextDrawBackgroundColor(TextdrawUp, 255);
 TextDrawFont(TextdrawUp, 4);
 TextDrawLetterSize(TextdrawUp, 0.500000, 1.000000);
 TextDrawColor(TextdrawUp, -1);
 TextDrawSetOutline(TextdrawUp, 0);
 TextDrawSetProportional(TextdrawUp, 1);
 TextDrawSetShadow(TextdrawUp, 1);
 TextDrawUseBox(TextdrawUp, 1);
 TextDrawBoxColor(TextdrawUp, 255);
 TextDrawTextSize(TextdrawUp, 31.000000, 31.000000);

 TextdrawDown = TextDrawCreate(320.000000, 410.000000, "ld_beat:down");
 TextDrawBackgroundColor(TextdrawDown, 255);
 TextDrawFont(TextdrawDown, 4);
 TextDrawLetterSize(TextdrawDown, 0.500000, 1.000000);
 TextDrawColor(TextdrawDown, -1);
 TextDrawSetOutline(TextdrawDown, 0);
 TextDrawSetProportional(TextdrawDown, 1);
 TextDrawSetShadow(TextdrawDown, 1);
 TextDrawUseBox(TextdrawDown, 1);
 TextDrawBoxColor(TextdrawDown, 255);
 TextDrawTextSize(TextdrawDown, 31.000000, 31.000000);

 TextdrawRight = TextDrawCreate(350.000000, 380.000000, "ld_beat:right");
 TextDrawBackgroundColor(TextdrawRight, 255);
 TextDrawFont(TextdrawRight, 4);
 TextDrawLetterSize(TextdrawRight, 0.500000, 1.000000);
 TextDrawColor(TextdrawRight, -1);
 TextDrawSetOutline(TextdrawRight, 0);
 TextDrawSetProportional(TextdrawRight, 1);
 TextDrawSetShadow(TextdrawRight, 1);
 TextDrawUseBox(TextdrawRight, 1);
 TextDrawBoxColor(TextdrawRight, 255);
 TextDrawTextSize(TextdrawRight, 31.000000, 31.000000);

 TextdrawLeft = TextDrawCreate(290.000000, 380.000000, "ld_beat:left");
 TextDrawBackgroundColor(TextdrawLeft, 255);
 TextDrawFont(TextdrawLeft, 4);
 TextDrawLetterSize(TextdrawLeft, 0.500000, 1.000000);
 TextDrawColor(TextdrawLeft, -1);
 TextDrawSetOutline(TextdrawLeft, 0);
 TextDrawSetProportional(TextdrawLeft, 1);
 TextDrawSetShadow(TextdrawLeft, 1);
 TextDrawUseBox(TextdrawLeft, 1);
 TextDrawBoxColor(TextdrawLeft, 255);
 TextDrawTextSize(TextdrawLeft, 31.000000, 31.000000);


 TextdrawFinish = TextDrawCreate(320.000000, 380.000000, "ld_beat:cross");
 TextDrawAlignment(TextdrawFinish, 2);
 TextDrawBackgroundColor(TextdrawFinish, 255);
 TextDrawFont(TextdrawFinish, 4);
 TextDrawLetterSize(TextdrawFinish, 0.500000, 1.000000);
 TextDrawColor(TextdrawFinish, -1);
 TextDrawSetOutline(TextdrawFinish, 1);
 TextDrawSetProportional(TextdrawFinish, 1);
 TextDrawUseBox(TextdrawFinish, 1);
 TextDrawBoxColor(TextdrawFinish, 255);
 TextDrawTextSize(TextdrawFinish, 31.000000, 31.000000);

 TextDrawSetSelectable(TextdrawUp,1);
 TextDrawSetSelectable(TextdrawDown,1);
 TextDrawSetSelectable(TextdrawLeft,1);
 TextDrawSetSelectable(TextdrawRight,1);
 TextDrawSetSelectable(TextdrawFinish,1);

	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	// ===================- Non-Stopable Timers
	
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	camtimer = SetTimer("CamionTimer", 1000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	accountstimer = SetTimer("SaveAccounts", 300000, 1);
	globaltimer = SetTimer("SaveGlobal", 450000, 1);
	timevehtimer = SetTimer("TimerVeh", 480000, 1);
	//timehousetimer = SetTimer("HouseTimer", 90000, false);
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
	disease = SetTimer("DiseaseSystem", 60000, 1);
	LifeTimer = SetTimer("CheckVida", 1500, 1);
	KeysTimer = SetTimer("Tiempo1",100,1);

	jetpackTimer = SetTimer("CheckJetpack", 500, 1);

	for(new i = 0; i<MAX_PLAYERS; i++)
	{
		Tutorial[i] = TextDrawCreate(310.000000, 174.000000, "~r~Titulo~w~~n~Capacidad Capacidad Capacidad Capacidad Capacidad Capacidad Capacidad");
		TextDrawAlignment(Tutorial[i], 2);
		TextDrawBackgroundColor(Tutorial[i], 255);
		TextDrawFont(Tutorial[i], 1);
		TextDrawLetterSize(Tutorial[i], 0.419999, 1.200000);
		TextDrawColor(Tutorial[i], -1);
		TextDrawSetOutline(Tutorial[i], 1);
		TextDrawSetProportional(Tutorial[i], 1);
		
		RegDraw[i] = TextDrawCreate(190.000000, 367.000000, "~n~Sexo:  ~r~Masculino          ~w~Edad: ~r~29~n~~n~~w~Origen: ~r~Argentina    ~w~Estilo: ~r~Pandilla1");
		TextDrawBackgroundColor(RegDraw[i], 255);
		TextDrawFont(RegDraw[i], 1);
		TextDrawLetterSize(RegDraw[i], 0.320000, 1.200000);
		TextDrawColor(RegDraw[i], -1);
		TextDrawSetOutline(RegDraw[i], 1);
		TextDrawSetProportional(RegDraw[i], 1);
		TextDrawUseBox(RegDraw[i], 1);
		TextDrawBoxColor(RegDraw[i], 70);
		TextDrawTextSize(RegDraw[i], 400.000000, 110.000000);

		Taximeter[i] = TextDrawCreate(209.000000, 431.000000,"  A Pagar ~g~999$ ~w~- Tarifa: ~g~7$");
		TextDrawBackgroundColor(Taximeter[i], 255);
		TextDrawFont(Taximeter[i], 2);
		TextDrawLetterSize(Taximeter[i], 0.400000, 1.000000);
		TextDrawColor(Taximeter[i], -1);
		TextDrawSetOutline(Taximeter[i], 0);
		TextDrawSetProportional(Taximeter[i], 1);
		TextDrawSetShadow(Taximeter[i], 1);
		TextDrawUseBox(Taximeter[i], 1);
		TextDrawBoxColor(Taximeter[i], 255);
		TextDrawTextSize(Taximeter[i], 457.000000, -30.000000);
	}

	RegInfo = TextDrawCreate(194.000000, 353.000000, "Informacion del personaje");
	TextDrawBackgroundColor(RegInfo, -1);
	TextDrawFont(RegInfo, 0);
	TextDrawLetterSize(RegInfo, 0.500000, 1.799999);
	TextDrawColor(RegInfo, 255);
	TextDrawSetOutline(RegInfo, 1);
	TextDrawSetProportional(RegInfo, 1);
	return 1;
}

public SaveAccounts()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))	OnPlayerUpdateTime(i);
	}
	SetTimer("CheckSuciedad", 60000, 0);
	SetTimer ("CheckDinero", 60000, 0);
	return 1;
}

function SaveGlobal()
{
	UpdateCars();
	UpdateBizz();
	UpdateHouses();
	SaveFunds();
	SaveTrunk();
	return 1;
}

function Ectasy(i)
{
	new Float:cx, Float:cy, Float:cz, string[128];	GetPlayerPos(i, cx, cy, cz);
	if(UsingEctasy[i] > 0)
	{
		UsingEctasy[i] -= 1;
		switch(UsingEctasy[i])
		{
			case 285: { format(string, sizeof(string),"%s dice: Vivo en un lugar paralelo a la realidad.", PlayerName(i));  Message(i, COLOR_FADE, string); GetPlayerPos(i, InceptionPos[i][0],InceptionPos[i][1],InceptionPos[i][2]); }
			case 280: { format(string, sizeof(string),"Voz desconocida dice: ¿ Cuánto tiempo %s, verdad ?", PlayerName(i));  Message(i, COLOR_FADE, string); }
			case 275: { Message(i, COLOR_FADE, "Voz desconocida dice: ¿ No me recuerdas, soy yo ... ?"); }
			case 270: { Message(i, COLOR_FADE, "Voz desconocida dice: ¿ No me respondes ... que mal educado ... ?"); }
			case 260: { Message(i, COLOR_FADE, "Voz desconocida dice: Veo, que ... has crecido ..."); }
			case 250: { Message(i, COLOR_FADE, "Voz desconocida dice: Has aceptado pactar, conmigo. Verdad?"); }
			case 240: { Message(i, COLOR_FADE, "Voz desconocida dice: Estás en lo cierto pero ... pactar conmigo tiene sus inconvenientes"); }
			case 230: { Message(i, COLOR_FADE, "Voz desconocida dice: Pero ... veo que tu los has aceptado."); }
			case 220: { Message(i, COLOR_FADE, "Voz desconocida dice: ¿ No te gusta tu realidad, verdad ?"); }
			case 210: { Message(i, COLOR_FADE, "Voz desconocida dice: Yo te ofrezco una, pero producto de tu imaginación."); }
			case 200: { Message(i, COLOR_FADE, "Voz desconocida dice: ¿ Aceptas ?"); }
			case 195: { SetPlayerWeather(i, 250); }
			case 190: { Message(i, COLOR_FADE, "Voz desconocida dice: Es normal tu miedo... lo tomaré como un Sí!"); }
			case 180: { Message(i, COLOR_FADE, "Voz desconocida dice: Muahahaha! Intenta salir del laberinto de tu subconciente amigo."); }
			case 170: { Message(i, COLOR_FADE, "Voz suave dice: No! No camines! No intentes salir de aquí! No podrás!"); }
			case 160: { Message(i, COLOR_FADE, "Voz suave dice: Solo puedes salir si consigues devolverme a la vida!"); }
			case 150: { Message(i, COLOR_FADE, "Voz suave dice: Para eso, necesitas mi alma! Encuentrala, porfavor!"); }
			case 140: { Message(i, COLOR_FADE, "Voz suave dice: Guíate por tu intuición, piensa en lo real!"); }
			case 130: { Message(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha! Nunca saldrás de aqui!"); }
			case 125: { SetPlayerWeather(i, 19); }
			case 110: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha!");}
			case 108: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha!");}
			case 106: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Muahahahaahahahaaha!");}
			case 104: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha!");}
			case 102: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Atrapado en tu realidad ficticia!");}
			case 100: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Moriraas!");}
			case 96: { SetPlayerPos(i, cx+100, cy+50, cz+3); }
			case 95: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Hhaahhahaa!"); SetPlayerPos(i, cx+100, cy+50, cz+3);}
			case 94: { SetPlayerPos(i, cx+100, cy+50, cz+3); Message(i, COLOR_FADE, "Voz desconocida dice: Hasta nunca ... !"); SetPlayerPos(i, cx+100, cy+50, cz+3);}
			case 93: { SetPlayerWeather(i, 2009); SetPlayerPos(i, cx+100, cy+50, cz+3); }
			case 92: { SetPlayerPos(i, cx+100, cy+50, cz+3); }
			case 60: { format(string, sizeof(string),"%s dice: He de volver a la realidad, ahora!", PlayerName(i));  Message(i, COLOR_FADE, string); }
			case 10: { format(string, sizeof(string),"%s dice: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhh!", PlayerName(i));  Message(i, COLOR_FADE, string); }
			case 9: { SetPlayerWeather(i, 150); }
		}
	}
	if(UsingEctasy[i] == 0 && EctasyEffect[i] == 1 && UsingDrugs[i] == 1)
	{
		KillTimer(DrugTimer[i]),
		GText(i, "~w~Efecto ~y~extasis ~n~~w~pasado", 5000, 1);
		UsingDrugs[i] = 0;
		SetPlayerWeather(i, DefaultWeather);
		UsingEctasy[i] = 0;
		EctasyEffect[i] = 0
		SetPlayerPos(i, InceptionPos[i][0],InceptionPos[i][1],InceptionPos[i][2]);
		SetPlayerVirtualWorld(i, 0);
	}
	return 1;
}

function SpeedEffectEnd(playerid)
{
	SetPlayerStats(playerid);
	GText(playerid, "~w~Efecto ~p~speed ~n~~w~pasado", 5000, 1);
	UsingDrugs[playerid] = 0;
	KillTimer(DrugTimer[playerid]);
	return 1;
}

function GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

strtok(const string[], &index) 
{ 
	new length = strlen(string); 
	while ((index < length) && (string[index] <= ' ')) 
	{ 
		index++; 
	} 

	new offset = index; 
	new result[20]; 
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1))) 
	{ 
		result[index - offset] = string[index]; 
		index++; 
	} 
	result[index - offset] = EOS; 
	return result; 
} 

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
		new PlayerFile[64], playername3[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		format(PlayerFile, sizeof(PlayerFile), "users/%s.ini", playername3);
		new
		INI:PlayerAcc = INI_Open( PlayerFile );
		strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 24);
		INI_WriteString(PlayerAcc, "Key", PlayerInfo[playerid][pKey]);
		INI_Close(PlayerAcc);
	}
	return 1;
}

public OnPlayerUpdateTime(playerid)
{
	if(gPlayerLogged[playerid] == 1)
	{
		new string[128], string3[64], playername3[MAX_PLAYER_NAME];

		GetPlayerName(playerid, playername3, sizeof(playername3));

		format(string3, sizeof(string3), "users/%s.ini", playername3);

		new INI:PlayerAcc = INI_Open( string3 );

		INI_WriteString( PlayerAcc, "Key", 			PlayerInfo[playerid][pKey]);
		INI_WriteInt( PlayerAcc, "Level", 			PlayerInfo[playerid][pLevel]);
		INI_WriteInt( PlayerAcc, "Contrato", 			PlayerInfo[playerid][pContract]);
		INI_WriteInt( PlayerAcc, "AdminCP",       	PlayerInfo[playerid][pAdminCP]);
		INI_WriteInt( PlayerAcc, "Facciones",       PlayerInfo[playerid][pFacciones]);
		INI_WriteInt( PlayerAcc, "Helper",      	PlayerInfo[playerid][pHelper]);
		INI_WriteInt( PlayerAcc, "ConnectedTime",   PlayerInfo[playerid][pConnectTime]);
		INI_WriteInt( PlayerAcc, "Registered",      PlayerInfo[playerid][pReg]);
		INI_WriteInt( PlayerAcc, "Sex",             PlayerInfo[playerid][pSex]);
		INI_WriteInt( PlayerAcc, "Age",             PlayerInfo[playerid][pAge]);
		INI_WriteInt( PlayerAcc, "Origin",          PlayerInfo[playerid][pOrigin]);
		INI_WriteInt( PlayerAcc, "Walk",            PlayerInfo[playerid][pWalk]);
		INI_WriteInt( PlayerAcc, "Respect",         PlayerInfo[playerid][pExp]);
		INI_WriteInt( PlayerAcc, "Money",           GetPlayerMoney(playerid));
		INI_WriteInt( PlayerAcc, "Bank",            PlayerInfo[playerid][pAccount]);
		INI_WriteInt( PlayerAcc, "Cheques",         PlayerInfo[playerid][pCheques]);
		INI_WriteInt( PlayerAcc, "Kills",           PlayerInfo[playerid][pKills]);
		INI_WriteInt( PlayerAcc, "Deaths",          PlayerInfo[playerid][pDeaths]);
		INI_WriteInt( PlayerAcc, "Arrested",        PlayerInfo[playerid][pArrested]);
		INI_WriteInt( PlayerAcc, "LottoNr",         PlayerInfo[playerid][pLottoNr]);
		INI_WriteInt( PlayerAcc, "Job",             PlayerInfo[playerid][pJob]);
		INI_WriteInt( PlayerAcc, "Jailed",          PlayerInfo[playerid][pJailed]);
		INI_WriteInt( PlayerAcc, "JailTime",        PlayerInfo[playerid][pJailTime]);
		INI_WriteInt( PlayerAcc, "Materiales",      PlayerInfo[playerid][pMats]);
		INI_WriteInt( PlayerAcc, "Drogas",          PlayerInfo[playerid][pDrugs]);
		INI_WriteInt( PlayerAcc, "Speed",           PlayerInfo[playerid][pSpeed]);
		INI_WriteInt( PlayerAcc, "Ectasy",          PlayerInfo[playerid][pEctasy]);
		INI_WriteInt( PlayerAcc, "Ritalin",         PlayerInfo[playerid][pRitalin]);
		INI_WriteInt( PlayerAcc, "Heroina",         PlayerInfo[playerid][pHeroina]);
		INI_WriteInt( PlayerAcc, "Marihuana",       PlayerInfo[playerid][pMarihuana]);
		INI_WriteInt( PlayerAcc, "Leader",          PlayerInfo[playerid][pLeader]);
		INI_WriteInt( PlayerAcc, "Member",          PlayerInfo[playerid][pMember]);
		INI_WriteInt( PlayerAcc, "Rank",            PlayerInfo[playerid][pRank]);
		INI_WriteInt( PlayerAcc, "Char",            PlayerInfo[playerid][pChar]);
		GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
		INI_WriteFloat( PlayerAcc, "Health",		PlayerInfo[playerid][pHealth]);
		GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
		INI_WriteFloat( PlayerAcc, "Armour",		PlayerInfo[playerid][pArmour]);
		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		INI_WriteInt( PlayerAcc, "Int",             PlayerInfo[playerid][pInt]);
		PlayerInfo[playerid][pVirWorld] = GetPlayerVirtualWorld(playerid);
		INI_WriteInt( PlayerAcc, "VirWorld",        PlayerInfo[playerid][pVirWorld]);
		INI_WriteInt( PlayerAcc, "Team",            PlayerInfo[playerid][pTeam]);
		INI_WriteInt( PlayerAcc, "Model",           PlayerInfo[playerid][pModel]);
		INI_WriteInt( PlayerAcc, "PhoneNr",         PlayerInfo[playerid][pPnumber]);
		INI_WriteInt( PlayerAcc, "Minutes",         PlayerInfo[playerid][pMinutes]);
		INI_WriteInt( PlayerAcc, "MTexto",          PlayerInfo[playerid][pMTexto]);
		INI_WriteInt( PlayerAcc, "Ipod",            PlayerInfo[playerid][pIpod]);
		INI_WriteInt( PlayerAcc, "Car",             PlayerInfo[playerid][pPcarkey]);
		INI_WriteInt( PlayerAcc, "Car2",            PlayerInfo[playerid][pPcarkey2]);
		INI_WriteInt( PlayerAcc, "TimeCar",         PlayerInfo[playerid][pTimeCar]);
		INI_WriteInt( PlayerAcc, "TimeCar2",        PlayerInfo[playerid][pTimeCar2]);
		INI_WriteInt( PlayerAcc, "House",           PlayerInfo[playerid][pPhousekey]);
		INI_WriteInt( PlayerAcc, "Negocio",         PlayerInfo[playerid][pPbizzkey]);
		GetPlayerPos(playerid,PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pPos_z]);
		INI_WriteFloat( PlayerAcc, "Pos_x",         PlayerInfo[playerid][pPos_x]);
		INI_WriteFloat( PlayerAcc, "Pos_y",         PlayerInfo[playerid][pPos_y]);
		INI_WriteFloat( PlayerAcc, "Pos_z",         PlayerInfo[playerid][pPos_z]);
		INI_WriteInt( PlayerAcc, "CarLic",          PlayerInfo[playerid][pCarLic]);
		INI_WriteInt( PlayerAcc, "FlyLic",          PlayerInfo[playerid][pFlyLic]);
		INI_WriteInt( PlayerAcc, "BoatLic",         PlayerInfo[playerid][pBoatLic]);
		INI_WriteInt( PlayerAcc, "GunLic",          PlayerInfo[playerid][pGunLic]);
		INI_WriteInt( PlayerAcc, "Gafas",           PlayerInfo[playerid][pGafas]);
		INI_WriteInt( PlayerAcc, "Tutorial",        PlayerInfo[playerid][pTut]);
		INI_WriteString( PlayerAcc, "Antecedente1",	PlayerInfo[playerid][pAntecedente1]);
		INI_WriteString( PlayerAcc, "Antecedente2",	PlayerInfo[playerid][pAntecedente2]);
		INI_WriteString( PlayerAcc, "Antecedente3",	PlayerInfo[playerid][pAntecedente3]);
		INI_WriteString( PlayerAcc, "Note1", 		PlayerInfo[playerid][pNote1]);
		INI_WriteString( PlayerAcc, "Note2", 		PlayerInfo[playerid][pNote2]);
		INI_WriteString( PlayerAcc, "Note3", 		PlayerInfo[playerid][pNote3]);
		INI_WriteString( PlayerAcc, "Note4", 		PlayerInfo[playerid][pNote4]);
		INI_WriteString( PlayerAcc, "Note5", 		PlayerInfo[playerid][pNote5]);
		INI_WriteString( PlayerAcc, "SMS1", 		PlayerInfo[playerid][pSMS_1]);
		INI_WriteString( PlayerAcc, "SMS2", 		PlayerInfo[playerid][pSMS_2]);
		INI_WriteString( PlayerAcc, "SMS3", 		PlayerInfo[playerid][pSMS_3]);
		INI_WriteString( PlayerAcc, "SMS4", 		PlayerInfo[playerid][pSMS_4]);
		INI_WriteString( PlayerAcc, "SMS5", 		PlayerInfo[playerid][pSMS_5]);
		INI_WriteInt( PlayerAcc, "Lighter",         PlayerInfo[playerid][pLighter]);
		INI_WriteInt( PlayerAcc, "Cigarettes",      PlayerInfo[playerid][pCigarettes]);
		INI_WriteInt( PlayerAcc, "Mascara",         PlayerInfo[playerid][pMask]);
		INI_WriteInt( PlayerAcc, "Locked",          PlayerInfo[playerid][pLocked]);
		INI_WriteInt( PlayerAcc, "Advertencias",    PlayerInfo[playerid][pAdvertencias]);
		INI_WriteInt( PlayerAcc, "AdminAdver",      PlayerInfo[playerid][pAdminAdver]);
		INI_WriteInt( PlayerAcc, "DNI",             PlayerInfo[playerid][pDNI]);
		INI_WriteString( PlayerAcc, "MSN",          PlayerInfo[playerid][pMSN]);
		INI_WriteString( PlayerAcc, "Estado",       PlayerInfo[playerid][pEstado]);
		INI_WriteInt( PlayerAcc, "Weapon",          PlayerInfo[playerid][pWeapon]);
		INI_WriteInt( PlayerAcc, "Ammo",            PlayerInfo[playerid][pAmmo]);
		INI_WriteInt( PlayerAcc, "Weapon2",         PlayerInfo[playerid][pWeapon2]);
		INI_WriteInt( PlayerAcc, "Ammo2",           PlayerInfo[playerid][pAmmo2]);
		INI_WriteInt( PlayerAcc, "Weapon3",         PlayerInfo[playerid][pWeapon3]);
		INI_WriteInt( PlayerAcc, "Ammo3",           PlayerInfo[playerid][pAmmo3]);
		INI_WriteInt( PlayerAcc, "Weapon4",         PlayerInfo[playerid][pWeapon4]);
		INI_WriteInt( PlayerAcc, "Ammo4",           PlayerInfo[playerid][pAmmo4]);
		INI_WriteInt( PlayerAcc, "Weapon5",         PlayerInfo[playerid][pWeapon5]);
		INI_WriteInt( PlayerAcc, "Ammo5",           PlayerInfo[playerid][pAmmo5]);
		INI_WriteInt( PlayerAcc, "Weapon6",         PlayerInfo[playerid][pWeapon6]);
		INI_WriteInt( PlayerAcc, "Ammo6",           PlayerInfo[playerid][pAmmo6]);
		INI_WriteInt( PlayerAcc, "Weapon7",         PlayerInfo[playerid][pWeapon7]);
		INI_WriteInt( PlayerAcc, "Ammo7",           PlayerInfo[playerid][pAmmo7]);
		INI_WriteInt( PlayerAcc, "Weapon8",         PlayerInfo[playerid][pWeapon8]);
		INI_WriteInt( PlayerAcc, "Ammo8",           PlayerInfo[playerid][pAmmo8]);
		INI_WriteInt( PlayerAcc, "Weapon9",         PlayerInfo[playerid][pWeapon9]);
		INI_WriteInt( PlayerAcc, "Ammo9",           PlayerInfo[playerid][pAmmo9]);
		INI_WriteInt( PlayerAcc, "Weapon10",        PlayerInfo[playerid][pWeapon10]);
		INI_WriteInt( PlayerAcc, "Ammo10",          PlayerInfo[playerid][pAmmo10]);
		INI_WriteInt( PlayerAcc, "Weapon11",        PlayerInfo[playerid][pWeapon11]);
		INI_WriteInt( PlayerAcc, "Ammo11",          PlayerInfo[playerid][pAmmo11]);
		INI_WriteInt( PlayerAcc, "Weapon12",        PlayerInfo[playerid][pWeapon12]);
		INI_WriteInt( PlayerAcc, "Ammo12",          PlayerInfo[playerid][pAmmo12]);
		INI_WriteInt( PlayerAcc, "Maleta",          PlayerInfo[playerid][pMaleta]);
		INI_WriteInt( PlayerAcc, "Mochila",         PlayerInfo[playerid][pMochila]);
		INI_WriteInt( PlayerAcc, "Casco",           PlayerInfo[playerid][pCasco]);
		INI_WriteInt( PlayerAcc, "SIDA",            PlayerInfo[playerid][pSIDA]);
		INI_WriteInt( PlayerAcc, "Cancer",          PlayerInfo[playerid][pCancer]);
		INI_WriteInt( PlayerAcc, "Epilepsia",       PlayerInfo[playerid][pEpilepsia]);
		INI_WriteInt( PlayerAcc, "DEagle",          PlayerInfo[playerid][pDEagle]);
		INI_WriteInt( PlayerAcc, "Shotgun",         PlayerInfo[playerid][pShotgun]);
		INI_WriteInt( PlayerAcc, "MP5",             PlayerInfo[playerid][pMP5]);
		INI_WriteInt( PlayerAcc, "AK47",            PlayerInfo[playerid][pAK47]);
		INI_WriteInt( PlayerAcc, "M4",              PlayerInfo[playerid][pM4]);
		INI_WriteInt( PlayerAcc, "Sniper",          PlayerInfo[playerid][pSniper]);
		INI_WriteInt( PlayerAcc, "FStyle",          PlayerInfo[playerid][pFStyle]);
		INI_WriteInt( PlayerAcc, "Leccion",         PlayerInfo[playerid][pLeccion]);
		INI_WriteInt( PlayerAcc, "Busqueda",        PlayerInfo[playerid][pBusqueda]);
		INI_WriteInt( PlayerAcc, "AntiSIDA",        PlayerInfo[playerid][pAntiSIDA]);
		INI_WriteInt( PlayerAcc, "AntiCancer",      PlayerInfo[playerid][pAntiCancer]);
		INI_WriteInt( PlayerAcc, "AntiEpilepsia",   PlayerInfo[playerid][pAntiEpilepsia]);
		INI_WriteInt( PlayerAcc, "Rent",            PlayerInfo[playerid][pRent]);
		INI_WriteInt( PlayerAcc, "Rob",             PlayerInfo[playerid][pRob]);
		INI_WriteInt( PlayerAcc, "Donate",          PlayerInfo[playerid][pDonateT]);
		INI_WriteInt( PlayerAcc, "CarPremium",      PlayerInfo[playerid][pCarPremium]);
		INI_WriteInt( PlayerAcc, "CarPremium2",     PlayerInfo[playerid][pCarPremium2]);
		INI_WriteInt( PlayerAcc, "BanDuda",         PlayerInfo[playerid][pBanDuda]);
		INI_WriteInt( PlayerAcc, "Seguro",          PlayerInfo[playerid][pSeguro]);
		INI_WriteInt( PlayerAcc, "Walkie",          PlayerInfo[playerid][pWalkie]);
		INI_WriteInt( PlayerAcc, "Head",            PlayerInfo[playerid][pHead]);
		INI_WriteInt( PlayerAcc, "Married",         PlayerInfo[playerid][pMarried]);
		INI_WriteString( PlayerAcc, "MarriedTo",	PlayerInfo[playerid][pMarriedTo]);
		INI_WriteInt( PlayerAcc, "Entered",         PlayerInfo[playerid][pEntered]);
		INI_WriteInt( PlayerAcc, "Peces",           PlayerInfo[playerid][pPeces]);
		INI_WriteInt( PlayerAcc, "Implementos",     PlayerInfo[playerid][pImplementos]);
		INI_WriteInt( PlayerAcc, "Carnada",         PlayerInfo[playerid][pCarnada]);
		INI_WriteInt( PlayerAcc, "Fichas",          PlayerInfo[playerid][pFichas]);
		INI_WriteInt( PlayerAcc, "DNIFalse",        PlayerInfo[playerid][pDNIFalse]);
		INI_WriteString( PlayerAcc, "DNIName",      PlayerInfo[playerid][pDNIName]);
		INI_WriteInt( PlayerAcc, "Suciedad", 	    PlayerInfo[playerid][pSuciedad]);
		INI_WriteInt( PlayerAcc, "AnilloCom",       PlayerInfo[playerid][pAnilloCom]);
		INI_WriteInt( PlayerAcc, "AnilloOro",       PlayerInfo[playerid][pAnilloOro]);
		INI_WriteInt( PlayerAcc, "Collar",          PlayerInfo[playerid][pCollar]);
		INI_WriteInt( PlayerAcc, "AnilloDia",       PlayerInfo[playerid][pAnilloDia]);
		INI_WriteInt( PlayerAcc, "Pulsera",         PlayerInfo[playerid][pPulsera]);
		INI_WriteInt( PlayerAcc, "Aretes",          PlayerInfo[playerid][pAretes]);
		INI_WriteInt( PlayerAcc, "Reloj",           PlayerInfo[playerid][pReloj]);
		for(new v = 0; v < MAX_PLAYERTOYS; v++)
		{
			format(string, 128, "pt%dModelID",v);
			INI_WriteInt( PlayerAcc, string,        PlayerToyInfo[playerid][v][ptModelID]);
			format(string, 128, "pt%dBone",v);
			INI_WriteInt( PlayerAcc, string,        PlayerToyInfo[playerid][v][ptBone]);
			format(string, 128, "pt%dPosX",v);
			INI_WriteFloat( PlayerAcc, string,      PlayerToyInfo[playerid][v][ptPosX]);
			format(string, 128, "pt%dPosY",v);
			INI_WriteFloat( PlayerAcc, string,		PlayerToyInfo[playerid][v][ptPosY]);
			format(string, 128, "pt%dPosZ",v);
			INI_WriteFloat( PlayerAcc, string,		PlayerToyInfo[playerid][v][ptPosZ]);
			format(string, 128, "pt%dRotX",v);
			INI_WriteFloat( PlayerAcc, string,		PlayerToyInfo[playerid][v][ptRotX]);
			format(string, 128, "pt%dRotY",v);
			INI_WriteFloat( PlayerAcc, string,		PlayerToyInfo[playerid][v][ptRotY]);
			format(string, 128, "pt%dRotZ",v);
			INI_WriteFloat( PlayerAcc, string,		PlayerToyInfo[playerid][v][ptRotZ]);
		}
		
		INI_Close( PlayerAcc );
	}
	return 1;
}

public LoadUser(playerid, name[], value[])
{
	new string[128];
	INI_String("Key",          	PlayerInfo[playerid][pKey], 28);
	INI_Int("Contrato",        PlayerInfo[playerid][pContract]);
	INI_Int( "Level",			PlayerInfo[playerid][pLevel]);
	INI_Int( "AdminCP",			PlayerInfo[playerid][pAdminCP]);
	INI_Int( "Facciones",       PlayerInfo[playerid][pFacciones]);
	INI_Int( "Helper",			PlayerInfo[playerid][pHelper]);
	INI_Int( "ConnectedTime",	PlayerInfo[playerid][pConnectTime]);
	INI_Int( "Registered",		PlayerInfo[playerid][pReg]);
	INI_Int( "Sex",				PlayerInfo[playerid][pSex]);
	INI_Int( "Age",				PlayerInfo[playerid][pAge]);
	INI_Int( "Origin",			PlayerInfo[playerid][pOrigin]);
	INI_Int( "Walk",			PlayerInfo[playerid][pWalk]);
	INI_Int( "Respect",			PlayerInfo[playerid][pExp]);
	INI_Int( "Money",			PlayerInfo[playerid][pCash]);
	INI_Int( "Bank",			PlayerInfo[playerid][pAccount]);
	INI_Int( "Cheques",			PlayerInfo[playerid][pCheques]);
	INI_Int( "Kills",			PlayerInfo[playerid][pKills]);
	INI_Int( "Deaths",			PlayerInfo[playerid][pDeaths]);
	INI_Int( "Arrested",		PlayerInfo[playerid][pArrested]);
	INI_Int( "LottoNr",			PlayerInfo[playerid][pLottoNr]);
	INI_Int( "Job",				PlayerInfo[playerid][pJob]);
	INI_Int( "Jailed",			PlayerInfo[playerid][pJailed]);
	INI_Int( "JailTime",		PlayerInfo[playerid][pJailTime]);
	INI_Int( "Materiales",		PlayerInfo[playerid][pMats]);
	INI_Int( "Drogas",			PlayerInfo[playerid][pDrugs]);
	INI_Int( "Speed",			PlayerInfo[playerid][pSpeed]);
	INI_Int( "Ectasy",			PlayerInfo[playerid][pEctasy]);
	INI_Int( "Ritalin",			PlayerInfo[playerid][pRitalin]);
	INI_Int( "Heroina",			PlayerInfo[playerid][pHeroina]);
	INI_Int( "Marihuana",		PlayerInfo[playerid][pMarihuana]);
	INI_Int( "Leader",			PlayerInfo[playerid][pLeader]);
	INI_Int( "Member",			PlayerInfo[playerid][pMember]);
	INI_Int( "Rank",			PlayerInfo[playerid][pRank]);
	INI_Int( "Char",			PlayerInfo[playerid][pChar]);
	INI_Float( "Health",		PlayerInfo[playerid][pHealth]);
	INI_Float( "Armour",		PlayerInfo[playerid][pArmour]);
	INI_Int( "Int",				PlayerInfo[playerid][pInt]);
	INI_Int( "VirWorld",        PlayerInfo[playerid][pVirWorld]);
	INI_Int( "Team",			PlayerInfo[playerid][pTeam]);
	INI_Int( "Model",			PlayerInfo[playerid][pModel]);
	INI_Int( "PhoneNr",			PlayerInfo[playerid][pPnumber]);
	INI_Int( "Minutes",			PlayerInfo[playerid][pMinutes]);
	INI_Int( "MTexto",			PlayerInfo[playerid][pMTexto]);
	INI_Int( "Ipod",			PlayerInfo[playerid][pIpod]);
	INI_Int( "Car",				PlayerInfo[playerid][pPcarkey]);
	INI_Int( "Car2",			PlayerInfo[playerid][pPcarkey2]);
	INI_Int( "TimeCar",			PlayerInfo[playerid][pTimeCar]);
	INI_Int( "TimeCar2",		PlayerInfo[playerid][pTimeCar2]);
	INI_Int( "House",			PlayerInfo[playerid][pPhousekey]);
	INI_Int( "Negocio",         PlayerInfo[playerid][pPbizzkey]);
	INI_Float( "Pos_x",			PlayerInfo[playerid][pPos_x]);
	INI_Float( "Pos_y",			PlayerInfo[playerid][pPos_y]);
	INI_Float( "Pos_z",			PlayerInfo[playerid][pPos_z]);
	INI_Int( "CarLic",			PlayerInfo[playerid][pCarLic]);
	INI_Int( "FlyLic",			PlayerInfo[playerid][pFlyLic]);
	INI_Int( "BoatLic",			PlayerInfo[playerid][pBoatLic]);
	INI_Int( "GunLic",			PlayerInfo[playerid][pGunLic]);
	INI_Int( "Gafas",           PlayerInfo[playerid][pGafas]);
	INI_Int( "Tutorial",		PlayerInfo[playerid][pTut]);
	INI_String("Antecedente1", 	PlayerInfo[playerid][pAntecedente1], 78);
	INI_String("Antecedente2", 	PlayerInfo[playerid][pAntecedente2], 78);
	INI_String("Antecedente3", 	PlayerInfo[playerid][pAntecedente3], 78);
	INI_String("Note1",		 	PlayerInfo[playerid][pNote1], 80);
	INI_String("Note2", 		PlayerInfo[playerid][pNote2], 80);
	INI_String("Note3", 		PlayerInfo[playerid][pNote3], 80);
	INI_String("Note4",		 	PlayerInfo[playerid][pNote4], 80);
	INI_String("Note5",		 	PlayerInfo[playerid][pNote5], 80);
	INI_String("SMS1",		  	PlayerInfo[playerid][pSMS_1], 86);
	INI_String("SMS2",		  	PlayerInfo[playerid][pSMS_2], 86);
	INI_String("SMS3",		  	PlayerInfo[playerid][pSMS_3], 86);
	INI_String("SMS4",		  	PlayerInfo[playerid][pSMS_4], 86);
	INI_String("SMS5",		  	PlayerInfo[playerid][pSMS_5], 86);
	INI_Int( "Lighter",			PlayerInfo[playerid][pLighter]);
	INI_Int( "Cigarettes",		PlayerInfo[playerid][pCigarettes]);
	INI_Int( "Mascara",         PlayerInfo[playerid][pMask]);
	INI_Int( "Locked",			PlayerInfo[playerid][pLocked]);
	INI_Int( "Advertencias",    PlayerInfo[playerid][pAdvertencias]);
	INI_Int( "AdminAdver",      PlayerInfo[playerid][pAdminAdver]);
	INI_Int( "DNI"	,			PlayerInfo[playerid][pDNI]);
	INI_String( "MSN",		  	PlayerInfo[playerid][pMSN], 54);
	INI_String( "Estado",       PlayerInfo[playerid][pEstado], 26);
	INI_Int( "Weapon",			PlayerInfo[playerid][pWeapon]);
	INI_Int( "Ammo",			PlayerInfo[playerid][pAmmo]	);
	INI_Int( "Weapon2",			PlayerInfo[playerid][pWeapon2]);
	INI_Int( "Ammo2",			PlayerInfo[playerid][pAmmo2]);
	INI_Int( "Weapon3",			PlayerInfo[playerid][pWeapon3]);
	INI_Int( "Ammo3",			PlayerInfo[playerid][pAmmo3]);
	INI_Int( "Weapon4",			PlayerInfo[playerid][pWeapon4]);
	INI_Int( "Ammo4",			PlayerInfo[playerid][pAmmo4]);
	INI_Int( "Weapon5",			PlayerInfo[playerid][pWeapon5]);
	INI_Int( "Ammo5",			PlayerInfo[playerid][pAmmo5]);
	INI_Int( "Weapon6",			PlayerInfo[playerid][pWeapon6]);
	INI_Int( "Ammo6",			PlayerInfo[playerid][pAmmo6]);
	INI_Int( "Weapon7",			PlayerInfo[playerid][pWeapon7]);
	INI_Int( "Ammo7",			PlayerInfo[playerid][pAmmo7]);
	INI_Int( "Weapon8",			PlayerInfo[playerid][pWeapon8]);
	INI_Int( "Ammo8",			PlayerInfo[playerid][pAmmo8]);
	INI_Int( "Weapon9",			PlayerInfo[playerid][pWeapon9]);
	INI_Int( "Ammo9",			PlayerInfo[playerid][pAmmo9]);
	INI_Int( "Weapon10",		PlayerInfo[playerid][pWeapon10]);
	INI_Int( "Ammo10",			PlayerInfo[playerid][pAmmo10]);
	INI_Int( "Weapon11",		PlayerInfo[playerid][pWeapon11]);
	INI_Int( "Ammo11",			PlayerInfo[playerid][pAmmo11]);
	INI_Int( "Weapon12",		PlayerInfo[playerid][pWeapon12]);
	INI_Int( "Ammo12",			PlayerInfo[playerid][pAmmo12]);
	INI_Int( "Mochila",			PlayerInfo[playerid][pMochila]);
	INI_Int( "Casco",           PlayerInfo[playerid][pCasco]);
	INI_Int( "SIDA",			PlayerInfo[playerid][pSIDA]	);
	INI_Int( "Cancer",			PlayerInfo[playerid][pCancer]);
	INI_Int( "Epilepsia",		PlayerInfo[playerid][pEpilepsia]);
	INI_Int( "DEagle",			PlayerInfo[playerid][pDEagle]);
	INI_Int( "Shotgun",			PlayerInfo[playerid][pShotgun]);
	INI_Int( "MP5"	,			PlayerInfo[playerid][pMP5]);
	INI_Int( "AK47",			PlayerInfo[playerid][pAK47]);
	INI_Int( "M4"	,			PlayerInfo[playerid][pM4]);
	INI_Int( "Sniper",			PlayerInfo[playerid][pSniper]);
	INI_Int( "FStyle",			PlayerInfo[playerid][pFStyle]);
	INI_Int( "Leccion",			PlayerInfo[playerid][pLeccion]);
	INI_Int( "Busqueda",		PlayerInfo[playerid][pBusqueda]);
	INI_Int( "AntiSIDA",		PlayerInfo[playerid][pAntiSIDA]);
	INI_Int( "AntiCancer",		PlayerInfo[playerid][pAntiCancer]);
	INI_Int( "AntiEpilepsia",	PlayerInfo[playerid][pAntiEpilepsia]);
	INI_Int( "Rent",			PlayerInfo[playerid][pRent]);
	INI_Int( "Rob",				PlayerInfo[playerid][pRob]);
	INI_Int( "Donate",          PlayerInfo[playerid][pDonateT]);
	INI_Int( "CarPremium",      PlayerInfo[playerid][pCarPremium]);
	INI_Int( "CarPremium2",     PlayerInfo[playerid][pCarPremium2]);
	INI_Int( "BanDuda",         PlayerInfo[playerid][pBanDuda]);
	INI_Int( "Seguro",			PlayerInfo[playerid][pSeguro]);
	INI_Int( "Walkie",			PlayerInfo[playerid][pWalkie]);
	INI_Int( "Head",    	  	PlayerInfo[playerid][pHead]);
	INI_Int( "Married",         PlayerInfo[playerid][pMarried]);
	INI_String( "MarriedTo",    PlayerInfo[playerid][pMarriedTo], 64);
	INI_Int( "Entered",         PlayerInfo[playerid][pEntered]);
	INI_Int( "Peces",           PlayerInfo[playerid][pPeces]);
	INI_Int( "Implementos",     PlayerInfo[playerid][pImplementos]);
	INI_Int( "Carnada",         PlayerInfo[playerid][pCarnada]);
	INI_Int( "Fichas",          PlayerInfo[playerid][pFichas]);
	INI_Int( "DNIFalse",        PlayerInfo[playerid][pDNIFalse]);
	INI_String( "DNIName",      PlayerInfo[playerid][pDNIName], 32);
	INI_Int( "Suciedad",        PlayerInfo[playerid][pSuciedad]);
	INI_Int( "AnilloCom",       PlayerInfo[playerid][pAnilloCom]);
	INI_Int( "AnilloOro",       PlayerInfo[playerid][pAnilloOro]);
	INI_Int( "Collar",          PlayerInfo[playerid][pCollar]);
	INI_Int( "AnilloDia",       PlayerInfo[playerid][pAnilloDia]);
	INI_Int( "Pulsera",         PlayerInfo[playerid][pPulsera]);
	INI_Int( "Aretes",          PlayerInfo[playerid][pAretes]);
	INI_Int( "Reloj",           PlayerInfo[playerid][pReloj]);
	for(new v = 0; v < MAX_PLAYERTOYS; v++)
	{
		format(string, 128, "pt%dModelID",v);
		INI_Int( string,        PlayerToyInfo[playerid][v][ptModelID]);
		format(string, 128, "pt%dBone",v);
		INI_Int( string,        PlayerToyInfo[playerid][v][ptBone]);
		format(string, 128, "pt%dPosX",v);
		INI_Float( string,        PlayerToyInfo[playerid][v][ptPosX]);
		format(string, 128, "pt%dPosY",v);
		INI_Float( string,        PlayerToyInfo[playerid][v][ptPosY]);
		format(string, 128, "pt%dPosY",v);
		INI_Float( string,        PlayerToyInfo[playerid][v][ptPosZ]);
		format(string, 128, "pt%dRotX",v);
		INI_Float( string,        PlayerToyInfo[playerid][v][ptRotX]);
		format(string, 128, "pt%dRotY",v);
		INI_Float( string,        PlayerToyInfo[playerid][v][ptRotY]);
		format(string, 128, "pt%dRotZ",v);
		INI_Float( string,        PlayerToyInfo[playerid][v][ptRotZ]);
	}
	return 0;
}

public OnPlayerLogin(playerid)
{
	new string2[128];
	if(PlayerInfo[playerid][pLocked] == 8)
	{
		Message(playerid, COLOR_YELLOW2, "Atención: Tu cuenta figura como bloqueada.");
		Message(playerid, COLOR_YELLOW2, "(Baneado)");
		Message(playerid, COLOR_YELLOW2, "Acude al foro para reclamar tu desbaneo.");
		Ban(playerid);
	}
	ResetPlayerMoney(playerid), GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
	if(PlayerInfo[playerid][pReg] == 0)
	{
		PlayerInfo[playerid][pLevel] = 1;
		PlayerInfo[playerid][pHealth] = 50.0;
		PlayerInfo[playerid][pPos_x] = 1612.3240;
		PlayerInfo[playerid][pPos_y] = -2330.1670;
		PlayerInfo[playerid][pPos_z] = 13.5469;
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pTeam] = 3;
		PlayerInfo[playerid][pModel] = 135;
		PlayerInfo[playerid][pPhousekey] = 9999;
		PlayerInfo[playerid][pPbizzkey] = 9999;
		PlayerInfo[playerid][pPcarkey] = 9999;
		PlayerInfo[playerid][pPcarkey2] = 9999;
		PlayerInfo[playerid][pCarPremium] = 9999;
		PlayerInfo[playerid][pCarPremium2] = 9999;
		PlayerInfo[playerid][pAccount] = 0;
		PlayerInfo[playerid][pReg] = 1;
		GivePlayerMoney(playerid, 3000);
	}
	ClearChatbox(playerid, 10);
	format(string2, sizeof(string2), "* Bienvenido a {FF5E00}Hermandad Zero RP {018CFE}, %s.", PlayerName(playerid));
	Message(playerid, COLOR_WHITE, string2);
	Message(playerid, COLOR_WHITE, "* {018CFE}¡Recuerda invitar a tus amigos al servidor!");
	if(DobleOn == 1) Message(playerid, AMARILLO_ADMIN, "* Informacion: {FFFFFF}El sistema de doble experiencia esta activo, recuerda jugar para subir mas rapido de nivel.");
	if(TripleOn == 1) Message(playerid, COLOR_RED2, "* Informacion: {FFFFFF}Se ha activado el sistema de TRIPLE experiencia. Ahora subiras 3 veces mas rápido tus puntos de respeto.");
	if(PlayerInfo[playerid][pAdminCP] > 0)
	{
		format(string2, sizeof(string2), "- {ADFF2F}Nivel Administrativo {FFFFFF}%d", PlayerInfo[playerid][pAdminCP]);
		Message(playerid, -1, string2);
	}

	SetTimerEx("Spawned", 10000, false, "i", playerid);
	gPlayerLogged[playerid] = 1;
	SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
	SpawnPlayer(playerid);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Maskuse[i] == 1)
			{
				ShowPlayerNameTagForPlayer(playerid, i, 0);
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new Float:cx, Float:cy, Float:cz, contacto = PlayerInfo[playerid][pPnumber];
	new idcar = GetPlayerVehicleID(playerid),string[128], giveplayerid;

	switch(dialogid)
	{
		case BUYTOYS:
		{
			if(response)
			{
				new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
					new name[24];
					format(name, sizeof(name), "Nada");

					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
			}
		}
		case BUYTOYS2:
		{
			if (response)
			{
				if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return Message(playerid, COLOR_YELLOW, "* Ya tienes algo en esa ranura, eliminala con /toys");

				slotselection[playerid] = listitem;

				new stringg[3821];
				for(new x;x<sizeof(HoldingObjectsAll);x++)
				{
					format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsAll[x][holdingmodelname], HoldingObjectsAll[x][holdingprice]);
				}
				ShowPlayerDialog(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "Selecciona un Objeto", stringg, "Comprar", "Cancelar");
			}
		}
		case BUYTOYS3:
		{
			if (response)
			{
				if(GetPlayerMoney(playerid) < HoldingObjectsAll[listitem][holdingprice])
				{
					Message(playerid, COLOR_WHITE, "* Usted no tiene suficiente dinero");
				}
				else
				{
					Bought(playerid, HoldingObjectsAll[listitem][holdingprice]);
					if(PlayerToPoint(30.0,playerid,211.7609,-7.6523,1001.2109))     Till(9, HoldingObjectsAll[listitem][holdingprice]);
					if(PlayerToPoint(20.0,playerid,207.7558,-103.3743,1005.2578))   Till(10, HoldingObjectsAll[listitem][holdingprice]);
					PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsAll[listitem][holdingmodelid];

					new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
					switch(modelid)
					{
						case 19006..19035,19138..19140:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						case 18891..18910:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
						}
						case 18926..18935:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						case 18911..18920:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
						}
						case 19078:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						case 18641..18644,18890,19080..19084:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						default:
						{
							PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
							PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
					}
					format(string, sizeof(string), "* Usted a comprado un %s por $%d (Slot: %d)", HoldingObjectsAll[listitem][holdingmodelname], HoldingObjectsAll[listitem][holdingprice], slotselection[playerid]);
					Message(playerid, COLOR_RED, string);
					Message(playerid, COLOR_WHITE, " Usa /toys para editar tus objetos.");
				}
			}
		}
		case TOYS:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						new stringg[512];
						for(new x;x<MAX_PLAYERTOYS;x++)
						{
							new name[24];
							format(name, sizeof(name), "Nada");

							for(new i;i<sizeof(HoldingObjectsAll);i++)
							{
								if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
								{
									format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
								}
							} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
						} ShowPlayerDialog(playerid, WEARTOY, DIALOG_STYLE_LIST, "Seleccione un Objeto", stringg, "Seleccionar", "Cancelar");
					}
					case 1:
					{
						new stringg[512];
						for(new x;x<MAX_PLAYERTOYS;x++)
						{
							new name[24];
							format(name, sizeof(name), "Nada");

							for(new i;i<sizeof(HoldingObjectsAll);i++)
							{
								if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
								{
									format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
								}
							} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
						} ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Seleccione un Objeto", stringg, "Seleccionar", "Cancelar");
					}
					case 2:
					{
						new stringg[512];
						for(new x;x<MAX_PLAYERTOYS;x++)
						{
							new name[24];
							format(name, sizeof(name), "Nada");

							for(new i;i<sizeof(HoldingObjectsAll);i++)
							{
								if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
								{
									format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
								}
							} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
						} ShowPlayerDialog(playerid, DELETETOY, DIALOG_STYLE_LIST, "Seleccione un Objeto", stringg, "Borrar", "Cancelar");
					}
				}
			}
		}
		case EDITTOYS:
		{
			if (response)
			{
				if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
				{
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Menú: Edición", "Usted no tiene nada en ese slot!", "OK", "");
				}
				else
				{
					slotselection[playerid] = listitem;
					ShowEditMenu(playerid);
				}
			}
		}
		case EDITTOYS2:
		{
			if (response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "Selecciona una Parte", "Columna\nCabeza\nBrazo Izq Sup\nBrazo Der Sup\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAnteBrazo Izq\nAnteBrazo Der\nClavicula Izq\nClavicula Der\nCuello\nQuijada", "Aceptar", "Cancelar");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, EDITTOYSPX, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una X Offset de -100 a 100 (Ejm: 55, o 33.4)", "Enter", "Cancelar");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, EDITTOYSPY, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Y Offset de -100 a 100 (Ejm: 55, o 33.4)", "Enter", "Cancelar");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, EDITTOYSPZ, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Z Offset de -100 a 100 (Ejm: 55, o 33.4)", "Enter", "Cancelar");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, EDITTOYSRX, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una X Rotación de 0 a 360 (Ejm: 90, o 270.4)", "Enter", "Cancelar");
					}
					case 5:
					{
						ShowPlayerDialog(playerid, EDITTOYSRY, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Y Rotación de 0 a 360 (Ejm: 90, o 270.4)", "Enter", "Cancelar");
					}
					case 6:
					{
						ShowPlayerDialog(playerid, EDITTOYSRZ, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Z Rotación de 0 a 360 (Ejm: 90, o 270.4)", "Enter", "Cancelar");
					}
				}
			}
			else
			{
				new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
					new name[24];
					format(name, sizeof(name), "Nada");

					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				} ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Seleccionar un Accesorio", stringg, "Seleccionar", "Cancelar");
			}
		}
		case EDITTOYSPX:
		{
			if(response)
			{
				new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 100) offset = 100;
				offset = offset/100;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSPY:
		{
			if (response)
			{
				new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 100) offset = 100;
				offset = offset/100;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSPZ:
		{
			if (response)
			{
				new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 100) offset = 100;
				offset = offset/100;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSRX:
		{
			if (response)
			{
				new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSRY:
		{
			if(response)
			{
				new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSRZ:
		{
			if (response)
			{
				new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSBONE:
		{
			if(response)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;
			}
			ShowEditMenu(playerid);
		}
		case WEARTOY:
		{
			if (response)
			{
				if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
				{
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Menú: Poner/Quitar", "Usted no tiene ningún objeto en este slot!", "OK", "");
				}
				else
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
					{
						new name[24];
						format(name, sizeof(name), "Nada");

						for(new i;i<sizeof(HoldingObjectsAll);i++)
						{
							if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
							{
								format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
							}
						}
						format(string, sizeof(string), "Te quitaste tu %s (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
						Message(playerid, COLOR_RED, string);
						RemovePlayerAttachedObject(playerid, listitem);
					}
					else
					{
						SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ], PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], 1, 1, 1);
						new name[24];
						format(name, sizeof(name), "Nada");

						for(new i;i<sizeof(HoldingObjectsAll);i++)
						{
							if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
							{
								format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
							}
						}
						format(string, sizeof(string), "Te pusiste un %s. (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
						Message(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
		}
		case DELETETOY:
		{
			if (response)
			{
				PlayerToyInfo[playerid][listitem][ptModelID] = 0;
				PlayerToyInfo[playerid][listitem][ptBone] = 0;
				PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
				PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
				PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
				PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
				PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
				if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
				{
					RemovePlayerAttachedObject(playerid, listitem);
				}
				format(string, sizeof(string), "Usted ha eliminado su accesorio del slot %d", listitem);
				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Menú", string, "OK", "");
			}
		}
		case CLOTHES_CHOOSE_DIALOG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ClothesID	[playerid] = 16005;
						Accesory	[playerid] = 1;
						Message(playerid, COLOR_YELLOW2, "- Utiliza la tecla ESPACIO para ver las distintas gafas");
						Message(playerid, COLOR_YELLOW2, "- Utiliza /comprar para comprar las gafas");
						Message(playerid, COLOR_YELLOW2, "- Utiliza /salirvestidor para no comprar nada");
					}
					case 1:
					{
						ClothesID	[playerid] = 18910;
						Accesory	[playerid] = 2;
						Message(playerid, COLOR_YELLOW2, "- Utiliza la tecla ESPACIO para ver las distintas bandanas");
						Message(playerid, COLOR_YELLOW2, "- Utiliza /comprar para comprar la bandana");
						Message(playerid, COLOR_YELLOW2, "- Utiliza /salirvestidor para no comprar nada");
						Message(playerid, COLOR_YELLOW2, "** Recuerda: las bandanas solo se permiten con skin de pandillero**");
					}
					case 2:
					{
						ClothesID	[playerid] = 18925;
						Accesory	[playerid] = 3;
						Message(playerid, COLOR_YELLOW2, "- Utiliza la tecla ESPACIO para ver los distintos gorros");
						Message(playerid, COLOR_YELLOW2, "- Utiliza /comprar para comprar los gorros");
						Message(playerid, COLOR_YELLOW2, "- Utiliza /salirvestidor para no comprar nada");
					}
				}
			}
		}
		case SEL_SKIN:                        //DIALOG DEL ANTIGUO /cropa  usado en /cropaid
		{
			if (response)
			{
				if(strval(inputtext) > 281 && strval(inputtext) < 289 || strval(inputtext) == 71) return Message(playerid, COLOR_GRAD2, "Skin Reservada");
				if(strval(inputtext) > 273 && strval(inputtext) < 280 || strval(inputtext) == 70) return Message(playerid, COLOR_GRAD2, "Skin Reservada");
				if(strval(inputtext) < 1 || strval(inputtext) > 299) return Message(playerid, COLOR_GRAD2, "ERROR! Skin de 1 a 299");
				if(CheckMoney(playerid,200))
				{
					PlayerInfo[playerid][pChar] = strval(inputtext);
					SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
					if(PlayerInfo[playerid][pDonateT] == 0){
						Bought(playerid, 200);
						if(PlayerToPoint(30.0,playerid,211.7609,-7.6523,1001.2109))     Till(9, 200);
						if(PlayerToPoint(20.0,playerid,207.7558,-103.3743,1005.2578))   Till(10, 200);
					}
				}
				return 1;
			}
		}
		case CAMARAS_LSPD:
		{
			if(response) {
				switch(listitem) {
            		case 0: // CAMARA 1
            		{
            			SetPlayerCameraPos(playerid, 1424.3242,-1304.9410,30.8439);
            			SetPlayerCameraLookAt(playerid, 1408.4377,-1361.6721,8.5547);

            			TextDrawShowForPlayer(playerid,TVCAM_CornerTopLeft);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerTopRight);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerBottomLeft);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerBottomRight);
            		}
       				case 1: //CAMARA 2
       				{
       					SetPlayerCameraPos(playerid, 2252.0281,-2241.3621,22.6538);
       					SetPlayerCameraLookAt(playerid, 2254.5698,-2205.7773,13.3154);
       					TextDrawShowForPlayer(playerid,TVCAM_CornerTopLeft);
       					TextDrawShowForPlayer(playerid,TVCAM_CornerTopRight);
       					TextDrawShowForPlayer(playerid,TVCAM_CornerBottomLeft);
       					TextDrawShowForPlayer(playerid,TVCAM_CornerBottomRight);
       				}
         			case 2: //CAMARA 3
         			{
         				SetPlayerCameraPos(playerid, 1542.7139,-1650.4813,28.4021);
         				SetPlayerCameraLookAt(playerid, 1529.6488,-1688.7915,13.3828);
         				TextDrawShowForPlayer(playerid,TVCAM_CornerTopLeft);
         				TextDrawShowForPlayer(playerid,TVCAM_CornerTopRight);
         				TextDrawShowForPlayer(playerid,TVCAM_CornerBottomLeft);
         				TextDrawShowForPlayer(playerid,TVCAM_CornerBottomRight);
         			}
            		case 3: //CAMARA 4
            		{
            			SetPlayerCameraPos(playerid, 1643.1034,-1723.1521,21.6860);
            			SetPlayerCameraLookAt(playerid, 1568.2974,-1732.8523,13.3828);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerTopLeft);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerTopRight);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerBottomLeft);
            			TextDrawShowForPlayer(playerid,TVCAM_CornerBottomRight);
            		}
          			case 4://CAMARA 5
          			{
          				SetPlayerCameraPos(playerid, 1543.6251,-1631.9451,16.1278);
          				SetPlayerCameraLookAt(playerid, 1594.8489,-1618.4550,13.4102);
          				TextDrawShowForPlayer(playerid,TVCAM_CornerTopLeft);
          				TextDrawShowForPlayer(playerid,TVCAM_CornerTopRight);
          				TextDrawShowForPlayer(playerid,TVCAM_CornerBottomLeft);
          				TextDrawShowForPlayer(playerid,TVCAM_CornerBottomRight);
          			}
      				case 5://CAMARA 6
      				{
      					SetCameraBehindPlayer(playerid);
      					CancelSelectTextDraw(playerid);
      					TextDrawHideForPlayer(playerid,TVCAM_CornerTopLeft);
      					TextDrawHideForPlayer(playerid,TVCAM_CornerTopRight);
      					TextDrawHideForPlayer(playerid,TVCAM_CornerBottomLeft);
      					TextDrawHideForPlayer(playerid,TVCAM_CornerBottomRight);
      					TextDrawHideForPlayer(playerid,TextdrawUp);
      					TextDrawHideForPlayer(playerid,TextdrawDown);
      					TextDrawHideForPlayer(playerid,TextdrawLeft);
      					TextDrawHideForPlayer(playerid,TextdrawRight);
      					TextDrawHideForPlayer(playerid,TextdrawFinish);

      				}
      			}
      		}
      	}
      	case AYUDA_DIALOG:
      	{
      		if (response){
      			switch(listitem){
      				case 0:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> CarJack [CJ]", cj, "Aceptar", "Volver" );
      				}
      				case 1:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> DeathMatch [DM]", dm, "Aceptar", "Volver" );
      				}
      				case 2:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> MetaGaming [MG]", mg, "Aceptar", "Volver" );
      				}
      				case 3:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> PowerGaming [PG]", pg, "Aceptar", "Volver" );
      				}
      				case 4:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> Badly Parked Car [BPC]", bpc, "Aceptar", "Volver" );
      				}
      				case 5:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> Bad Driving [BD]", bd, "Aceptar", "Volver" );
      				}
      				case 6:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> Revenge Kill [RK]", rk, "Aceptar", "Volver" );
      				}
      				case 7:
      				{
      					ShowPlayerDialog(playerid,500,DIALOG_STYLE_MSGBOX, "{FF231D}> Noob Abuser [NA]", na, "Aceptar", "Volver" );
      				}
      			}
      		}
      	}
      	case 500:
      	{
      		if(!response)
      		{
      			ShowPlayerDialog(playerid, AYUDA_DIALOG, DIALOG_STYLE_LIST, "{FF0D00}>{6CF600}HermandadZero {FFFFFF}-{9024D3}Reglas de Rol", " {00FF00}>{FFFFFF}CarJack \n {00FF00}>{FFFFFF}DeathMatch \n {00FF00}>{FFFFFF}MetaGaming \n {00FF00}>{FFFFFF}PowerGaming \n {00FF00}>{FFFFFF}Badly Parked Car \n {00FF00}>{FFFFFF}Bad Driving \n {00FF00}>{FFFFFF}Revenge Kill \n {00FF00}>{FFFFFF}Noob Abuser", "Ver", "Salir");
      		}
      	}

      	case COLOR_ADM:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0: { SetPlayerColor(playerid, ROJO_ADMIN);   	Color[playerid] = ROJO_ADMIN;		}
      				case 1: { SetPlayerColor(playerid, VERDE_ADMIN);    Color[playerid] = VERDE_ADMIN;		}
      				case 2: { SetPlayerColor(playerid, AMARILLO_ADMIN); Color[playerid] = AMARILLO_ADMIN; 	}
      				case 3: { SetPlayerColor(playerid, CREMA_ADMIN);    Color[playerid] = CREMA_ADMIN; 		}
      				case 4: { SetPlayerColor(playerid, ROSADO_ADMIN);   Color[playerid] = ROSADO_ADMIN; 	}
      				case 5: { SetPlayerColor(playerid, CELESTE_ADMIN);  Color[playerid] = CELESTE_ADMIN; 	}
      				case 6: { SetPlayerColor(playerid, MORADO_ADMIN);   Color[playerid] = MORADO_ADMIN; 	}
      				case 7: { SetPlayerColor(playerid, ORANGE_ADMIN);   Color[playerid] = ORANGE_ADMIN; 	}
      				case 8: { SetPlayerColor(playerid, COLOR_WHITE);    Color[playerid] = COLOR_WHITE; 		}
      				case 9: { SetPlayerColor(playerid, NEGRO_ADMIN);    Color[playerid] = NEGRO_ADMIN; 		}
      			}
      		}
      	}
      	case CELDAS:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					MoveDynamicObject(fbig1,200.0562,155.4197,1002.0234, 1.5, -1000.0, -1000.0, -1000.0);
      					SetTimer("FBIGATEC1", 7000, 0);
      					format(string, sizeof(string), "* %s apreta el boton y abre la celda Nro. 1", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					MoveDynamicObject(fbig2,200.1218,190.7283,1002.0355, 1.5, -1000.0, -1000.0, -1000.0);
      					SetTimer("FBIGATEC2", 7000, 0);
      					format(string, sizeof(string), "* %s apreta el boton y abre la celda Nro. 2", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case CPRISION:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					ShowPlayerDialog(playerid,CELDA1,DIALOG_STYLE_MSGBOX, "{FFFFFF}> Celda Nro 1 - Seleccione:", "{00E400}Quiere Abrir o Cerrar la celda?", "Abrir", "Cerrar" );
      				}
      				case 1:
      				{
      					ShowPlayerDialog(playerid,CELDA2,DIALOG_STYLE_MSGBOX, "{FFFFFF}> Celda Nro 2 - Seleccione:", "{00E400}Quiere Abrir o Cerrar la celda?", "Abrir", "Cerrar" );
      				}
      				case 2:
      				{
      					ShowPlayerDialog(playerid,CELDA3,DIALOG_STYLE_MSGBOX, "{FFFFFF}> Celda Nro 3 - Seleccione:", "{00E400}Quiere Abrir o Cerrar la celda?", "Abrir", "Cerrar" );
      				}
      			}
      		}
      	}
      	case CELDA1:
      	{
      		if(response)
      		{
      			MoveDynamicObject(prison1,601.87536,857.282714,-95.533393, 0.8, -1000.0, -1000.0, -1000.0);
      			Message(playerid, COLOR_BLUE,"La celda numero uno está abierta.");
      		}
      		else
      		{
      			MoveDynamicObject(prison1,601.875366,857.282714,-91.008117, 0.8, -1000.0, -1000.0, -1000.0);
      			Message(playerid, COLOR_BLUE,"La celda número uno está cerrada.");
      		}
      	}
      	case CELDA2:
      	{
      		if(response)
      		{
      			MoveDynamicObject(prison2,610.680053,857.309631,-95.558395, 0.8, -1000.0, -1000.0, -1000.0);
      			Message(playerid, COLOR_BLUE,"La celda número dos está abierta.");
      		}
      		else
      		{
      			MoveDynamicObject(prison2,610.68005,857.30963,-91.00811, 0.8, -1000.0, -1000.0, -1000.0);
      			Message(playerid, COLOR_BLUE,"La celda número dos está cerrada.");
      		}
      	}
      	case CELDA3:
      	{
      		if(response)
      		{
      			MoveDynamicObject(prison3,619.552978,857.303405,-95.583473, 0.8, -1000.0, -1000.0, -1000.0);
      			Message(playerid, COLOR_BLUE,"La celda número tres está abierta.");
      		}
      		else
      		{
      			MoveDynamicObject(prison3,619.55297,857.30340,-91.00819, 0.8, -1000.0, -1000.0, -1000.0);
      			Message(playerid, COLOR_BLUE,"La celda número tres está cerrada.");
      		}
      	}
      	case TEST_0:{
      		if(response){
      			switch(listitem){
      				case 3:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, exactamente no puedes hacer Metagaming, no puedes mezclar información OOC con IC.");
      					Message(playerid, -1, "{69FF9C}Tampoco puedes hacer emoticones en signos como xD, :), por el chat normal.");
      					ClearChatbox(playerid, 8);
      					new t10[] = "{FFFFFF}Es hacer cosas imposibles en el juego.\nEs matar a cualquier persona por diversión.\nEs Saltar muchas veces para ir más rapido.\nEs decir por el cmd /duda Necesito un Adm.";
      					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{4DE868}¿Que significa PG - PowerGaming?", t10, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					ClearChatbox(playerid, 8);
      					new t10[] = "{FFFFFF}Es hacer cosas imposibles en el juego.\nEs matar a cualquier persona por diversión.\nEs Saltar muchas veces para ir más rapido.\nEs decir por el cmd /duda Necesito un Adm.";
      					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, "{4DE868}¿Que significa PG - PowerGaming?", t10, "OK", "");
      				}
      			}
      		}
      	}
      	case TEST_1:{
      		if(response){
      			switch(listitem){
      				case 0:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, hacer PowerGaming está penado, nunca hagas cosas irreales o ficticias.");
      					ClearChatbox(playerid, 8);
      					new t1[] = "{FFFFFF}Sales corriendo sin ningún rol.\nSaco un arma y los mato.\nMe rindo, levanto las manos (/rendirse).\nLes saludo y pregunto ¿que pasa?.";
      					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{4DE868}Si una persona te apunta con un arma ¿Que harias?", t1, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					ClearChatbox(playerid, 8);
      					new t1[] = "{FFFFFF}Sales corriendo sin ningún rol.\nSaco un arma y los mato.\nMe rindo, levanto las manos (/rendirse).\nLes saludo y pregunto ¿que pasa?.";
      					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, "{4DE868}Si una persona te apunta con un arma ¿Que harias?", t1, "OK", "");
      				}
      			}
      		}
      	}
      	case TEST_2:{
      		if(response){
      			switch(listitem){
      				case 2:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, en la vida real no puedes hacer nada, solo te queda rendirte y rolear.");
      					ClearChatbox(playerid, 8);
      					new t2[] = "{FFFFFF}Matar a un administrador.\nEs matar sin alguna razón.\nSacar un arma en el ayuntamiento.\nReportar a un usuario.";
      					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{4DE868}Que Significa DeathMatch?", t2, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					ClearChatbox(playerid, 8);
      					new t2[] = "{FFFFFF}Matar a un administrador.\nEs matar sin alguna razón.\nSacar un arma en el ayuntamiento.\nReportar a un usuario.";
      					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, "{4DE868}Que Significa DeathMatch?", t2, "OK", "");
      				}
      			}
      		}
      	}
      	case TEST_3:{
      		if(response){
      			switch(listitem){
      				case 1:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, No puedes andar matando por diversión a otros usuarios, está penado.");
      					ClearChatbox(playerid, 8);
      					new t3[] = "{FFFFFF}Es para dudas o preguntas frecuentes.\nEs para reportar personas.\nEs para pedir un skin.\nEs para mandar anuncios.";
      					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{4DE868}Que uso se le da al cmd /new?", t3, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					ClearChatbox(playerid, 8);
      					new t3[] = "{FFFFFF}Es para dudas o preguntas frecuentes.\nEs para reportar personas.\nEs para pedir un skin.\nEs para mandar anuncios.";
      					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, "{4DE868}Que uso se le da al cmd /new?", t3, "OK", "");
      				}
      			}
      		}
      	}
      	case TEST_4:{
      		if(response){
      			switch(listitem){
      				case 0:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, el comando /new, solo es para dudas [FAQ]");
      					ClearChatbox(playerid, 8);
      					new t4[] = "{FFFFFF}Sí puedo estarlo cuando me aburra y no haya que rolear.\nSolo si uso el comando /afk.\nSí, puedo estarlo en cualquier momento.\nSí, me pongo un /yo ((OFF ROL)) y puedo estarlo.";
      					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{4DE868}¿Puedes estar off rol en el servidor?", t4, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					ClearChatbox(playerid, 8);
      					new t4[] = "{FFFFFF}Sí puedo estarlo cuando me aburra y no haya que rolear.\nSolo si uso el comando /afk.\nSí, puedo estarlo en cualquier momento.\nSí, me pongo un /yo ((OFF ROL)) y puedo estarlo.";
      					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, "{4DE868}¿Puedes estar off rol en el servidor?", t4, "OK", "");
      				}
      			}
      		}
      	}
      	case TEST_5:{
      		if(response){
      			switch(listitem){
      				case 1:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, solo puedes estar Off-Rol si usas el comando /afk.");
      					ClearChatbox(playerid, 8);
      					new t5[] = "{FFFFFF}Llamar a un taxi [444] o andar.\nIntentando entrar a cualquier coche para conducirlo.\nPedir que me lleven por cualquier canal OOC.\nAlquilar el coche de un amigo, con acuerdo OOC previo.";
      					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{4DE868}¿Qué debo hacer si tengo que andar una distancia larga?", t5, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					if(FailTuto[playerid] > 5) RepetirTuto(playerid);
      					else{
      						ClearChatbox(playerid, 8);
      						new t5[] = "{FFFFFF}Llamar a un taxi [444] o andar.\nIntentando entrar a cualquier coche para conducirlo.\nPedir que me lleven por cualquier canal OOC.\nAlquilar el coche de un amigo, con acuerdo OOC previo.";
      						ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, "{4DE868}¿Qué debo hacer si tengo que andar una distancia larga?", t5, "OK", "");
      					}
      				}
      			}
      		}
      	}
      	case TEST_6:{
      		if(response){
      			switch(listitem){
      				case 0:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, no puedes pedir a alguien que te lleve a un lugar, debes llamar a un taxi con el comando {FF0000}/telefono");
      					ClearChatbox(playerid, 8);
      					new t5[] = "{FFFFFF}Es golpear a muchas personas.\nEs usar el comando /paja.\nEs vengarte despues de haber muerto en un Rol.\nEs vengarte de la policia cuando te arresta.";
      					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{4DE868}¿Qué Es RevengeKill?", t5, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					if(FailTuto[playerid] > 5) RepetirTuto(playerid);
      					else{
      						ClearChatbox(playerid, 8);
      						new t5[] = "{FFFFFF}Es golpear a muchas personas.\nEs usar el comando /paja.\nEs vengarte despues de haber muerto en un Rol.\nEs vengarte de la policia cuando te arresta.";
      						ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, "{4DE868}¿Qué Es RevengeKill?", t5, "OK", "");
      					}
      				}
      			}
      		}
      	}
      	case TEST_7:{
      		if(response){
      			switch(listitem){
      				case 2:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, tú no puedes vengarte después de haber muerto, hacer eso es penado.");
      					ClearChatbox(playerid, 8);
      					new t5[] = "{FFFFFF}Enviándole mensajes privados.{69FF9C}[/w]\nCreando un anuncio o enviandole SMS.\nCon el comando {FF0000}/duda.\n{FFFFFF}Por mensaje privado vía Foro.";
      					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{4DE868}¿Cuál es la manera correcta de pedir ayuda a un admin?", t5, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					if(FailTuto[playerid] > 5) RepetirTuto(playerid);
      					else{
      						ClearChatbox(playerid, 8);
      						new t5[] = "{FFFFFF}Enviándole mensajes privados.{69FF9C}[/w]\nCreando un anuncio o enviandole SMS.\nCon el comando {FF0000}/duda.\n{FFFFFF}Por mensaje privado vía Foro.";
      						ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, "{4DE868}¿Cuál es la manera correcta de pedir ayuda a un admin?", t5, "OK", "");
      					}
      				}
      			}
      		}
      	}
      	case TEST_8:{
      		if(response){
      			switch(listitem){
      				case 2:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta. Exacto, tú no puedes usar otra forma de buscar a un administrador.");
      					ClearChatbox(playerid, 8);
      					new t5[] = "{FFFFFF}En el chat normal.\n/b /f (Chat OOC)\n/r (radio).\nEn cualquiera, es una palabra normal.";
      					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{4DE868}¿En qué canal se puede decir ''xD''?", t5, "OK", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					if(FailTuto[playerid] > 5) RepetirTuto(playerid);
      					else{
      						ClearChatbox(playerid, 8);
      						new t5[] = "{FFFFFF}En el chat normal.\n/b /f (Chat OOC)\n/r (radio).\nEn cualquiera, es una palabra normal.";
      						ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, "{4DE868}¿En qué canal se puede decir ''xD''?", t5, "OK", "");
      					}
      				}
      			}
      		}
      	}
      	case TEST_9:{
      		if(response){
      			switch(listitem){
      				case 1:{
      					Message(playerid, -1, "{69FF9C}Respuesta Correcta, Si lo haces en un canal IC, sería Metagaming.");
      					format(string, sizeof(string), "{69FF9C}Felicidades! {FF0000}Test finalizado. Puntaje: %d/10", 10-FailTuto[playerid]);
      					Message(playerid, -1, string);
      					FailTuto[playerid] = 0;
      					ClearChatbox(playerid, 8);
      					new lu[] = "{FFFFFF}Has terminado el tutorial, ahora ya puedes empezar a jugar, recuerda respetar las reglas del servidor.";
      					ShowPlayerDialog(playerid, SEL_CITY, DIALOG_STYLE_MSGBOX, "{46FF92} - Tutorial Finalizado", lu, "Ok", "");
      				}
      				default:{
      					Message(playerid, -1, "{FF0000}Respuesta Incorrecta.");
      					FailTuto[playerid] += 1;
      					if(FailTuto[playerid] > 5) RepetirTuto(playerid);
      					else{
      						format(string, sizeof(string), "{69FF9C}Felicidades! {FF0000}Test finalizado. Puntaje: %d/10", 10-FailTuto[playerid]);
      						Message(playerid, -1, string);
      						ClearChatbox(playerid, 8);
      						new lu[] = "{FFFFFF}Has terminado el tutorial, ahora ya puedes empezar a jugar, recuerda respetar las reglas del servidor.";
      						ShowPlayerDialog(playerid, SEL_CITY, DIALOG_STYLE_MSGBOX, "{4DE868}HermandadZero RP - Tutorial Finalizado", lu, "Ok", "");
      					}
      				}
      			}
      		}
      	}
      	case SEL_CITY:{
      		if(response){
      			ClearChatbox(playerid, 20);
      			TutTime[playerid] = 0;
      			new ranmoney = random(30000);
      			PlayerInfo[playerid][pAccount] = ranmoney;
      			Message(playerid, -1, "{018CFE}¡Bienvenido! {FFEAFF}Si tienes cualquier duda no dudes en usar en comando{FF5E00} /duda [Pregunta]");
      			Message(playerid, -1, "{FFFFFF}Si ves algún tipo de antirol, porfavor reportelo usando el comando{FF5E00} /re [id] [Razón]");
      			Message(playerid, -1, "{FFFFFF}Si tienes cualquier otra duda usa el comando{FF5E00} /ayuda");
      			Message(playerid, -1, "{FFFFFF}Para recibir sus stats iniciales use el comando{FF5E00} /recibirstats");
      			gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
      			PlayerInfo[playerid][pReg] = 1;
      			PlayerInfo[playerid][pTut] = 1;
      			Muted[playerid] = 0;
      			SetPosEx(playerid, 1684.79,-2239.39,13.55,0,0,0);
      			OnPlayerUpdateTime(playerid);
      			TogglePlayerControllable(playerid, 1);
      			SetPlayerInterior(playerid,0);
      			SetPlayerVirtualWorld(playerid, 0);
      			SetCameraBehindPlayer(playerid);
      			UpdatePlayerStat(playerid);
      			ClearAnimations(playerid);
      			SetPlayerStats(playerid);
      		}
      	}
      	case TEL_INPUT:
      	{
      		if(response)
      		{
      			if(TEL_INPUT_ID[playerid] == 1)
      			{
      				if(strval(inputtext) > 999999 || strval(inputtext) < 1000)
      				{
      					ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Inserte el número del destino del mensaje\nTeléfono entre 4-6 carácteres", "Enviar", "Cancelar");
      					return 1;
      				}
      				TEL_INPUT_ID[playerid] = 2;
      				TEL_NUMBER[playerid] = strval(inputtext);
      				format(string, sizeof(string), "Telf: %d",TEL_NUMBER[playerid]);
      				Message(playerid, COLOR_GRAD2, string);
      				ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Escriba el texto a enviar", "Enviar", "Cancelar");
      			}
      			else if(TEL_INPUT_ID[playerid] == 2)
      			{
      				if(DetectarSPAM(inputtext) || strlen(inputtext) > 80 || strlen(inputtext) < 1 || strfind(inputtext, "=", true) != -1)
      				{
      					ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Escriba el texto a enviar\nLímite 80 carácteres", "Enviar", "Cancelar");
      					return 1;
      				}
      				if(PlayerInfo[playerid][pMTexto] < 1) return Message(playerid, COLOR_WHITE, "{018CFE}OTECEL: {FFFFFF}Te informamos que no tienes mensajes disponibles, contrata un paquete.");
      				PlayerInfo[playerid][pMTexto] -= 1;
      				format(string, 60, "* %s manda un mensaje de texto.", PlayerName(playerid));
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				Loop(i,MAX_PLAYERS)
      				{
      					if(PlayerInfo[i][pPnumber] == TEL_NUMBER[playerid])
      					{
      						new h,m,s,y,month,d,mtext[12];
      						gettime(h,m,s);
      						getdate(y,month,d);
      						switch(month)
      						{
      							case 1:     mtext = "Enero";
      							case 2:     mtext = "Febrero";
      							case 3:     mtext = "Marzo";
      							case 4:     mtext = "Abril";
      							case 5:     mtext = "Mayo";
      							case 6:     mtext = "Junio";
      							case 7:     mtext = "Julio";
      							case 8:     mtext = "Agosto";
      							case 9:     mtext = "Septiembre";
      							case 10:    mtext = "Octubre";
      							case 11:    mtext = "Noviembre";
      							case 12:    mtext = "Diciembre";
      						}
      						if(strcmp(PlayerInfo[i][pSMS_1], "Vacío", true) == 0)
      						{
      							Message(i, COLOR_WHITE, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (1)");
      							format(string, sizeof(string),"(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext,d,h,m,inputtext,PlayerInfo[playerid][pPnumber]);
      							strmid(PlayerInfo[i][pSMS_1], string, 0, strlen(string), 80);
      						}
      						else if(strcmp(PlayerInfo[i][pSMS_2], "Vacío", true) == 0)
      						{
      							Message(i, COLOR_WHITE, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (2)");
      							format(string, sizeof(string),"(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext,d,h,m,inputtext,PlayerInfo[playerid][pPnumber]);
      							strmid(PlayerInfo[i][pSMS_2], string, 0, strlen(string), 80);
      						}
      						else if(strcmp(PlayerInfo[i][pSMS_3], "Vacío", true) == 0)
      						{
      							Message(i, COLOR_WHITE, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (3)");
      							format(string, sizeof(string),"(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext,d,h,m,inputtext,PlayerInfo[playerid][pPnumber]);
      							strmid(PlayerInfo[i][pSMS_3], string, 0, strlen(string), 80);
      						}
      						else if(strcmp(PlayerInfo[i][pSMS_4], "Vacío", true) == 0)
      						{
      							Message(i, COLOR_WHITE, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (4)");
      							format(string, sizeof(string),"(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext,d,h,m,inputtext,PlayerInfo[playerid][pPnumber]);
      							strmid(PlayerInfo[i][pSMS_4], string, 0, strlen(string), 80);
      						}
      						else if(strcmp(PlayerInfo[i][pSMS_5], "Vacío", true) == 0)
      						{
      							Message(i, COLOR_WHITE, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (5)");
      							format(string, sizeof(string),"(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext,d,h,m,inputtext,PlayerInfo[playerid][pPnumber]);
      							strmid(PlayerInfo[i][pSMS_5], string, 0, strlen(string), 80);
      						}
      						else
      						{
      							Message(i, COLOR_WHITE, "Información: {FF4400}Tienes lleno el buzón de entrada. No recibirás mas mensajes. (5/5)");
      							Message(playerid, COLOR_GRAD2, "Operadora: Este número está apagado o fuera de cobertura");
      						}
      					}
      				}
      			}
      			else if(TEL_INPUT_ID[playerid] == 3)
      			{
      				new phonenumb = strval(inputtext);
      				if(PlayerInfo[playerid][pMinutes] < 1 && phonenumb != 911) return Message(playerid, COLOR_WHITE, "{018CFE}OTECEL: {FFFFFF}Estimado cliente, usted no cuenta con saldo disponible para realizar la llamada.");
      				format(string, sizeof(string), "* %s saca su teléfono.", PlayerName(playerid));
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				SetPlayerAttachedObject(playerid, 0, 18866, 6, 0.03999, 0.00999, 0.00000, -90.00000, 0.00000, 180.00000);
      				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

      				if(phonenumb == 444)
      				{
      					if(TransportDuty[playerid] > 0) return Message(playerid, COLOR_GREY, "¡No puedes llamar a un taxi ahora!");
      					if(TaxiCalled[playerid] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya has llamado un taxi (/cancelar taxi)!");
      					ClearChatbox(playerid, 10);
      					Message(playerid, COLOR_WHITE, "*** {EE9900}Compañía de Taxi {FFFFFF}***");
      					Message(playerid, COLOR_YELLOW2, "{EE9900}Operadora: {FFFFFF}¿ Que servicio necesita ?");
      					Message(playerid, COLOR_YELLOW2, "{EE9900}Operadora: {FFFFFF}Diga \"TAXI\" si necesita servicio de taxi.");
      					Message(playerid, COLOR_YELLOW2, "{EE9900}Operadora: {FFFFFF}Diga \"NO\" para cancelar la llamada.");
      					PlayerInfo[playerid][pMinutes] -= 15;
      					Mobile[playerid] = 445;
      				}
      				else if(phonenumb == 555)
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, COLOR_WHITE, "*** {117799}555 Servicio Mecánico {FFFFFF}***");
      					Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Hola! ¿ Necesita un mecánico ?");
      					Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Recuerde venir al taller si necesita Tuning o arreglos menores!");
      					Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Si necesita asistencia urgente, diga ASISTENCIA.");
      					Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Si quiere anular la llamada diga NO.");
      					PlayerInfo[playerid][pMinutes] -= 15;
      					Mobile[playerid] = 556;
      				}
      				else if(phonenumb == 911)
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, COLOR_WHITE, "*** {004488}911 Servicio de Emergencias {FFFFFF}***");
      					Message(playerid, COLOR_WHITE, "{004488}Operadora: {FFFFFF}Diga el servicio que necesita, gracias.");
      					Message(playerid, COLOR_WHITE, "{004488}Operadora: {FFFFFF}Diga \"Policia\" para contactar con la autoridad.");
      					Message(playerid, COLOR_WHITE, "{004488}Operadora: {FFFFFF}Diga \"SAMUR\" para contactar con los servicios médicos.");
      					Mobile[playerid] = 911;
      				}
      				else if(phonenumb == 111)
      				{
      					new pizzaworkers = 0;
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      						if(IsPlayerConnected(i))
      						{
      							if(PlayerInfo[i][pJob] == 6 && JobDuty[i] == 1)
      							{
      								pizzaworkers++;
      							}
      						}
      					}
      					format(string, sizeof(string), "{E1BB69}%s Necesita Una Pizza. (use {FF0A2F}/AceptarPizza {E1BB69}para aceptar la llamada)", PlayerName(playerid));
      					SendJobMessage(6, -1, string);
      					Message(playerid, -1, "   {FF0A2F}*** {FFFFFF}Pizza Stack Delivery {FF0A2F}***");
      					Message(playerid, COLOR_WHITE, "Operadora: Bueno? Pizza Stack, que desea?");
      					Message(playerid, COLOR_WHITE, "Operadora: Gracias, su pedido fue informado, si no responden intente más tarde.");
      					Message(playerid, COLOR_WHITE, "Operadora: Hasta Luego.");
      					PlayerInfo[playerid][pMinutes] -= 10;
      					PizzaCall = playerid;
      					return 1;
      				}
      				else if(phonenumb == PlayerInfo[playerid][pPnumber])
      				{
      					Message(playerid, COLOR_WHITE, "El número marcado correspode a su dispositivo móvil");
      					return 1;
      				}
      				else if(Mobile[playerid] != 255)
      				{
      					Message(playerid, COLOR_WHITE, "¡Usted está en una llamada!");
      					return 1;
      				}
      				for(new i = 0; i < MAX_PLAYERS; i++)
      				{
      					if(IsPlayerConnected(i))
      					{
      						if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
      						{
      							Mobile[playerid] = i;
      							if(IsPlayerConnected(i))
      							{
      								if(giveplayerid != INVALID_PLAYER_ID)
      								{
      									if(PhoneOnline[i] > 0) return Message(playerid, COLOR_GREY, "¡Fuera de cobertura!");

      									if(Mobile[i] == 255)
      									{
      										format(string, sizeof(string), "{DD1111}iPhone{FFFFFF}: Tu teléfono está sonando #%d, utiliza {DD6611}/contestar", PlayerInfo[playerid][pPnumber]);
      										Message(i, COLOR_WHITE, string);
      										format(string, sizeof(string), "* El teléfono de %s está sonando.", PlayerName(i));
      										ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      										CellTime[playerid] = 1;
      										return 1;
      									}
      								}
      							}
      						}
      					}
      				}
      			}
      		}
      	}
      	case DIA_RENTA:
      	{
      		if(response)
      		{
      			if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_GREY, "¡Necesitas una licencia para poder conducir!");
      			if(HireKey[playerid] != 9999) return SendClientMessage(playerid, COLOR_GREY, "Ya has rentado un vehículo, utiliza /desrentarveh");
      			if(isRentaVehicle(idcar)){
      				new found;
      				for(new i=0; i<MAX_PLAYERS; i++){
      					if(HireKey[i] == idcar){
      						found = 1;
      						SendClientMessage(playerid, COLOR_GRAD2, "Este vehículo ya está rentado");
      						break;
      					}
      				}
      				if(found != 1){
      					if(CheckMoney(playerid, 125))
      					{
      						Bought(playerid, 125);
      						Till(14, 125);
      						SendClientMessage(playerid, COLOR_WHITE, "Utiliza /desrentarveh cuando no lo necesites");
      						HireKey[playerid] = idcar;
      					}
      				}
      			} else RemovePlayerFromVehicle(playerid);
      		} else RemovePlayerFromVehicle(playerid);
      		return 1;
      	}
      	case IPHONE_OPTIONS:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0: {
      					ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Llamar", "{DD1111}iPhone {FFFFFF}- Inserte el teléfono a llamar\n\n\n\t1\t2\t3\n\t4\t5\t6\n\t7\t8\t9\n\t#\t0\t*", "Enviar", "Cancelar");
      					TEL_INPUT_ID[playerid] = 3;
      				}
      				case 1: {
      					ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Inserte el número del destino del mensaje", "Enviar", "Cancelar");
      					TEL_INPUT_ID[playerid] = 1;
      				}
      				case 2: {
      					ShowPlayerDialog(playerid, TEL_MSGBOX, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Buzón de entrada", "- \tBuzón de entrada 1\n- \tBuzón de entrada 2\n- \tBuzón de entrada 3\n- \tBuzón de entrada 4\n- \tBuzón de entrada 5", "Ver", "Borrar");
      				}
      				case 3: {
      					ShowPlayerDialog(playerid, IPHONE_AGENDA, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Organizador", "- \t\tVer Nota\n- \t\tCrear Nota\n- \t\tBorrar Nota", "Aceptar", "Salir");
      				}
      				case 4: {
      					new strsald[256];
      					format(strsald, sizeof(strsald), "{FFFFFF}Estimado cliente, usted cuenta con un saldo de $%d para llamadas a telefono celular\n\t\tEl saldo de su paquete de mensajes escritos es de %d\n\n\t\t\t\t{018CFE}Gracias por utilizar nuestros servicios!", PlayerInfo[playerid][pMinutes]/10, PlayerInfo[playerid][pMTexto]);
      					ShowPlayerDialog(playerid, 312, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Consulta de Saldo", strsald, "Ok", "");
      				}
      				case 5: {
      					Dialog_Show(playerid, Dialog:telServicios);
      				}
      			}
      		}
      	}
      	case TEL_MSGBOX:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, 0xFF0000FF, "iPhone ======= Buzón 1 =======================================================");
      					Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pSMS_1]);
      				}
      				case 1:
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, 0xFF0000FF, "iPhone ======= Buzón 2 =======================================================");
      					Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pSMS_2]);
      				}
      				case 2:
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, 0xFF0000FF, "iPhone ======= Buzón 3 =======================================================");
      					Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pSMS_3]);
      				}
      				case 3:
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, 0xFF0000FF, "iPhone ======= Buzón 4 =======================================================");
      					Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pSMS_4]);
      				}
      				case 4:
      				{
      					ClearChatbox(playerid, 10);
      					Message(playerid, 0xFF0000FF, "iPhone ======= Buzón 5 =======================================================");
      					Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pSMS_5]);
      				}
      			}
      		}
      		else
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					strmid(PlayerInfo[playerid][pSMS_1], "Vacío", 0, strlen("Vacío"), 32);
      					Message(playerid, COLOR_GRAD2, "Mensaje borrado.");
      				}
      				case 1:
      				{
      					strmid(PlayerInfo[playerid][pSMS_2], "Vacío", 0, strlen("Vacío"), 32);
      					Message(playerid, COLOR_GRAD2, "Mensaje borrado.");
      				}
      				case 2:
      				{
      					strmid(PlayerInfo[playerid][pSMS_3], "Vacío", 0, strlen("Vacío"), 32);
      					Message(playerid, COLOR_GRAD2, "Mensaje borrado.");
      				}
      				case 3:
      				{
      					strmid(PlayerInfo[playerid][pSMS_4], "Vacío", 0, strlen("Vacío"), 32);
      					Message(playerid, COLOR_GRAD2, "Mensaje borrado.");
      				}
      				case 4:
      				{
      					strmid(PlayerInfo[playerid][pSMS_5], "Vacío", 0, strlen("Vacío"), 32);
      					Message(playerid, COLOR_GRAD2, "Mensaje borrado.");
      				}
      			}
      		}
      	}
      	case IPHONE_AGENDA:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					ShowPlayerDialog(playerid, IPHONE_AGENDA_VB, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Visualizador de Notas", "- \t\tNota 1\n- \t\tNota 2\n- \t\tNota 3\n- \t\tNota 4\n- \t\tNota 5", "Ver", "Salir");
      					TEL_INPUT_ID[playerid] = 5;
      				}
      				case 1:
      				{
      					ShowPlayerDialog(playerid, IPHONE_AGENDA_ESCRIBIR, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Crear nota", "{DD1111}iPhone {FFFFFF}- Escriba su nota", "Aceptar", "Salir");
      				}
      				case 2:
      				{
      					ShowPlayerDialog(playerid, IPHONE_AGENDA_VB, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Borrador de Notas", "- \t\tNota 1\n- \t\tNota 2\n- \t\tNota 3\n- \t\tNota 4\n- \t\tNota 5", "Borrar", "Salir");
      					TEL_INPUT_ID[playerid] = 0;
      				}
      			}
      		}
      	}
      	case IPHONE_AGENDA_ESCRIBIR:
      	{
      		if(response)
      		{
      			if(StringOther(playerid, inputtext) == 1)
      			{
      				if(strcmp(PlayerInfo[playerid][pNote1],"None",true) == 0)
      				{
      					strmid(PlayerInfo[playerid][pNote1], inputtext, 0, strlen(inputtext), 80);
      					format(string, sizeof(string), "Nota1: %s", PlayerInfo[playerid][pNote1]);
      					Message(playerid, COLOR_GRAD2, string);
      				}
      				else if(strcmp(PlayerInfo[playerid][pNote2],"None",true) == 0)
      				{
      					strmid(PlayerInfo[playerid][pNote2], inputtext, 0, strlen(inputtext), 80);
      					format(string, sizeof(string), "Nota2: %s", PlayerInfo[playerid][pNote2]);
      					Message(playerid, COLOR_GRAD2, string);
      				}
      				else if(strcmp(PlayerInfo[playerid][pNote3],"None",true) == 0)
      				{
      					strmid(PlayerInfo[playerid][pNote3], inputtext, 0, strlen(inputtext), 80);
      					format(string, sizeof(string), "Nota3: %s", PlayerInfo[playerid][pNote3]);
      					Message(playerid, COLOR_GRAD2, string);
      				}
      				else if(strcmp(PlayerInfo[playerid][pNote4],"None",true) == 0)
      				{
      					strmid(PlayerInfo[playerid][pNote4], inputtext, 0, strlen(inputtext), 80);
      					format(string, sizeof(string), "Nota4: %s", PlayerInfo[playerid][pNote4]);
      					Message(playerid, COLOR_GRAD2, string);
      				}
      				else if(strcmp(PlayerInfo[playerid][pNote5],"None",true) == 0)
      				{
      					strmid(PlayerInfo[playerid][pNote5], inputtext, 0, strlen(inputtext), 80);
      					format(string, sizeof(string), "Nota5: %s", PlayerInfo[playerid][pNote5]);
      					Message(playerid, COLOR_GRAD2, string);
      				}
      				else Message(playerid, COLOR_GRAD2, "No tiene páginas libres en su agenda.");
      			}
      			else Message(playerid, COLOR_GRAD2, "* Has utilizado carácteres no permitidos.");
      		}
      	}

      	case IPHONE_AGENDA_VB:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(TEL_INPUT_ID[playerid] == 5)
      					{
      						ClearChatbox(playerid, 10);
      						Message(playerid, 0xFF0000FF, "iPhone ======= Nota 1 =======================================================");
      						Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pNote1]);
      					}
      					else
      					{
      						strmid(PlayerInfo[playerid][pNote1], "None", 0, strlen("None"), 80);
      						Message(playerid, COLOR_GRAD2, "Nota 1 borrada.");
      					}
      				}
      				case 1:
      				{
      					if(TEL_INPUT_ID[playerid] == 5)
      					{
      						ClearChatbox(playerid, 10);
      						Message(playerid, 0xFF0000FF, "iPhone ======= Nota 2 =======================================================");
      						Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pNote2]);
      					}
      					else
      					{
      						strmid(PlayerInfo[playerid][pNote2], "None", 0, strlen("None"), 80);
      						Message(playerid, COLOR_GRAD2, "Nota 2 borrada.");
      					}
      				}
      				case 2:
      				{
      					if(TEL_INPUT_ID[playerid] == 5)
      					{
      						ClearChatbox(playerid, 10);
      						Message(playerid, 0xFF0000FF, "iPhone ======= Nota 3 =======================================================");
      						Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pNote3]);
      					}
      					else
      					{
      						strmid(PlayerInfo[playerid][pNote3], "None", 0, strlen("None"), 80);
      						Message(playerid, COLOR_GRAD2, "Nota 3 borrada.");
      					}
      				}
      				case 3:
      				{
      					if(TEL_INPUT_ID[playerid] == 5)
      					{
      						ClearChatbox(playerid, 10);
      						Message(playerid, 0xFF0000FF, "iPhone ======= Nota 4 =======================================================");
      						Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pNote4]);
      					}
      					else
      					{
      						strmid(PlayerInfo[playerid][pNote4], "None", 0, strlen("None"), 80);
      						Message(playerid, COLOR_GRAD2, "Nota 4 borrada.");
      					}
      				}
      				case 4:
      				{
      					if(TEL_INPUT_ID[playerid] == 5)
      					{
      						ClearChatbox(playerid, 10);
      						Message(playerid, 0xFF0000FF, "iPhone ======= Nota 5 =======================================================");
      						Message(playerid, COLOR_GRAD2, PlayerInfo[playerid][pNote5]);
      					}
      					else
      					{
      						strmid(PlayerInfo[playerid][pNote5], "None", 0, strlen("None"), 80);
      						Message(playerid, COLOR_GRAD2, "Nota 5 borrada.");
      					}
      				}
      			}
      		}
      	}


      	case DRUGS_DIALOG:
      	{
      		if(response)
      		{
      			if(strval(inputtext) > GetPlayerMoney(playerid)) return Message(playerid, COLOR_GRAD2, "No tienes esa cantidad!");
      			new drug[12];
      			switch(NarcoSellArm[playerid]){
      				case 1:		drug = "Speed";
      				case 2:		drug = "Extasis";
      				case 3:		drug = "Ritalin";
      				case 4:		drug = "Heroina";
      				case 5:		drug = "Marihuana";
      			}
      			NarcoSellPrice[playerid] = strval(inputtext);
      			BuyNarco[BuyNarco[playerid]] = playerid;
      			format(string, sizeof(string), "\tDEMANDA DE DROGAS (%s)\t\n Drogas: %d - Tipo: %s - Precio: %d$",PlayerName(playerid),NarcoSellAmmo[playerid],drug,NarcoSellPrice[playerid]);
      			ShowPlayerDialog(BuyNarco[playerid], CONFIRM_DRUGS_DIALOG, DIALOG_STYLE_MSGBOX, "Comprar drogas", string, "Aceptar", "Cancelar");
      		}
      	}
      	case CONFIRM_DRUGS_DIALOG:
      	{
      		if(response)
      		{
      			if(NarcoSellPrice[BuyNarco[playerid]] > GetPlayerMoney(BuyNarco[playerid])) return Message(playerid, COLOR_GRAD2, "No tiene esa cantidad!");

      			new drug[12];
      			switch(NarcoSellArm[BuyNarco[playerid]]){
      				case 1:		drug = "Speed";
      				case 2:		drug = "Extasis";
      				case 3:		drug = "Ritalin";
      				case 4:		drug = "Heroina";
      				case 5:		drug = "Marihuana";
      			}
      			format(string, sizeof(string), "* %s compró a %s %d gramos de %s por %d$", PlayerName(BuyNarco[playerid]), PlayerName(playerid),NarcoSellAmmo[BuyNarco[playerid]],drug,NarcoSellPrice[BuyNarco[playerid]]);
      			Message(playerid, COLOR_WHITE, string);
      			Message(BuyNarco[playerid], COLOR_WHITE, string);

      			Bought(BuyNarco[playerid], NarcoSellPrice[BuyNarco[playerid]]);
      			Earn(playerid, NarcoSellPrice[BuyNarco[playerid]]);

      			switch(NarcoSellArm[BuyNarco[playerid]]){
      				case 1:	{PlayerInfo[BuyNarco[playerid]][pSpeed] += NarcoSellAmmo[BuyNarco[playerid]]; PlayerInfo[playerid][pSpeed] -= NarcoSellAmmo[BuyNarco[playerid]];}
      				case 2:	{PlayerInfo[BuyNarco[playerid]][pEctasy] += NarcoSellAmmo[BuyNarco[playerid]]; PlayerInfo[playerid][pEctasy] -= NarcoSellAmmo[BuyNarco[playerid]];}
      				case 3:	{PlayerInfo[BuyNarco[playerid]][pRitalin] += NarcoSellAmmo[BuyNarco[playerid]]; PlayerInfo[playerid][pRitalin] -= NarcoSellAmmo[BuyNarco[playerid]];}
      				case 4:	{PlayerInfo[BuyNarco[playerid]][pHeroina] += NarcoSellAmmo[BuyNarco[playerid]]; PlayerInfo[playerid][pHeroina] -= NarcoSellAmmo[BuyNarco[playerid]];}
      				case 5:	{PlayerInfo[BuyNarco[playerid]][pMarihuana] += NarcoSellAmmo[BuyNarco[playerid]]; PlayerInfo[playerid][pMarihuana] -= NarcoSellAmmo[BuyNarco[playerid]];}
      			}
      			BuyNarco[playerid] = 0;
      			BuyNarco[BuyNarco[playerid]] = 0;

      			NarcoSellPrice[playerid] = 0;
      			NarcoSellPrice[BuyNarco[playerid]] = 0;

      			NarcoSellArm[playerid] = 0;
      			NarcoSellArm[BuyNarco[playerid]] = 0;

      			NarcoSellAmmo[playerid] = 0;
      			NarcoSellAmmo[BuyNarco[playerid]] = 0;
      		}
      	}
      	case DIALOG_HIT:
      	{
      		if(response)
      		{
      			if(strval(inputtext) < 1 || strval(inputtext) > 299) return Message(playerid, COLOR_GRAD2, "ERROR! Skin de 1 a 299");
      			if(CheckMoney(playerid,200))
      			{
      				PlayerInfo[playerid][pChar] = strval(inputtext);
      				SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
      			}
      			return 1;
      		}
      	}
      	case EQUIPO_CORTEJUDICIAL:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 147); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone el uniforme de Abogado.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 227); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone el uniforme de Fiscal.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:
      				{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 187); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone el uniforme de Juez.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:
      				{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 228); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone el uniforme de Juez Supremo.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_HITMAN:
      	{
      		if(response)
      		{
      			ResetPlayerWeapons(playerid);
      			switch(listitem)
      			{
      				case 0:
      				{
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 23, 300);
      				}
      				case 1:
      				{
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 34, 300);
      				}
      				case 2:
      				{
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 24, 300);
      				}
      				case 3:
      				{
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      				}
      			}
      		}
      	}
      	case GOOGLE:
      	{
      		if(response)
      		{
      			Bought(playerid, 3);
      			Till(12, 3);
      			if(strfind(inputtext, "Concesionario", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_BLUE, "www.mundoauto.com - Todo tipo de vehículos a tu alcanze!");
      				SetPlayerCheckpoint(playerid, 1654.5254,-1655.7502,22.5156, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Ropa", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_RED2, "www.victim.eu - Llévalo con orgullo");
      				SetPlayerCheckpoint(playerid, 460.6988,-1501.1395,31.0564, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Trabajo", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_GREEN, "Trabajo de disponibles en: www.amantedelparo.org");
      				Message(playerid, COLOR_GRAD2, "- Vendedor moviles");
      				Message(playerid, COLOR_GRAD2, "- Barrendero");
      				Message(playerid, COLOR_GRAD2, "- Conductor de Tren");
      				Message(playerid, COLOR_GRAD2, "- Piloto");
      				Message(playerid, COLOR_GRAD2, "- Ladrón");
      				Message(playerid, COLOR_GRAD2, "- Pizzero");
      				Message(playerid, COLOR_GRAD2, "- Pescador");
      				Message(playerid, COLOR_GRAD2, "- Camionero");
      				return 1;
      			}
      			else if(strfind(inputtext, "Vendedor", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				SetPlayerCheckpoint(playerid, 994.3785,-1296.4718,13.5469, 10.0);
      				return 1;
      			}
      			else if(strfind(inputtext, "Pizzero", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				SetPlayerCheckpoint(playerid, 2104.5273,-1806.6123,13.5547, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Camionero", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Barrendero", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				SetPlayerCheckpoint(playerid, 1616.0780,-1896.7744,13.5490, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Piloto", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				SetPlayerCheckpoint(playerid, 1957.3217,-2183.6399,13.5469, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Tren", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				SetPlayerCheckpoint(playerid, 1684.6482,-1944.7058,13.5469, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Ladron", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				SetPlayerCheckpoint(playerid, 2275.2427,-1105.6196,37.9766, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Renta", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_BLUE, "www.mecanico-ls.ls - Reparacion y alquiler de vehículos");
      				SetPlayerCheckpoint(playerid, 1597.0762,-2194.6619,13.3750, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Banco", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_GREEN, "www.dowjones.org - Banco central de Los Santos");
      				SetPlayerCheckpoint(playerid, 300.0895,-1611.6455,33.1248, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Biblioteca", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_GREEN, "www.bookandstudy.org - Biblioteca de Los Santos");
      				SetPlayerCheckpoint(playerid, 1546.6545,-1097.5780,25.0625, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      			else if(strfind(inputtext, "Ammunation", true) != -1)
      			{
      				ClearChatbox(playerid,10);
      				Message(playerid, COLOR_RED, "www.armas-legales.com - Ammunation Roosevelt");
      				SetPlayerCheckpoint(playerid, 1368.4303,-1280.0046,13.5469, 10.0);
      				Message(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
      				return 1;
      			}
      		}
      	}
      	case BRILLO_GAFAS:
      	{
      		if(response)
      		{
      			if(!strcmp(inputtext, "Luminoso", true))
      			{
      				TextDrawHideForPlayer(playerid, SunGlasses);
      				TextDrawBoxColor(SunGlasses, 0x00000025);
      				TextDrawShowForPlayer(playerid, SunGlasses);
      			}
      			if(!strcmp(inputtext, "Normal", true))
      			{
      				TextDrawHideForPlayer(playerid, SunGlasses);
      				TextDrawBoxColor(SunGlasses, 0x00000040);
      				TextDrawShowForPlayer(playerid, SunGlasses);
      			}
      			if(!strcmp(inputtext, "Oscuro", true))
      			{
      				TextDrawHideForPlayer(playerid, SunGlasses);
      				TextDrawBoxColor(SunGlasses, 0x00000055);
      				TextDrawShowForPlayer(playerid, SunGlasses);
      			}
      			if(!strcmp(inputtext, "MuyOscuro", true))
      			{
      				TextDrawHideForPlayer(playerid, SunGlasses);
      				TextDrawBoxColor(SunGlasses, 0x00000065);
      				TextDrawShowForPlayer(playerid, SunGlasses);
      			}
      		}
      	}
      	case PETITION_DIALOG:
      	{
      		if(response)
      		{
      			format(string, sizeof(string), "* %s acepta una petición.", PlayerName(playerid));
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      			if(Petition_ID[playerid] == 1)
      			{
      				format(string, sizeof(string), "* %s aceptó tu entrevista", PlayerName(playerid));
      				Message(LiveOffer[playerid], 0x00FFFFFF, string);
      				format(string, sizeof(string), "* Aceptaste la entrevista de %s", PlayerName(LiveOffer[playerid]));
      				Message(playerid, 0x00FFFFFF, string);
      				Message(playerid, COLOR_YELLOW, "* Utiliza (/c) para hablar fuera de antena. Y (/centrevista) para salir de la entrevista.");
      				Message(LiveOffer[playerid], COLOR_YELLOW, "* Utiliza (/c) para hablar fuera de antena. Y (/centrevista) para cancelar la entrevista.");
      				TalkingLive[playerid] = 1;
      				TalkingLive[LiveOffer[playerid]] = 1;
      				Facturing[playerid] = 0;
      				Petition_ID[playerid] = 0;
      			}
      			else if(Petition_ID[playerid] == 2)
      			{
      				if(CheckMoney(playerid,NarcoSellPrice[playerid]))
      				{
      					new gunname[12];
      					GetWeaponName(NarcoSellArm[playerid], gunname, sizeof(gunname));
      					format(string, sizeof(string), "* %s compra a %s una %s con %d balas por %d",PlayerName(playerid), PlayerName(BuyNarco[playerid]),gunname,NarcoSellAmmo[playerid],NarcoSellPrice[playerid]);
      					Message(playerid, COLOR_WHITE, string);
      					Message(BuyNarco[playerid], COLOR_WHITE, string);
      					SafeGivePlayerWeapon(playerid,NarcoSellArm[playerid],NarcoSellAmmo[playerid]);
      					SafeGivePlayerWeapon(BuyNarco[playerid],NarcoSellArm[playerid],-NarcoSellAmmo[playerid]);
      					Bought(playerid, NarcoSellPrice[playerid]);
      					Earn(BuyNarco[playerid], NarcoSellPrice[playerid]);
      					Facturing[playerid] = 0;
      					Petition_ID[playerid] = 0;
      					BuyNarco[playerid] = 999;
      					NarcoSellPrice[playerid] = 0;
      					NarcoSellArm[playerid] = 0;
      					NarcoSellAmmo[playerid] = 0;
      				}
      				else
      				{
      					Message(playerid, COLOR_GRAD2, "No tienes dinero suficiente!");
      					Message(BuyNarco[playerid], COLOR_GRAD2, "El comprador no tiene suficiente dinero!");
      					BuyNarco[playerid] = 999;
      					NarcoSellPrice[playerid] = 0;
      					NarcoSellArm[playerid] = 0;
      					NarcoSellAmmo[playerid] = 0;
      					Facturing[playerid] = 0;
      					Petition_ID[playerid] = 0;
      					return 1;
      				}
      			}
      			else if(Petition_ID[playerid] == 3)
      			{
      				Message(playerid, COLOR_WHITE, "¡Felicidades! Tienes nuevo vehículo, utiliza /papeles");
      				Message(OwnableCarOffer[playerid], COLOR_WHITE, "Has vendido tu vehículo!");
      				RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
      				Bought(playerid, OwnableCarPrice[playerid]);
      				Earn(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
      				PlayerInfo[playerid][pPcarkey] = OwnableCarID[playerid];
      				PlayerInfo[playerid][pTimeCar] = gettime() + 1296000;
      				PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = 9999;
      				PlayerInfo[OwnableCarOffer[playerid]][pTimeCar] = 0;
      				CarInfo[OwnableCarID[playerid]][cVehTime] = gettime() + 1296000;
      				strmid(CarInfo[OwnableCarID[playerid]][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 999);
      				Petition_ID[playerid] = 0;
      				Facturing[playerid] = 0;
      				OwnableCarOffer[playerid] = 999;
      				OwnableCarID[playerid] = 999;
      				OwnableCarPrice[playerid] = 0;
      				UpdateCars();
      			}
      			else if(Petition_ID[playerid] == 4)
      			{
      				Message(playerid, COLOR_WHITE, "¡Felicidades! Tienes nuevo vehículo, utiliza /papeles2");
      				Message(OwnableCarOffer[playerid], COLOR_WHITE, "Has vendido tu vehículo!");
      				RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
      				Bought(playerid, OwnableCarPrice[playerid]);
      				Earn(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
      				PlayerInfo[playerid][pPcarkey2] = OwnableCarID[playerid];
      				PlayerInfo[playerid][pTimeCar2] = gettime() + 1296000;
      				PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = 9999;
      				PlayerInfo[OwnableCarOffer[playerid]][pTimeCar2] = 0;
      				CarInfo[OwnableCarID[playerid]][cVehTime] = gettime() + 1296000;
      				strmid(CarInfo[OwnableCarID[playerid]][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 999);
      				Petition_ID[playerid] = 0;
      				Facturing[playerid] = 0;
      				OwnableCarOffer[playerid] = 999;
      				OwnableCarID[playerid] = 999;
      				OwnableCarPrice[playerid] = 0;
      				UpdateCars();
      			}
      		}
      		else
      		{
      			format(string, sizeof(string), "* %s rechaza una petición.", PlayerName(playerid));
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      			if(Petition_ID[playerid] == 1)
      			{
      				format(string, sizeof(string), "* %s rechazó tu entrevista. Utiliza (/centrevista) para terminar la entrevista.", PlayerName(playerid));
      				Message(LiveOffer[playerid], 0x00FFFFFF, string);
      				format(string, sizeof(string), "* Rechazaste la entrevista de %s", PlayerName(LiveOffer[playerid]));
      				Message(playerid, 0x00FFFFFF, string);
      				Facturing[playerid] = 0;
      				Petition_ID[playerid] = 0;
      			}
      			else if(Petition_ID[playerid] == 2)
      			{
      				format(string, sizeof(string), "* %s rechazó comprarte el arma.",PlayerName(playerid));
      				Message(BuyNarco[playerid], COLOR_WHITE, string);
      				BuyNarco[playerid] = 999;
      				NarcoSellPrice[playerid] = 0;
      				NarcoSellArm[playerid] = 0;
      				NarcoSellAmmo[playerid] = 0;
      				Facturing[playerid] = 0;
      				Petition_ID[playerid] = 0;
      			}
      			else if(Petition_ID[playerid] == 3)
      			{
      				format(string, sizeof(string), "* %s rechazó comprarte el vehículo.",PlayerName(playerid));
      				Message(OwnableCarOffer[playerid], COLOR_WHITE, string);
      				Petition_ID[playerid] = 0;
      				Facturing[playerid] = 0;
      				OwnableCarOffer[playerid] = 999;
      				OwnableCarID[playerid] = 999;
      				OwnableCarPrice[playerid] = 0;
      			}
      			else if(Petition_ID[playerid] == 4)
      			{
      				format(string, sizeof(string), "* %s rechazó comprarte el vehículo.",PlayerName(playerid));
      				Message(OwnableCarOffer[playerid], COLOR_WHITE, string);
      				Petition_ID[playerid] = 0;
      				Facturing[playerid] = 0;
      				OwnableCarOffer[playerid] = 999;
      				OwnableCarID[playerid] = 999;
      				OwnableCarPrice[playerid] = 0;
      			}
      		}
      	}
      	case DIALOG_SO:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Ayudante.", PlayerName(playerid), playerid);
      					ABroadCast(0xEBBDA3FF, string, 1);
      					PlayerSol[playerid] = 1;
      					Message(playerid, -1, "{1AFF2A}HZ-RP{FFFFFF}: En breve un Ayudante le dará soporte");
      				}
      				case 1:
      				{
      					format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Moderador.", PlayerName(playerid), playerid);
      					ABroadCast(0xEBBDA3FF, string, 1);
      					PlayerSol[playerid] = 1;
      					Message(playerid, -1, "{1AFF2A}HZ-RP{FFFFFF}: En breve un moderador le dará soporte");
      				}
      				case 2:
      				{
      					format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Administrador.", PlayerName(playerid), playerid);
      					ABroadCast(0xEBBDA3FF, string, 1);
      					PlayerSol[playerid] = 1;
      					Message(playerid, -1, "{1AFF2A}HZ-RP{FFFFFF}: En breve un Administrador le dará soporte");
      				}
      				case 3:
      				{
      					format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Técnico [2012].", PlayerName(playerid), playerid);
      					ABroadCast(0xEBBDA3FF, string, 1);
      					PlayerSol[playerid] = 1;
      					Message(playerid, -1, "{1AFF2A}HZ-RP{FFFFFF}: En breve un Técnico le brindará ayuda en lo que necesite.");
      				}
      			}
      		}
      	}
      	case DLOGIN:
      	{
      		if (response)
      		{
      			if(isnull(inputtext))
      			{
      				ShowLoginDialog(playerid,DLOGIN);
      				return 1;
      			}
      			new string2[128], PlayerPass[32], playername2[MAX_PLAYER_NAME];
      			GetPlayerName(playerid, playername2, sizeof(playername2));
      			format(string2, sizeof(string2), "users/%s.ini", playername2);
      			INI_ParseFile(string2, "GetPlayerPass", .bExtra = true,  .extra = playerid);
      			GetPVarString(playerid, "pPassword", PlayerPass, 32);
      			if(!strcmp(PlayerPass, inputtext))
      			{
      				format(string2, sizeof(string2), "users/%s.ini", playername2);
      				INI_ParseFile(string2, "LoadUser", false, true, playerid, true, false );
      				OnPlayerLogin(playerid);
      			}
      			else
      			{
      				ClearChatbox(playerid, 10);
      				ShowLoginDialog(playerid,DLOGIN);
      				Message(playerid, COLOR_WHITE, "Contraseña {DD1111}INCORRECTA");
      				gPlayerLogTries[playerid] += 1;
      				if(gPlayerLogTries[playerid] == 4) { Kick(playerid); }
      			}
      		}
      		else
      		{
      			Kick(playerid);
      		}
      		return 1;
      	}
      	case DREGISTER:
      	{
      		if (response)
      		{
      			if(strlen(inputtext) > 18)
      			{
      				Message(playerid, COLOR_GRAD2, "¡Contraseña con un máximo de 18 carácteres!");
      				ShowRegisterDialog(playerid,DREGISTER);
      				return 1;
      			}
      			if(isnull(inputtext))
      			{
      				ShowRegisterDialog(playerid,DREGISTER);
      				return 1;
      			}
      			OnPlayerRegister(playerid,inputtext);
      			ShowLoginDialog(playerid,DLOGIN);
      		}
      		else
      		{
      			Kick(playerid);
      		}
      		return 1;
      	}
      	case DIALOG_REG_MSN:
      	{
      		if(response)
      		{
      			new str[2] = "@";
      			if(strfind(inputtext, str, true) != -1 && strfind(inputtext, "=", true) == -1)
      			{
      				strmid(PlayerInfo[playerid][pMSN], inputtext, 0, strlen(inputtext), 48);
      				format(string,sizeof(string),"¿ Confirmas tu e-mail %s ?",PlayerInfo[playerid][pMSN]);
      				ShowPlayerDialog(playerid, DIALOG_REG_MSNC, DIALOG_STYLE_MSGBOX, "Información", string, "Confirmar", "Cancelar");
      			} else return ShowPlayerDialog(playerid,DIALOG_REG_MSN,DIALOG_STYLE_INPUT,"Formato Inválido","Has insertado un formato inválido \n Ej: tuemail@hotmail.com","Registrar","Cancelar");
      		} else return ShowPlayerDialog(playerid,DIALOG_REG_MSN,DIALOG_STYLE_INPUT,"Rellena tus datos","Para poder jugar debes registrar tu e-mail","Registrar","Cancelar");
      	}
      	case DIALOG_REG_MSNC:
      	{
      		if(response)
      		{
      			ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{00DD00}Fin del registro",   \
      				"{FFFFFF}Información previa al tutorial:\n\n\
      				En el tutorial puedes pasar de página cuando tu desees.\n \
      				Lee con mucha atención el tutorial para evitar dudas obvias del servidor.\n\n \
      				Utiliza la tecla ESPACIO (sprint, correr) para pasar de concepto/página.\n \
      				Utiliza la tecla C (crouch, agacharse) para comenzar de nuevo el tutorial.\n\n\
      				\t\t\t¿ Listo para ver ver el tutorial ?"	,"Ver","");
      			return 1;
      		}
      		else
      		{
      			ShowPlayerDialog(playerid,DIALOG_REG_MSN,DIALOG_STYLE_INPUT,"Rellena tus datos","Para poder jugar debes registrar tu e-mail","Registrar","Cancelar");
      		}
      	}
      	case DIALOG_REG_TUT:
      	{
      		if(response)
      		{
      			ClearChatbox(playerid, 10);
      			Message(playerid, COLOR_YELLOW2, "Fin del registro. Ahora verás el tutorial, si sabes rolear puedes usar /saltartutorial");
      			TutTime[playerid] = 5;
      			TutorialStep_Forward(playerid);
      			SetPlayerVirtualWorld(playerid, 9);
      		}
      	}
      	case UMBRELLA7_DIALOG:
      	{
      		if(response)
      		{
      			new servicio[128];
      			strmid(servicio, inputtext, 0, strlen(inputtext), 255);
      			format(string, sizeof(string), "* Petición de Servicio: %s", inputtext);
      			SendRadioMessage(8,TEAM_RADIO_COLOR,string);
      			format(string, sizeof(string), "* Cliente: %s - Contacto: %d", PlayerName(playerid), contacto);
      			SendRadioMessage(8,TEAM_RADIO_COLOR,string);
      			Message(playerid, COLOR_WHITE, "* Su petición de servicio ha sido enviada. Porfavor, espere la respuesta de un agente.");
      			Message(playerid, COLOR_WHITE, "* La operación puede tardar diversos minutos. Su teléfono y nombre quedaron registrados.");
      		}
      	}
      	case U7_OPEN:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(Revisado[playerid] == 1 || Moteros(playerid))
      					{
      						SetPlayerChatBubble(GetClosestNPC(playerid,5), "Adiós!", COLOR_WHITE, 25.0, 5000);
      						ProxDetector(40.0, playerid, "Agente Richard: Adiós",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      						MoveDynamicObject(u7d3, 247.81130981445, 110.8671875, 1002.21875, 0.5, -1000.0, -1000.0, -1000.0);
      					}
      					else
      					{
      						SetPlayerChatBubble(GetClosestNPC(playerid,5), "Tendrías que estar a fuera!", COLOR_WHITE, 25.0, 5000);
      						ProxDetector(40.0, playerid, "Agente Richard: Tendrías que estar a fuera!",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      					}
      				}
      				case 1:
      				{
      					if(Moteros(playerid))
      					{
      						SetPlayerChatBubble(GetClosestNPC(playerid,5), "La policía llegará en breve!", COLOR_WHITE, 25.0, 5000);
      						ProxDetector(40.0, playerid, "Agente Richard: La policía llegará en breve! Sálvese quien pueda!",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      						MoveDynamicObject(u7d3, 247.81130981445, 110.8671875, 1002.21875, 0.5, -1000.0, -1000.0, -1000.0);
      						SendRadioMessage(1, TEAM_BLUE_COLOR, "La Empresa de Investigacion está siendo asaltada!");
      					} else return ProxDetector(40.0, playerid, "Agente Richard: Ati no te voy a obedecer!",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      				}
      			}
      		}
      	}
      	case EQUIPO_PIZZA:
      	{
      		if(response)
      		{
      			ResetPlayerWeapons(playerid);
      			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
      			switch (listitem)
      			{
      				case 0:
      				{
      					Skin(playerid, 155);
      					format(string, sizeof(string), "* %s se viste con su ropa de pizzero.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					Skin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_FBI:{
      		if(response){
      			ResetPlayerWeapons(playerid);
      			switch (listitem){
      				case 0:{
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 24, 300);
      					SafeGivePlayerWeapon(playerid, 41, 1000);
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 286); }
      					if(PlayerInfo[playerid][pSex] == 2) { Skin(playerid, 12); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone el uniforme de FBI.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:{
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 17, 20);
      					SafeGivePlayerWeapon(playerid, 29, 1000);
      					SafeGivePlayerWeapon(playerid, 41, 1250);
      					SafeGivePlayerWeapon(playerid, 27, 1850);
      					SafeGivePlayerWeapon(playerid, 34, 1850);
      					SafeGivePlayerWeapon(playerid, 31, 1250);
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 286); }
      					if(PlayerInfo[playerid][pSex] == 2) { Skin(playerid, 12); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone el uniforme de FBI.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:{
      					if(PlayerInfo[playerid][pRank] < 4) return Message(playerid, COLOR_GRAD2, "¡No puedes utilizar esta opción!");
      					SafeGivePlayerWeapon(playerid, 43, 200);
      					SafeGivePlayerWeapon(playerid, 24, 300);
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 286); }
      					if(PlayerInfo[playerid][pSex] == 2) { Skin(playerid, 12); }
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se pone su uniforme de Criminalista.", PlayerName(playerid));
      					ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 137); }
      					if(PlayerInfo[playerid][pSex] == 2) { Skin(playerid, 152); }
      					PlayerInfo[playerid][pMask] = 1;
      					SafeGivePlayerWeapon(playerid, 24, 200);
      					SafeGivePlayerWeapon(playerid, 43, 75);
      					Message(playerid, -1, "Estas encubierto y tienes una máscara. [/mascara]");
      				}
      				case 4:{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 135); }
      					if(PlayerInfo[playerid][pSex] == 2) { Skin(playerid, 151); }
      					PlayerInfo[playerid][pMask] = 1;
      					SafeGivePlayerWeapon(playerid, 24, 200);
      					SafeGivePlayerWeapon(playerid, 43, 75);
      					Message(playerid, -1, "Estas encubierto y tienes una máscara. [/mascara]");
      				}
      				case 5:
      				{
      					if(PlayerInfo[playerid][pSex] == 1) { Skin(playerid, 98); }
      					if(PlayerInfo[playerid][pSex] == 2) { Skin(playerid, 172); }
      					PlayerInfo[playerid][pMask] = 1;
      					SafeGivePlayerWeapon(playerid, 24, 200);
      					SafeGivePlayerWeapon(playerid, 43, 75);
      					Message(playerid, -1, "Estas encubierto y tienes una máscara. [/mascara]");
      				}
      				case 6:
      				{
      					SetPlayerArmour(playerid, 200);
      					SetHP(playerid, 100);
      				}
      				case 7:{
      					Skin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_NG:{
      		if(response){
      			ResetPlayerWeapons(playerid);
      			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
      			switch (listitem){
      				case 0:{
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 31, 3250);
      					Skin(playerid, 179);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se viste con uniforme de entrenamiento.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:{
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 46, 1);
      					SafeGivePlayerWeapon(playerid, 24, 500);
      					SafeGivePlayerWeapon(playerid, 31, 3250);
      					SafeGivePlayerWeapon(playerid, 29, 5250);
      					Skin(playerid, 287);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se viste con uniforme de Soldado.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:{
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 24, 500);
      					SafeGivePlayerWeapon(playerid, 34, 200);
      					Skin(playerid, 287);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se equipa con armas de Francotirador.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:{
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 24, 500);
      					SafeGivePlayerWeapon(playerid, 29, 500);
      					Skin(playerid, 287);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se viste y equipa con US Army Liviana.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 4:{
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 24, 500);
      					SafeGivePlayerWeapon(playerid, 29, 500);
      					SafeGivePlayerWeapon(playerid, 27, 400);
      					SafeGivePlayerWeapon(playerid, 31, 4400);
      					SafeGivePlayerWeapon(playerid, 16, 8);
      					Skin(playerid, 287);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se viste y equipa con US Army Pesada.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 5:{
      					Skin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 6:{
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s coje un chaleco antibalas.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_DIALOG:
      	{
      		if(response)
      		{
      			ResetPlayerWeapons(playerid);
      			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
      			switch (listitem)
      			{
      				case 0:
      				{
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 24, 300);
      					SafeGivePlayerWeapon(playerid, 41, 1250);
      					Skin(playerid, 71);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se viste con uniforme de Cadete.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					if(PlayerInfo[playerid][pRank] < 2) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 24, 500);
      					SafeGivePlayerWeapon(playerid, 25, 1000);
      					SafeGivePlayerWeapon(playerid, 41, 1250);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					Skin(playerid, 280);
      					if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1) { Skin(playerid, 280); }
      					if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) { Skin(playerid, 282); }
      					format(string, sizeof(string), "* %s se viste con uniforme de Agente.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:
      				{
      					if(PlayerInfo[playerid][pRank] < 2) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 25, 700);
      					SafeGivePlayerWeapon(playerid, 29, 1000);
      					Skin(playerid, 284);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* %s se viste con uniforme de Motorista.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:
      				{
      					if(PlayerInfo[playerid][pRank] < 3) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 17, 20);
      					SafeGivePlayerWeapon(playerid, 29, 1000);
      					SafeGivePlayerWeapon(playerid, 41, 1250);
      					SafeGivePlayerWeapon(playerid, 27, 1850);
      					SafeGivePlayerWeapon(playerid, 34, 1850);
      					SafeGivePlayerWeapon(playerid, 31, 1250);
      					SetPlayerArmour(playerid, 200);
      					SetHP(playerid, 100);
      					Skin(playerid, 285);
      					format(string, sizeof(string), "* %s se viste con equipo de Antidisturbio.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      					SetPlayerAttachedObject( playerid, 0, 18637, 5, -0.027496, -0.114117, -0.139993, 69.771209, 0.000000, 75.639694, 1.000000, 1.000000, 1.000000 );
      					Att_Obj_Slot_0[playerid] = "Escudo Táctico";
      					SetPlayerAttachedObject( playerid, 3, 368, 2, -0.012214, 0.055286, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
      					Att_Obj_Slot_3[playerid] = "Vision Nocturna";
      					SetPlayerAttachedObject( playerid, 4, 1672, 7, 0.000280, 0.024868, -0.122518, 103.762588, 274.482788, 268.962951, 1.000000, 1.000000, 1.000000 );
      					Att_Obj_Slot_4[playerid] = "Granada gas";
      				}
      				case 4:
      				{
      					if(PlayerInfo[playerid][pRank] < 4) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 25, 500);
      					SafeGivePlayerWeapon(playerid, 29, 1000);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					Skin(playerid, 265);
      					format(string, sizeof(string), "* %s se viste con uniforme de Inspector.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 5:
      				{
      					if(PlayerInfo[playerid][pRank] < 4) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					SafeGivePlayerWeapon(playerid, 4, 1);
      					SafeGivePlayerWeapon(playerid, 25, 500);
      					SafeGivePlayerWeapon(playerid, 41, 1250);
      					SafeGivePlayerWeapon(playerid, 43, 500);
      					SetHP(playerid, 100);
      					SetPlayerArmour(playerid, 100);
      					Skin(playerid, 217);
      					format(string, sizeof(string), "* %s se viste con uniforme de Policía Científica.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 6:
      				{
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 25, 500);
      					SafeGivePlayerWeapon(playerid, 29, 500);
      					SetHP(playerid, 100);
      					if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1) { Skin(playerid, 283); }
      					if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) { Skin(playerid, 288); }
      					format(string, sizeof(string), "* %s se viste con el traje de Comisario.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 7:
      				{
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					if(PlayerInfo[playerid][pRank] < 2) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					SetPlayerArmour(playerid, 100);
      					SetHP(playerid, 100);
      					format(string, sizeof(string), "* %s se coloca el chaleco antibalas.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 8:
      				{
      					if(OnDuty[playerid] != 1) return Message(playerid, COLOR_GRAD2, "No estás de servicio!");
      					if(PlayerInfo[playerid][pRank] < 2) return Message(playerid, COLOR_GRAD2, "No puedes utilizar esta opción!");
      					SafeGivePlayerWeapon(playerid, 3, 1);
      					SafeGivePlayerWeapon(playerid, 24, 500);
      					format(string, sizeof(string), "* %s agarra su pistola & porra.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 9:
      				{
      					Skin(playerid, PlayerInfo[playerid][pChar]);
      					SafeGivePlayerWeapon(playerid, 24, 175);
      					format(string, sizeof(string), "* %s se viste con ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_DIALOG3:
      	{
      		if(response)
      		{
      			ResetPlayerWeapons(playerid);
      			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
      			switch (listitem)
      			{
      				case 0:
      				{
      					if(PlayerInfo[playerid][pRank] < 2) return Message(playerid, COLOR_GRAD2, "Rango insuficiente!");
      					SafeGivePlayerWeapon(playerid, 23, 200);
      					SafeGivePlayerWeapon(playerid, 43, 100);
      					Skin(playerid, 166);
      					SetHP(playerid, 100);
      					format(string, sizeof(string), "* Detective %s se viste con su uniforme.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					if(PlayerInfo[playerid][pRank] < 3) return Message(playerid, COLOR_GRAD2, "Rango insuficiente!");
      					SafeGivePlayerWeapon(playerid, 24, 200);
      					Skin(playerid, 165);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* Guardaespaldas %s se viste con su uniforme.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:
      				{
      					if(PlayerInfo[playerid][pRank] < 4) return Message(playerid, COLOR_GRAD2, "Rango insuficiente!");
      					SafeGivePlayerWeapon(playerid, 23, 200);
      					SafeGivePlayerWeapon(playerid, 34, 30);
      					Skin(playerid, 164);
      					SetPlayerArmour(playerid, 100);
      					format(string, sizeof(string), "* Agente %s se viste con su uniforme.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:
      				{
      					Skin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_DIALOG4:
      	{
      		if(response)
      		{
      			switch (listitem)
      			{
      				case 0:
      				{
      					SetHP(playerid, 100);
      					SetPlayerSkin(playerid, 70);
      					format(string, sizeof(string), "* %s se pone su bata blanca y se desinfecta sus manos.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					SetHP(playerid, 100);
      					SetPlayerSkin(playerid, 274);
      					format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:
      				{
      					SetHP(playerid, 100);
      					SetPlayerSkin(playerid, 275);
      					format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:
      				{
      					SetHP(playerid, 100);
      					SetPlayerSkin(playerid, 276);
      					format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 4:
      				{
      					if(OnDuty[playerid] == 1) {	SendClientMessage(playerid, COLOR_GRAD2, "Estás en labor! Termina tu turno!"); return 1;    }
      					SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con ropa normal", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_DIALOG5:
      	{
      		if(response)
      		{
      			switch (listitem)
      			{
      				case 0:
      				{
      					SetPlayerSkin(playerid, 253);
      					format(string, sizeof(string), "* %s se pone su traje de chófer.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					SetPlayerSkin(playerid, 255);
      					format(string, sizeof(string), "* %s se pone su traje de chófer.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:
      				{
      					SetPlayerSkin(playerid, 261);
      					format(string, sizeof(string), "* %s se pone su traje de chófer.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:
      				{
      					SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con ropa normal", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_MECANICO:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					Skin(playerid, 180);
      					SafeGivePlayerWeapon(playerid, 41, 1000);
      					format(string, sizeof(string), "* %s se viste con uniforme de ayudante.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					Skin(playerid, 50);
      					SafeGivePlayerWeapon(playerid, 41, 1000);
      					format(string, sizeof(string), "* %s se viste con uniforme de mecanico.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 2:
      				{
      					Skin(playerid, 268);
      					SafeGivePlayerWeapon(playerid, 41, 1000);
      					format(string, sizeof(string), "* %s se viste con uniforme de ingeniero.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 3:
      				{
      					Skin(playerid, 185);
      					format(string, sizeof(string), "* %s se viste con su uniforme de director.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 4:
      				{
      					SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case EQUIPO_GOBIERNO:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					Skin(playerid, 164);
      					SetHP(playerid,100);
      					SetPlayerArmour(playerid, 100);
      					SafeGivePlayerWeapon(playerid, 29, 1000);
      					SafeGivePlayerWeapon(playerid, 41, 1250);
      					SafeGivePlayerWeapon(playerid, 27, 1850);
      					SafeGivePlayerWeapon(playerid, 34, 1850);
      					SafeGivePlayerWeapon(playerid, 31, 1250);
      					format(string, sizeof(string), "* %s se viste con su uniforme de guardaespaldas.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      				case 1:
      				{
      					ResetPlayerWeapons(playerid);
      					SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
      					format(string, sizeof(string), "* %s se viste su ropa normal.", PlayerName(playerid));
      					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				}
      			}
      		}
      	}
      	case D247_BUY:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(CheckMoney(playerid,5))
      					{
      						return Dialog_Show(playerid, Dialog:lottoBuy);
      					}
      				}
      				case 1:
      				{
      					if(CheckMoney(playerid,70))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						SafeGivePlayerWeapon(playerid, 41, 500);
      						Message(playerid, COLOR_WHITE, "Has comprado un Spray.");
      						Bought(playerid, 70);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 70);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 70);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 70);
      						return 1;
      					}
      				}
      				case 2:
      				{
      					ShowPlayerDialog(playerid, RECARGA_PHONE, DIALOG_STYLE_INPUT, "{018CFE}Operadora de Telefonia Celular OTECEL", "{FFFFFF}Ingresa tu numero celular para realizar la recarga", "Aceptar", "Cancelar");
      				}
      				case 3:
      				{
      					if(CheckMoney(playerid,20))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						PlayerInfo[playerid][pCigarettes] = 20;
      						Message(playerid, COLOR_WHITE, "Has una cajetilla con 20 cigarros, utilza \"/cfumar\"");
      						Bought(playerid, 20);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 20);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 20);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 20);
      						return 1;
      					}
      				}
      				case 4:
      				{
      					if(CheckMoney(playerid,20))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						PlayerInfo[playerid][pLighter] = 30;
      						SendClientMessage(playerid, COLOR_WHITE, "Compraste un encendedor.");
      						Bought(playerid, 20);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 20);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 20);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 20);
      						return 1;
      					}
      				}
      				case 5:
      				{
      					if(CheckMoney(playerid,300))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						PlayerInfo[playerid][pGafas] = 1;
      						SendClientMessage(playerid, COLOR_WHITE, "Compraste unas gafas, puedes utilizar: /gafas & /brillo");
      						Bought(playerid, 300);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 300);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 300);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 300);
      						return 1;
      					}
      				}
      				case 6:
      				{
      					if(CheckMoney(playerid,175))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						PlayerInfo[playerid][pMaleta] = 1;
      						Message(playerid, COLOR_WHITE, "Compraste una maleta, puedes utilizar /maleta");
      						Bought(playerid, 175);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 175);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 175);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 175);
      						return 1;
      					}
      				}
      				case 7:
      				{
      					if(CheckMoney(playerid,75))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						PlayerInfo[playerid][pMochila] = 1;
      						Message(playerid, COLOR_WHITE, "Compraste una mochila, utiliza /mochila");
      						Bought(playerid, 75);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 75);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 75);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 75);
      						return 1;
      					}
      				}
      				case 8:
      				{
      					if(CheckMoney(playerid,120))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						PlayerInfo[playerid][pCasco] = 1;
      						Message(playerid, COLOR_WHITE, "Compraste un casco, utiliza /casco");
      						Bought(playerid, 120);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 120);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 120);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 120);
      						return 1;
      					}
      				}
      				case 9:
      				{
      					if(CheckMoney(playerid,50))
      					{
      						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
      						Skate[playerid] = 1;
      						Message(playerid, COLOR_WHITE, "Compraste unos patines, utiliza /patines");
      						Bought(playerid, 50);
      						if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469))    Till(3, 50);
      						if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469))  	Till(4, 50);
      						if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573))    	Till(5, 50);
      						return 1;
      					}
      				}
      			}
      		}
      	}
      	case CAMEL_MENU:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(Delivery[playerid] < 1) return ProxDetector(40.0, playerid, "Beautiful dice: No tienes ningún paquete para entregarme idiota!",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      					new rec = Delivery[playerid]*100;
      					PlayerInfo[playerid][pMats] += rec;
      					Delivery[playerid] = 0;
      					format(string, sizeof(string), "* Entregaste el paquee con éxito, recibes a cambio %d materiales, ahora tienes %d", rec, PlayerInfo[playerid][pMats]);
      					Message(playerid, COLOR_WHITE, string);
      					ProxDetector(20.0, playerid, "Beautiful dice: Gracias. Tráeme más cuando puedas.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      				}
      				case 1:
      				{
      					if(TelfRob[playerid] < 1) return ProxDetector(40.0, playerid, "Beautiful dice: No tienes ningún teléfono para entregarme idiota!",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      					new tefran = random(200);
      					new robcash = tefran*TelfRob[playerid];
      					format(string, sizeof(string), "* Entregaste con éxito %d teléfono(s) robados, te dan a cambio %d$", TelfRob[playerid], robcash);
      					Message(playerid, COLOR_WHITE, string);
      					ProxDetector(20.0, playerid, "Beautiful dice: Gracias. Tráeme más cuando puedas.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      					Earn(playerid, robcash);
      					TelfRob[playerid] -= 1;
      				}
      				case 2:
      				{
      					if(CheckMoney(playerid,10000))
      					{
      						if(PlayerInfo[playerid][pLevel] < 5) return Message(playerid, COLOR_GRAD2, "Necesitas ser minimo nivel 5 para adquirir esto.");
      						if(PlayerInfo[playerid][pDNIFalse] > 0) return Message(playerid, COLOR_GRAD2, "Ya posees un DNI Falso.");
      						ShowPlayerDialog(playerid,DNI_MENU,DIALOG_STYLE_INPUT,"Traficante - DNI Falso","Ingresa el nombre que quieres usar para el DNI Falso.","Aceptar","Salir");
      					}
      				}
      			}
      		}
      		else ProxDetector(40.0, playerid, "Beautiful dice: Vete a la mierda! Ya tengo suficientes clientes!",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
      	}
      	case DNI_MENU:
      	{
      		if(response)
      		{
      			if(strlen(inputtext) < 1 || strlen(inputtext) > 32 || strfind(inputtext, "_", true) != -1)
      			{
      				ShowPlayerDialog(playerid,DNI_MENU,DIALOG_STYLE_INPUT,"Traficante - DNI Falso", "Ingresa el nombre que quieres usar, Ejemplo: Jonathan Torres", "Aceptar", "Cancelar");
      			}
      			else{
      				strmid(DNIName[playerid], inputtext, 0, strlen(inputtext), 32);
      				format(string, sizeof(string), "¿Estás seguro que quieres usar el nombre de\n\t%s en tu DNI falso?", DNIName[playerid]);
      				ShowPlayerDialog(playerid,DNI_CONFIRM,DIALOG_STYLE_MSGBOX,"Traficante - DNI Falso", string, "Aceptar", "Cancelar");
      			}
      		}
      	}
      	case DNI_CONFIRM:
      	{
      		if(response)
      		{
      			strmid(PlayerInfo[playerid][pDNIName], DNIName[playerid], 0, strlen(DNIName[playerid]), 32);
      			new dni = 100000 + random(899999);  PlayerInfo[playerid][pDNIFalse] = dni;
      			format(string, sizeof(string), "* Has obtenido una identificación falsa, con el nombre de {41FF2F}%s.", PlayerInfo[playerid][pDNIName]);
      			Message(playerid, COLOR_WHITE, string);
      			Bought(playerid, 10000);
      		}
      	}
      	case CREATE_WEAPON:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					ShowPlayerDialog(playerid,CREATE_WEAPON,DIALOG_STYLE_LIST,"Fábrica de Armas",   \
      						"Arma\tMateriales \tMunición/Unidades\n" \
      						"Navaja 	\t25 \t1\n" \
      						"Bate 		\t40 \t1\n" \
      						"Katana		\t80 \t1\n" \
      						"C.Molotov 	\t120 \t1\n" \
      						"9mm 		\t200 \t140\n" \
      						"D.Eagle 	\t300 \t140\n" \
      						"S.Pistol 	\t280 \t140\n" \
      						"Shotgun	\t450 \t60\n" \
      						"SPAS12		\t500 \t60\n" \
      						"MP5		\t190 \t150\n" \
      						"AK47		\t200\t150\n" \
      						"M4			\t200 \t150\n" \
      						"Rifle		\t420 \t45\n" \
      						"Sniper		\t500 \t60\n" \
      						,"Aceptar","Salir");
      				}
      				case 1: MakeWeapon(playerid, 25, 4, 1);
      				case 2: MakeWeapon(playerid, 40, 5, 1);
      				case 3: MakeWeapon(playerid, 80, 8, 1);
      				case 4: MakeWeapon(playerid, 120, 18, 1);
      				case 5: MakeWeapon(playerid, 200, 22, 140);
      				case 6: MakeWeapon(playerid, 300, 24, 140);
      				case 7: MakeWeapon(playerid, 280, 23, 140);
      				case 8: MakeWeapon(playerid, 450, 25, 60);
      				case 9: MakeWeapon(playerid, 500, 27, 60);
      				case 10: MakeWeapon(playerid, 190, 29, 150);
      				case 11: MakeWeapon(playerid, 200, 30, 150);
      				case 12: MakeWeapon(playerid, 200, 31, 150);
      				case 13: MakeWeapon(playerid, 420, 33, 45);
      				case 14: MakeWeapon(playerid, 500, 34, 60);
      			}
      		}
      	}
      	case AMMUNATION_MENU:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					ShowPlayerDialog(playerid,AMMUNATION_MENU_DEF,DIALOG_STYLE_LIST,"Defensa personal","Spray - (5$)\nPuño americano - (25$)\nNavaja - (45$)\nCané - (15$)\nBate - (75$)","Comprar","Atras");
      				}
      				case 1:
      				{
      					ShowPlayerDialog(playerid,AMMUNATION_MENU_PIS,DIALOG_STYLE_LIST,"Pistolas","9mm :20: - (220$)\nDesert Eagle :10: - (300$)","Aceptar","Atras");
      				}
      				case 2:
      				{
      					ShowPlayerDialog(playerid,AMMUNATION_MENU_ESC,DIALOG_STYLE_LIST,"Escopetas","Escopeta Caza :20: - (399$)\nShotgun :15: - (499$)","Aceptar","Atras");
      				}
      				case 3:
      				{
      					ShowPlayerDialog(playerid,AMMUNATION_MENU_PRO,DIALOG_STYLE_LIST,"Protección","Chaleco - (400$)","Aceptar","Atras");
      				}
      				case 4:
      				{
      					ShowPlayerDialog(playerid,AMMUNATION_MENU_LEC,DIALOG_STYLE_LIST,"Lecciones","Ammunation's Weapon Guide (55$)\nGuía Desert Eagle(45$)\nLección Shotgun I(65$)\nLección Shotgun II(75$)\nSubFusil-MP5 Guía Toma I(82$)\nSubFusil-MP5 Guía Toma II(89$)\nRifles de Asalto AK47-M4 I(70$)\nRifles de Asalto AK47-M4 II(99$)\nRifles de Asalto AK47-M4 III(129$)","Aceptar","Atras");
      				}
      			}
      		}
      	}
      	case AMMUNATION_MENU_DEF:
      	{
      		if(response)
      		{
      			if(PlayerInfo[playerid][pLevel] < 2)
      			{
      				Message(playerid, COLOR_GRAD2, " Debes ser mayor de nivel 2 para comprar armas.");
      				return 1;
      			}
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 2);
      						Bought(playerid, 2);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 41, 500);
      					}
      					else
      					{
      						Till(17, 5);
      						Bought(playerid, 5);
      						SafeGivePlayerWeapon(playerid, 41, 500);
      					}
      				}
      				case 1:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 15);
      						Bought(playerid, 15);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 1, 1);
      					}
      					else
      					{
      						Till(17, 25);
      						Bought(playerid, 25);
      						SafeGivePlayerWeapon(playerid, 1,1);
      					}
      				}
      				case 2:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 25);
      						Bought(playerid, 25);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 4,1);
      					}
      					else
      					{
      						Till(17, 40);
      						Bought(playerid, 40);
      						SafeGivePlayerWeapon(playerid, 4,1);
      					}
      				}
      				case 3:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 5);
      						Bought(playerid, 5);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 15,1);
      					}
      					else
      					{
      						Till(17, 15);
      						Bought(playerid, 15);
      						SafeGivePlayerWeapon(playerid, 15,1);
      					}
      				}
      				case 4:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 45);
      						Bought(playerid, 45);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 5,1);
      					}
      					else
      					{
      						Till(17, 60);
      						Bought(playerid, 60);
      						SafeGivePlayerWeapon(playerid, 5,1);
      					}
      				}
      			}
      		}
      		else ShowAmmunation(playerid);
      	}
      	case AMMUNATION_MENU_PIS:
      	{
      		if(response)
      		{
      			if(PlayerInfo[playerid][pLevel] < 2) return Message(playerid, COLOR_GRAD2, " Debes ser mayor a nivel 2 para comprar armas.");
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 140);
      						Bought(playerid, 140);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 22, 20);
      					}
      					else
      					{
      						Till(17, 220);
      						Bought(playerid, 220);
      						SafeGivePlayerWeapon(playerid,22,20);
      					}
      				}
      				case 1:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 200);
      						Bought(playerid, 200);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se le ha realizado un descuento por tener Licencia de Armas.");
      						SafeGivePlayerWeapon(playerid, 24,10);
      					}
      					else
      					{
      						Till(17, 300);
      						Bought(playerid, 300);
      						SafeGivePlayerWeapon(playerid, 24,10);
      					}
      				}
      			}
      		}
      		else ShowAmmunation(playerid);
      	}
      	case AMMUNATION_MENU_ESC:
      	{
      		if(response)
      		{
      			if(PlayerInfo[playerid][pLevel] < 2) return Message(playerid, COLOR_GRAD2, " Debes ser mayor a nivel 2 para comprar armas.");
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 270);
      						Bought(playerid, 270);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se te ha descontado el 30%% por tener la licencia de armas.");
      						SafeGivePlayerWeapon(playerid, 33,20);
      					}
      					else
      					{
      						Till(17, 399);
      						Bought(playerid, 399);
      						SafeGivePlayerWeapon(playerid, 33,20);
      					}
      				}
      				case 1:
      				{
      					if(PlayerInfo[playerid][pGunLic] == 1)
      					{
      						Till(17, 310);
      						Bought(playerid, 310);
      						SendClientMessage(playerid, COLOR_YELLOW, "Se te ha descontado el 30%% por tener la licencia de armas.");
      						SafeGivePlayerWeapon(playerid, 25,15);
      					}
      					else
      					{
      						Till(17, 499);
      						Bought(playerid, 499);
      						SafeGivePlayerWeapon(playerid, 25,15);
      					}
      				}
      			}
      		}
      		else ShowAmmunation(playerid);
      	}
      	case AMMUNATION_MENU_PRO:
      	{
      		if(response)
      		{
      			if(PlayerInfo[playerid][pGunLic] == 1)
      			{
      				Till(17, 300);
      				Bought(playerid, 300);
      				SendClientMessage(playerid, COLOR_YELLOW, "Se te ha descontado el 30%% por tener la licencia de armas.");
      				SetPlayerArmour(playerid, 100);
      			}
      			else
      			{
      				Till(17, 400);
      				Bought(playerid, 400);
      				SetPlayerArmour(playerid, 100);
      			}
      		}
      		else ShowAmmunation(playerid);
      	}
      	case AMMUNATION_MENU_LEC:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					Till(17, 55);
      					Bought(playerid, 55);
      					Message(playerid, COLOR_WHITE, "Has comprado Ammunation's Weapon Guide, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 10;
      				}
      				case 1:
      				{
      					Till(17, 45);
      					Bought(playerid, 45);
      					Message(playerid, COLOR_WHITE, "Has comprado Guía Desert Eagle, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 15;
      				}
      				case 2:
      				{
      					Till(17, 60);
      					Bought(playerid, 60);
      					Message(playerid, COLOR_WHITE, "Has comprado Lección Shotgun I, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 20;
      				}
      				case 3:
      				{
      					Till(17, 75);
      					Bought(playerid, 75);
      					Message(playerid, COLOR_WHITE, "Has comprado Lección Shotgun II, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 21;
      				}
      				case 4:
      				{
      					Till(17, 82);
      					Bought(playerid, 82);
      					Message(playerid, COLOR_WHITE, "Has comprado SubFusil-MP5 Guía Toma I, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 30;
      				}
      				case 5:
      				{
      					Till(17, 89);
      					Bought(playerid, 89);
      					Message(playerid, COLOR_WHITE, "Has comprado SubFusil-MP5 Guía Toma II, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 31;
      				}
      				case 6:
      				{
      					Till(17, 95);
      					Bought(playerid, 95);
      					Message(playerid, COLOR_WHITE, "Has comprado Rifles de Asalto AK47-M4 I, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 40;
      				}
      				case 7:
      				{
      					Till(17, 99);
      					Bought(playerid, 99);
      					Message(playerid, COLOR_WHITE, "Has comprado Rifles de Asalto AK47-M4 II, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 41;
      				}
      				case 8:
      				{
      					Till(17, 129);
      					Bought(playerid, 129);
      					Message(playerid, COLOR_WHITE, "Has comprado Rifles de Asalto AK47-M4 III, ve donde Raul Blanco.");
      					PlayerInfo[playerid][pLeccion] = 42;
      				}
      			}
      		}
      		else ShowAmmunation(playerid);
      	}
      	case FSTYLE_DIALOG:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(CheckMoney(playerid, 1500))
      					{
      						Bought(playerid, 1500);
      						Till(19, 1500);
      						PlayerInfo[playerid][pFStyle] = 7;
      						SetPlayerStats(playerid);
      						Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido Knee Head!");
      						ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
      					}
      				}
      				case 1:
      				{
      					if(CheckMoney(playerid, 1000))
      					{
      						Bought(playerid, 1000);
      						Till(19, 1000);
      						PlayerInfo[playerid][pFStyle] = 6;
      						SetPlayerStats(playerid);
      						Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido Kung Fu!");
      						ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
      					}
      				}
      				case 2:
      				{
      					if(CheckMoney(playerid, 800))
      					{
      						Bought(playerid, 800);
      						Till(19, 800);
      						PlayerInfo[playerid][pFStyle] = 5;
      						SetPlayerStats(playerid);
      						Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido a Boxear!");
      						ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
      					}
      				}
      			}
      		}
      	}
      	case DIALOG_AMMU_MANAGER:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					new book[32];
      					if(PlayerInfo[playerid][pLeccion] == 10) {  book = "Ammunation's Weapon Guide"; }
      					if(PlayerInfo[playerid][pLeccion] == 15) {  book = "Guía Desert Eagle"; }
      					if(PlayerInfo[playerid][pLeccion] == 20) {  book = "Lección Shotgun I"; }
      					if(PlayerInfo[playerid][pLeccion] == 21) {  book = "Lección Shotgun II"; }
      					if(PlayerInfo[playerid][pLeccion] == 30) {  book = "SubFusil-MP5 Guía Toma I"; }
      					if(PlayerInfo[playerid][pLeccion] == 31) {  book = "SubFusil-MP5 Guía Toma II"; }
      					if(PlayerInfo[playerid][pLeccion] == 40) {  book = "Rifles de Asalto AK47-M4 I"; }
      					if(PlayerInfo[playerid][pLeccion] == 41) {  book = "Rifles de Asalto AK47-M4 II"; }
      					if(PlayerInfo[playerid][pLeccion] == 42) {  book = "Rifles de Asalto AK47-M4 III"; }
      					format(string, sizeof(string), "%s", book)
      					ShowPlayerDialog(playerid, DIALOG_LECCION,DIALOG_STYLE_LIST,"Lecciones disponibles", string, "Aprender", "Cancelar");
      				}
      				case 1:
      				{
      					new style[16];
      					ClearChatbox(playerid, 10);
      					Message(playerid, COLOR_YELLOW, "-- Tus habilidades --");
      					format(string, sizeof(string), "DEagle: (%d%%) - Shotgun: (%d%%) - MP5: (%d%%) - AK47: (%d%%) - M4: (%d%%) - Sniper: (%d%%)",
      						PlayerInfo[playerid][pDEagle]/10,PlayerInfo[playerid][pShotgun]/10,PlayerInfo[playerid][pMP5]/10,PlayerInfo[playerid][pAK47]/10,PlayerInfo[playerid][pM4]/10,PlayerInfo[playerid][pSniper]/10)
      					Message(playerid, COLOR_GRAD2, string);
      					if(PlayerInfo[playerid][pFStyle] == 4) { style = "Normal"; 		}
      					if(PlayerInfo[playerid][pFStyle] == 5) { style = "Boxing" ;		}
      					if(PlayerInfo[playerid][pFStyle] == 6) { style = "Kung Fu" ;	}
      					if(PlayerInfo[playerid][pFStyle] == 7) { style = "Kneehead" ;	}
      					format(string, sizeof(string), "Estilo de lucha: %s", style)
      					Message(playerid, COLOR_GRAD2, string);
      					return 1;
      				}
      			}
      		}
      	}
      	case DIALOG_LECCION:
      	{
      		if(response)
      		{
      			if(PlayerInfo[playerid][pLeccion] == 10)
      			{
      				if(PlayerInfo[playerid][pDEagle] > 189) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pShotgun] > 149) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pMP5] > 174) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pM4] > 174) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pAK47] > 174) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pSniper] > 149) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pDEagle] += 90;
      				PlayerInfo[playerid][pMP5] += 75;
      				PlayerInfo[playerid][pM4] += 75;
      				PlayerInfo[playerid][pAK47] += 75;
      				PlayerInfo[playerid][pSniper] += 25;
      				PlayerInfo[playerid][pShotgun] += 50;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 15)
      			{
      				if(PlayerInfo[playerid][pDEagle] < 190) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pDEagle] > 289) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pDEagle] += 100;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 20)
      			{
      				if(PlayerInfo[playerid][pShotgun] < 150) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pShotgun] > 229) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pShotgun] += 80;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 21)
      			{
      				if(PlayerInfo[playerid][pShotgun] < 150) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pShotgun] < 230) return Message(playerid, COLOR_GRAD2, "Debes leer la Toma I");
      				if(PlayerInfo[playerid][pShotgun] > 349) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pShotgun] += 120;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 30)
      			{
      				if(PlayerInfo[playerid][pMP5] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pMP5] > 274) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pMP5] += 100;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 31)
      			{
      				if(PlayerInfo[playerid][pMP5] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pMP5] < 275) return Message(playerid, COLOR_GRAD2, "Debes leer la Toma I")
      					if(PlayerInfo[playerid][pMP5] > 424) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pMP5] += 150;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 40)
      			{
      				if(PlayerInfo[playerid][pAK47] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pM4] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pM4] > 249) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pAK47] > 249) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pM4] += 75;
      				PlayerInfo[playerid][pAK47] += 75;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 41)
      			{
      				if(PlayerInfo[playerid][pAK47] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pM4] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pM4] < 250) return Message(playerid, COLOR_GRAD2, "Debes leer la toma I");
      				if(PlayerInfo[playerid][pAK47] < 250) return Message(playerid, COLOR_GRAD2, "Debes leer la toma I");
      				if(PlayerInfo[playerid][pM4] > 339) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pAK47] > 339) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pM4] += 90;
      				PlayerInfo[playerid][pAK47] += 90;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      			if(PlayerInfo[playerid][pLeccion] == 42)
      			{
      				if(PlayerInfo[playerid][pAK47] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pM4] < 175) return Message(playerid, COLOR_GRAD2, "Debes leer primero el libro de Ammunation's Weapons Guide");
      				if(PlayerInfo[playerid][pM4] < 250) return Message(playerid, COLOR_GRAD2, "Debes leer la toma I");
      				if(PlayerInfo[playerid][pAK47] < 250) return Message(playerid, COLOR_GRAD2, "Debes leer la toma I");
      				if(PlayerInfo[playerid][pAK47] < 340) return Message(playerid, COLOR_GRAD2, "Debes leer la toma II");
      				if(PlayerInfo[playerid][pM4] < 340) return Message(playerid, COLOR_GRAD2, "Debes leer la toma II");
      				if(PlayerInfo[playerid][pM4] > 514) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				if(PlayerInfo[playerid][pAK47] > 514) return Message(playerid, COLOR_GRAD2, "Ya has alcanzado la Experiencia que te puede dar este libro!");
      				PlayerPlaySound(playerid, 1054, 0,0,0);
      				PlayerInfo[playerid][pLeccion] = 0;
      				Message(playerid, COLOR_WHITE, "Felicidades! Has aprendido la leccion!");
      				PlayerInfo[playerid][pM4] += 175;
      				PlayerInfo[playerid][pAK47] += 175;
      				SetPlayerStats(playerid);
      				return 1;
      			}
      		}
      	}
      	case DIALOG_LSPD_ELEVATOR:
      	{
      		if(response)
      		{
      			SetPlayerPos(playerid, 1526.5972,-1676.0651,5.8906);
      			SetPlayerInterior(playerid,0);
      			PlayerInfo[playerid][pInt] = 0;
      		}
      		else
      		{
      			SetPlayerPos(playerid, 1556.1990,-1671.6530,28.3956);
      			SetPlayerInterior(playerid,0);
      		}
      	}
      	case DIALOG_SAMUR_ELEVATOR:
      	{
      		if(response)
      		{
      			SetPlayerPos(playerid, 1144.9569,-1329.5032,13.5840);
      			SetPlayerInterior(playerid,0);
      			PlayerInfo[playerid][pInt] = 0;
      		}
      		else
      		{
      			SetPlayerPos(playerid, 1161.8463,-1328.4821,31.4967);
      			SetPlayerInterior(playerid,0);
      		}
      	}
      	case DIALOG_FBI_ELEVATOR:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(PlayerToPoint(5.0,playerid,914.2907,-1037.3264,31.8984))
      					{
      						SetPosEx(playerid,208.0704,142.1360,1003.0234,0, 3, 0);
      					}
      					else
      					{
      						SetPosEx(playerid,914.2907,-1037.3264,31.8984,0,0,0);
      					}
      				}
      				case 1:
      				{
      					if(PlayerToPoint(5.0,playerid,914.0172,-1026.9460,111.0547))
      					{
      						SetPosEx(playerid,208.0704,142.1360,1003.0234,0, 3, 0);
      					}
      					else {
      						SetPosEx(playerid,914.0172,-1026.9460,111.0547,0,0,0);
      					}
      				}
      			}
      		}
      	}
      	case DIALOG_TAXI_RADAR:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(TaxiSlot1 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					GetPlayerPos(TaxiSlot1, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot1, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot1));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					TaxiCalled[TaxiSlot1] = 0;
      					TaxiSlot1 = 999; SlotZone1 = "Sin Localizar"; SlotCity1 = "No"; TiempoSlot1 = 0;
      					return 1;
      				}
      				case 1:
      				{
      					if(TaxiSlot2 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot2, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot2));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot2, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot2] = 0;
      					TaxiSlot2 = 999; SlotZone2 = "Sin Localizar"; SlotCity2 = "No"; TiempoSlot2 = 0;
      					return 1;
      				}
      				case 2:
      				{
      					if(TaxiSlot3 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot3, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot3));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot3, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot3] = 0;
      					TaxiSlot3 = 999; SlotZone3 = "Sin Localizar"; SlotCity3 = "No"; TiempoSlot3 = 0;
      					return 1;
      				}
      				case 3:
      				{
      					if(TaxiSlot4 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot4, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot4));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot4, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot4] = 0;
      					TaxiSlot4 = 999; SlotZone4 = "Sin Localizar"; SlotCity4 = "No"; TiempoSlot4 = 0;
      					return 1;
      				}
      				case 4:
      				{
      					if(TaxiSlot5 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot5, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot5));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot5, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot5] = 0;
      					TaxiSlot5 = 999; SlotZone5 = "Sin Localizar"; SlotCity5 = "No"; TiempoSlot5 = 0;
      					return 1;
      				}
      				case 5:
      				{
      					if(TaxiSlot6 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot6, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot6));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot6, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot6] = 0;
      					TaxiSlot6 = 999; SlotZone6 = "Sin Localizar"; SlotCity6 = "No"; TiempoSlot6 = 0;
      					return 1;
      				}
      				case 6:
      				{
      					if(TaxiSlot7 == 999) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot7, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot7));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot7, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot7] = 0;
      					TaxiSlot7 = 999; SlotZone7 = "Sin Localizar"; SlotCity7 = "No"; TiempoSlot7 = 0;
      					return 1;
      				}
      				case 7:
      				{
      					if(TaxiSlot8 == 0) return Message(playerid, COLOR_GRAD2, "¡El slot esta vacio!");
      					format(string, sizeof(string), "[TAXI] %s ha aceptado su llamada. Se dirige hacia usted, porfavor no se mueva.", PlayerName(playerid));
      					Message(TaxiSlot8, COLOR_ORANGE, string);
      					format(string, sizeof(string), "[CENTRAL] %s ha aceptado la llamada de %s.", PlayerName(playerid), PlayerName(TaxiSlot8));
      					SendJobMessage(9, TEAM_BLUE_COLOR, string);
      					GetPlayerPos(TaxiSlot8, cx, cy, cz);	SetPlayerCheckpoint(playerid, cx, cy ,cz, 5.0);
      					TaxiCalled[TaxiSlot8] = 0;
      					TaxiSlot8 = 999; SlotZone8 = "Sin Localizar"; SlotCity8 = "No"; TiempoSlot8 = 0;
      					return 1;
      				}
      				case 8:
      				{
      					return 1;
      				}
      			}
      		}
      		else
      		{
      			switch(listitem)
      			{
      				case 0: { TaxiCalled[TaxiSlot1] = 0, TaxiSlot1 = 999; SlotZone1 = "Sin Localizar"; SlotCity1 = "No"; TiempoSlot1 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot1"); return 1; }
      				case 1: { TaxiCalled[TaxiSlot2] = 0, TaxiSlot2 = 999; SlotZone2 = "Sin Localizar"; SlotCity2 = "No"; TiempoSlot2 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot2"); return 1; }
      				case 2: { TaxiCalled[TaxiSlot3] = 0, TaxiSlot3 = 999; SlotZone3 = "Sin Localizar"; SlotCity3 = "No"; TiempoSlot3 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot3"); return 1; }
      				case 3: { TaxiCalled[TaxiSlot4] = 0, TaxiSlot4 = 999; SlotZone4 = "Sin Localizar"; SlotCity4 = "No"; TiempoSlot4 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot4"); return 1; }
      				case 4: { TaxiCalled[TaxiSlot5] = 0, TaxiSlot5 = 999; SlotZone5 = "Sin Localizar"; SlotCity5 = "No"; TiempoSlot5 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot5"); return 1; }
      				case 5: { TaxiCalled[TaxiSlot6] = 0, TaxiSlot6 = 999; SlotZone6 = "Sin Localizar"; SlotCity6 = "No"; TiempoSlot6 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot6"); return 1; }
      				case 6: { TaxiCalled[TaxiSlot7] = 0, TaxiSlot7 = 999; SlotZone7 = "Sin Localizar"; SlotCity7 = "No"; TiempoSlot7 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot7"); return 1; }
      				case 7: { TaxiCalled[TaxiSlot8] = 0, TaxiSlot8 = 999; SlotZone8 = "Sin Localizar"; SlotCity8 = "No"; TiempoSlot8 = 0; Message(playerid,COLOR_GRAD2,"Borrado Slot8"); return 1; }
      				case 8: { return 1; }
      			}
      		}
      	}				
      	case DIALOG_FARMACIA:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(CheckMoney(playerid, 3))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado un condon, utiliza /condon.");
      						Bought(playerid, 3);
      						Till(31, 3);
      						Condom[playerid] ++;
      					}
      				}
      				case 1:
      				{
      					if(CheckMoney(playerid, 10))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado una caja con 5 ibuprofenos. Utiliza /pastilla.");
      						Bought(playerid, 10);
      						Till(31, 10);
      						Ibuprofeno[playerid] += 5;
      					}
      				}
      				case 2:
      				{
      					if(CheckMoney(playerid, 30))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado una caja con 6 parches de nicotina, utiliza /pastilla.");
      						Bought(playerid, 30);
      						Till(31, 30);
      						Nicotina[playerid] += 6;
      					}
      				}
      				case 3:
      				{
      					if(CheckMoney(playerid, 40))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado una caja de 4 pastillas de Energysil. Utiliza /pastilla");
      						Bought(playerid, 40);
      						Till(31, 40);
      						Energysil[playerid] += 4;
      					}
      				}
      				case 4:
      				{
      					if(CheckMoney(playerid, 1000))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado 5 pastillas para curar el SIDA recetadas por el médico.");
      						Bought(playerid, 1000);
      						Till(31, 1000);
      						PlayerInfo[playerid][pAntiSIDA] += 5;
      					}
      				}
      				case 5:
      				{
      					if(CheckMoney(playerid, 500))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado 5 pastillas anti epilépticas recetadas por el médico.");
      						Bought(playerid, 500);
      						Till(31, 500);
      						PlayerInfo[playerid][pAntiEpilepsia] += 5;
      					}
      				}
      				case 6:
      				{
      					if(CheckMoney(playerid, 800))
      					{
      						Message(playerid, COLOR_WHITE, "Has comprado 5 pastillas contra el cáncer recetadas por el médico.");
      						Bought(playerid, 800);
      						Till(31, 800);
      						PlayerInfo[playerid][pAntiCancer] += 5;
      					}
      				}
      			}
      		}
      	}
      	case MECANICO_MENU:
      	{
      		if(response)
      		{
      			switch(listitem)
      			{
      				case 0:
      				{
      					if(!IsAtTaller(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en el taller!");
      					if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
      					ShowPlayerDialog(playerid, MECANICO_MENU_REPARACION, DIALOG_STYLE_LIST, "-> Reparaciones <-", "Reparar Motor\nReparar Motor + Carrocería", "Reparar", "Atrás");
      					return 1;
      				}
      				case 1:
      				{
      					if(!IsAtTaller(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en el taller!");
      					if(IsPlayerInAnyVehicle(playerid))
      					{
      						format(string, sizeof(string), "* %s llena el depósito del vehículo.", PlayerName(playerid));
      						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      						Gas[idcar] = 100;
      						return 1;
      					}
      					else return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
      				}
      				case 2:
      				{
      					if(!IsAtTaller(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en el taller!");
      					if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "No estás en un vehículo!");
      					ShowPlayerDialog(playerid, MECANICO_MENU_TUNING, DIALOG_STYLE_LIST, "-> Tunear <-", "Tuning General\nTuning Específico\nCambiar Color\nCambiar Nombre Vehículo\nCambiar Motor\nBaterías", "Aceptar", "Atrás");
      					return 1;
      				}
      				case 3:
      				{
      					ShowPlayerDialog(playerid, MECANICO_MENU_EMBARGAR, DIALOG_STYLE_LIST, "-> Embargar <-", "Incrementar +1 Embargo\nDecrementar -1 Embargo\nMultar vehículo\nDesembargar vehículo", "Aceptar", "Atrás");
      					return 1;
      				}
      				case 4:
      				{
      					Remolcar(playerid);
      				}
      				case 5:
      				{
      					ShowPlayerDialog(playerid, MECANICO_MENU_OTROS, DIALOG_STYLE_LIST, "-> Otros <-", "Matricular Vehículo\nExaminar Vehículo\nInstalar alarma", "Aceptar", "Atrás");
      					return 1;
      				}
      				case 6:
      				{
      					if( !IsAtTaller( playerid ) ) return Message( playerid, COLOR_GRAD2, "No estás en el taller!" );
      					if( !IsPlayerInAnyVehicle( playerid ) ) return Message( playerid, COLOR_GRAD2, "No estas montado en ningun vehiculo." );

						if( PlayerInfo[ playerid ][ pRank ] > 1 ) { // Cr34 =>
							ChangeVehicleColor( idcar, 0, 0 );
							if(CarInfo[ idcar ][ cWheel ] > 0) 			RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cWheel ] );
							if(CarInfo[ idcar ][ cHydraulics ] > 0) 	RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cHydraulics ] );
							if(CarInfo[ idcar ][ cNitro ] > 0) 	 	RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cNitro ] );
							if(CarInfo[ idcar ][ cSideskirt ] > 0)
							{
								RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cSideskirt ] );
								new skirt = CarInfo[ idcar ][ cSideskirt ];
								// X-FLOW
								if( skirt == 1030 ) RemoveVehicleComponent( idcar, 1031 );
								else if( skirt == 1039 ) RemoveVehicleComponent( idcar, 1041 );
								else if( skirt == 1048 ) RemoveVehicleComponent( idcar, 1052 );
								else if( skirt == 1070 ) RemoveVehicleComponent( idcar, 1072 );
								else if( skirt == 1057 ) RemoveVehicleComponent( idcar, 1063 );
								else if( skirt == 1093 ) RemoveVehicleComponent( idcar, 1095 );
								// ALIEN
								if( skirt == 1026 ) RemoveVehicleComponent( idcar, 1027 );
								else if( skirt == 1036 ) RemoveVehicleComponent( idcar, 1040 );
								else if( skirt == 1047 ) RemoveVehicleComponent( idcar, 1051 );
								else if( skirt == 1069 ) RemoveVehicleComponent( idcar, 1071 );
								else if( skirt == 1056 ) RemoveVehicleComponent( idcar, 1062 );
								else if( skirt == 1094 ) RemoveVehicleComponent( idcar, 1090 );
							}
							if( CarInfo[ idcar ][ cRoof ] > 0 ) 	 	RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cRoof ] );
							if( CarInfo[ idcar ][ cSpoiler ] > 0 ) 	 	RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cSpoiler ] );
							if( CarInfo[ idcar ][ cRearBumper ] > 0 ) 	RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cRearBumper ] );
							if( CarInfo[ idcar ][ cFrontBumper ] > 0 ) 	RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cFrontBumper ] );
							if( CarInfo[ idcar ][ cExhaust ] > 0 ) 		RemoveVehicleComponent( idcar, CarInfo[ idcar ][ cExhaust ] );
							if( CarInfo[ idcar ][ cPaintjob ] > 0 ) 	ChangeVehiclePaintjob( idcar, 0 );
							ShowPlayerDialog( playerid, MECANICO_MENU_CHECK_REMOVEALL, DIALOG_STYLE_MSGBOX, "Restaurar valores del vehiculo a fabrica", "¿Estas seguro de que quieres hacer este cambio? (haras perder al cliente todo el tuneo del vehiculo)", "Si", "No" );
						} else
						return Message( playerid, COLOR_GRAD2, "Debes ser al menos rank 2 en tu faccion para poder usar esta funcion." );

					}
				}
			}
		}

		case MECANICO_MENU_CHECK_REMOVEALL:
		{
			if(response)
			{
				CarInfo[ idcar ][ cColorOne ] = 0;
				CarInfo[ idcar ][ cColorTwo ] = 0;
				CarInfo[ idcar ][ cWheel ] = 0;
				CarInfo[ idcar ][ cHydraulics ] = 0;
				CarInfo[ idcar ][ cNitro ] = 0;
				CarInfo[ idcar ][ cSideskirt ] = 0;
				CarInfo[ idcar ][ cRoof ] = 0;
				CarInfo[ idcar ][ cSpoiler ] = 0;
				CarInfo[ idcar ][ cRearBumper ] = 0;
				CarInfo[ idcar ][ cFrontBumper ] = 0;
				CarInfo[ idcar ][ cExhaust ] = 0;
				CarInfo[ idcar ][ cPaintjob ] = 0;
				Message( playerid, COLOR_WHITE, "Vehiculo devuelto a valores de fabrica!" );
			} else {
				AddCarTuning( idcar );
				Message( playerid, COLOR_GRAD2, "Vehiculo devuelto al estado anterior." );
				return 1;
			}
		}
		case MECANICO_MENU_REPARACION:
		{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0: {
						format(string, sizeof(string), "* %s arregla el motor del vehículo.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetVehicleHealth(idcar, 1000.0);
						return 1; 
					}
					case 1: {
						format(string, sizeof(string), "* %s coloca una carrocería nueva al vehículo y cambia el motor dañado.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RepairVehicle(idcar);
						return 1; 
					}
				}
			}
		}
		case MECANICO_MENU_EMBARGAR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "No estás en un vehículo!");
						if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Este vehículo no tiene dueño!");
						Message(playerid, COLOR_YELLOW, "¡Has agregado un embargo a este vehículo!");
						CarInfo[idcar][cEmbargo] += 1;
						return 1;
					}
					case 1:
					{
						if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "No estás en un vehículo!");
						if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Este vehículo no tiene dueño!");
						Message(playerid, COLOR_YELLOW, "¡Has quitado un embargo a este vehículo!");
						CarInfo[idcar][cEmbargo] -= 1;
						return 1;
					}
					case 2:
					{
						if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "No estás en un vehículo!");
						if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Este vehículo no tiene dueño!");
						ShowPlayerDialog(playerid, MECANICO_MENU_MULTAR, DIALOG_STYLE_INPUT, "-> Multar vehículo <-", "Estás a punto de multar un vehículo. Elige el precio que creas conveniente para sancionar el vehículo.\nRecuerda que el valor no debe sobrepasar los 3000$ de multa. Escribe el valor a multar:", "Multar", "Cancelar");
						return 1;
					}
					case 3:
					{
						ShowPlayerDialog(playerid, MECANICO_MENU_DESEMBARGAR, DIALOG_STYLE_INPUT, "-> Desembargar vehículo <-", "Inserta el ID del vehículo para desembargar.", "Desembargar", "Cancelar");
						return 1;
					}
				}
			}
		}
		case MECANICO_MENU_MULTAR:
		{
			if(response)
			{
				if(strval(inputtext) < 1 || strval(inputtext) > 3000) return Message(playerid, COLOR_GRAD2, "¡ Valor entre 1 - 3000$ !");
				if(CarInfo[idcar][cEmbargo] > 2) return Message(playerid, COLOR_GRAD2, "¡ Este vehículo ya alcanzó el máximo de embargos y no puedes multarlo !");
				if(CarInfo[idcar][cMulta] > 8999) return Message(playerid, COLOR_GRAD2, "¡ No puedes multar este vehículo. Muchas multas acumuladas !");
				CarInfo[idcar][cMulta] += strval(inputtext);
				format(string, sizeof(string), "  Multaste al vehículo con %d$!", strval(inputtext));
				Message(playerid, COLOR_WHITE, string);
				return 1;
			}
		}
		case MECANICO_MENU_DESEMBARGAR:
		{
			if(response)
			{
				if(!IsAnOwnableCar(strval(inputtext))) return Message(playerid, COLOR_GRAD2, "No es un vehículo con embargos!");
				CarInfo[strval(inputtext)][cMulta] = 0;
				CarInfo[strval(inputtext)][cEmbargo] = 0;
				format(string, sizeof(string), "  Desemargaste al vehículo: %s cuyo dueño es %s !", CarInfo[strval(inputtext)][cName],CarInfo[strval(inputtext)][cOwner]);
				Message(playerid, COLOR_WHITE, string);
				return 1;
			}
		}
		case MECANICO_MENU_TUNING:
		{
			if(response)
			{
				if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "No estás en un vehículo!");
				if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Este vehículo no tiene dueño!");
				switch(listitem)
				{
					case 0:	{ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_global, DIALOG_STYLE_LIST, "-> Piezas Globales <-", "Nitro\nLlantas\nSuspensión\nGPS", "Aceptar", "Atrás");}
					case 1:
					{
						if(Boats(idcar)) return Message(playerid, COLOR_GRAD2, "¡No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_SPECIAL, DIALOG_STYLE_LIST, "-> Tuning avanzado <-", "Piezas Wheel Arch Angels\nVinilo Alien\nVinilo Acces\nVinilo X-Flow", "Aceptar", "Atrás");
					}
					case 2: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_color, DIALOG_STYLE_LIST, "-> Cambiar Color <-", "Cambiar Color #1\nCambiar Color #2", "Aceptar", "Atrás");}
					case 3: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_name, DIALOG_STYLE_INPUT, "-> Cambiar Nombre Modelo <-", "Introduce el nuevo nombre del vehículo, ejemplo: Mercedes\n\nMáximo 12 carácteres.", "Cambiar", "Salir");}
					case 4: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_motor, DIALOG_STYLE_LIST, "-> Cambiar Motor <-", "Motor 95 \t(Capacidad gasolina: 100l)\nMotor 98 \t(Capacidad gasolina: 120l)\nMotor Diesel \t(Capacidad gasolina: 160l)\nMotor Biodiesel \t(Capacidad gasolina: 230l)", "Instalar","Salir");}
					case 5: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_bateria, DIALOG_STYLE_LIST, "-> Baterías <-", "Batería Cyclon 6V\t(Calidad: Baja)\nBatería Duncan 8V\t(Calidad: Media)\nBatería Bosch 12V\t(Calidad: Óptima)", "Instalar","Salir");}
				}
			}
		}
		case MECANICO_MENU_TUNING_SPECIAL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, TUNING_WAA, DIALOG_STYLE_LIST, "-> WAA <-", "Carrocería X-FLOW\nCarrocería Alien", "Aceptar", "Atrás");
					}
					case 1:
					{
						if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Vehículo sin dueño");
						if(IsLocolowVehicle(idcar) || IsWAAVehicle(idcar))
						{
							CarInfo[idcar][cPaintjob] = 1;
							ChangeVehiclePaintjob(idcar, CarInfo[idcar][cPaintjob]-1);
							Message(playerid, COLOR_GRAD2, "Vinilo instalado!");
						} else Message(playerid, COLOR_GRAD2, "Este vehículo no permite vinilos!");
					}
					case 2:
					{
						if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Vehículo sin dueño");
						if(IsLocolowVehicle(idcar) || IsWAAVehicle(idcar))
						{
							CarInfo[idcar][cPaintjob] = 2;
							ChangeVehiclePaintjob(idcar, CarInfo[idcar][cPaintjob]-1);
							Message(playerid, COLOR_GRAD2, "Vinilo instalado!");
						} else Message(playerid, COLOR_GRAD2, "Este vehículo no permite vinilos!");
					}
					case 3:
					{
						if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "Vehículo sin dueño");
						if(IsLocolowVehicle(idcar) || IsWAAVehicle(idcar))
						{
							CarInfo[idcar][cPaintjob] = 3;
							ChangeVehiclePaintjob(idcar, CarInfo[idcar][cPaintjob]-1);
							Message(playerid, COLOR_GRAD2, "Vinilo instalado!");
						} else Message(playerid, COLOR_GRAD2, "Este vehículo no permite vinilos!");
					}
				}
			}
		}
		case TUNING_WAA:
		{
			if(response)
			{
				switch(listitem)
				{
	            	// XFLOW TUNING
					case 0:
					{
						Message(playerid, COLOR_GRAD2, "CASE0");
						switch(GetVehicleModel(idcar))
						{
							case 560:
							{
								CarInfo[idcar][cSideskirt] = 	1030;
								CarInfo[idcar][cRoof] = 		1033;
								CarInfo[idcar][cSpoiler] = 		1139;
								CarInfo[idcar][cRearBumper] = 	1140;
								CarInfo[idcar][cFrontBumper] = 	1170;
								CarInfo[idcar][cExhaust] = 	1029;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería XFLOW Instalada!");
							}
							case 562:
							{
								CarInfo[idcar][cSideskirt] = 	1039;
								CarInfo[idcar][cRoof] = 		1035;
								CarInfo[idcar][cRearBumper] = 	1148;
								CarInfo[idcar][cFrontBumper] = 	1172;
								CarInfo[idcar][cExhaust] = 	1037;
								CarInfo[idcar][cSpoiler] = 	1146;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería XFLOW Instalada!");
							}
							case 565:
							{
								CarInfo[idcar][cSideskirt] = 	1048;
								CarInfo[idcar][cRoof] = 		1053;
								CarInfo[idcar][cSpoiler] = 		1050;
								CarInfo[idcar][cRearBumper] = 	1151;
								CarInfo[idcar][cFrontBumper] = 	1152;
								CarInfo[idcar][cExhaust] = 	1045;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería XFLOW Instalada!");
							}
							case 559:
							{
								CarInfo[idcar][cSideskirt] = 	1070;
								CarInfo[idcar][cRoof] = 		1068;
								CarInfo[idcar][cSpoiler] = 		1158;
								CarInfo[idcar][cRearBumper] = 	1161;
								CarInfo[idcar][cFrontBumper] = 	1173;
								CarInfo[idcar][cExhaust] = 	1066;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería XFLOW Instalada!");
							}
							case 561:
							{
								CarInfo[idcar][cSideskirt] = 	1057;
								CarInfo[idcar][cRoof] = 		1061;
								CarInfo[idcar][cSpoiler] = 		1060;
								CarInfo[idcar][cRearBumper] = 	1156;
								CarInfo[idcar][cFrontBumper] = 	1157;
								CarInfo[idcar][cExhaust] = 	1059;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería XFLOW Instalada!");
							}
							case 558:
							{
								CarInfo[idcar][cSideskirt] = 	1093;
								CarInfo[idcar][cRoof] = 		1091;
								CarInfo[idcar][cSpoiler] = 		1163;
								CarInfo[idcar][cRearBumper] = 	1167;
								CarInfo[idcar][cFrontBumper] = 	1165;
								CarInfo[idcar][cExhaust] = 	1089;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería XFLOW Instalada!");
							}
							default: Message(playerid, COLOR_GRAD2, "Este vehículo no permite este tipo de tuning.");
						}
					}
	        	    // ALIEN TUNING
					case 1:
					{
						Message(playerid, COLOR_GRAD2, "CASE0");
						switch(GetVehicleModel(idcar))
						{
							case 560:
							{
								CarInfo[idcar][cSideskirt] = 	1026;
								CarInfo[idcar][cRoof] = 		1032;
								CarInfo[idcar][cSpoiler] = 		1138;
								CarInfo[idcar][cRearBumper] = 	1141;
								CarInfo[idcar][cFrontBumper] = 	1169;
								CarInfo[idcar][cExhaust] = 	1028;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
							}
							case 562:
							{
								CarInfo[idcar][cSideskirt] = 	1036;
								CarInfo[idcar][cRoof] = 		1038;
								CarInfo[idcar][cRearBumper] = 	1149;
								CarInfo[idcar][cFrontBumper] = 	1171;
								CarInfo[idcar][cExhaust] = 	1034;
								CarInfo[idcar][cSpoiler] = 	1147;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
							}
							case 565:
							{
								CarInfo[idcar][cSideskirt] = 	1047;
								CarInfo[idcar][cRoof] = 		1054;
								CarInfo[idcar][cSpoiler] = 		1049;
								CarInfo[idcar][cRearBumper] = 	1150;
								CarInfo[idcar][cFrontBumper] = 	1153;
								CarInfo[idcar][cExhaust] = 	1046;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
							}
							case 559:
							{
								CarInfo[idcar][cSideskirt] = 	1069;
								CarInfo[idcar][cRoof] = 		1067;
								CarInfo[idcar][cSpoiler] = 		1162;
								CarInfo[idcar][cRearBumper] = 	1159;
								CarInfo[idcar][cFrontBumper] = 	1160;
								CarInfo[idcar][cExhaust] = 	1065;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
							}
							case 561:
							{
								CarInfo[idcar][cSideskirt] = 	1056;
								CarInfo[idcar][cRoof] = 		1055;
								CarInfo[idcar][cSpoiler] = 		1058;
								CarInfo[idcar][cRearBumper] = 	1154;
								CarInfo[idcar][cFrontBumper] = 	1153;
								CarInfo[idcar][cExhaust] = 	1064;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
							}
							case 558:
							{
								CarInfo[idcar][cSideskirt] = 	1094;
								CarInfo[idcar][cRoof] = 		1088;
								CarInfo[idcar][cSpoiler] = 		1164;
								CarInfo[idcar][cRearBumper] = 	1168;
								CarInfo[idcar][cFrontBumper] = 	1166;
								CarInfo[idcar][cExhaust] = 	1092;
								AddVehicleComponent(idcar, CarInfo[idcar][cSideskirt]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRoof]);
								AddVehicleComponent(idcar, CarInfo[idcar][cRearBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cFrontBumper]);
								AddVehicleComponent(idcar, CarInfo[idcar][cExhaust]);
								AddVehicleComponent(idcar, CarInfo[idcar][cSpoiler]);
								Message(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
							}
							default: Message(playerid, COLOR_GRAD2, "Este vehículo no permite este tipo de tuning.");
						}
					}
				}
			}
		}
		case MECANICO_MENU_TUNING_global:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(Boats(idcar)) return Message(playerid, COLOR_GRAD2, "¡No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, TUNING_MENU_NITRO, DIALOG_STYLE_LIST, "-> Nitroso <-", "x2\nx5\nx10", "Tunear", "<<");
					}
					case 1:
					{
						if(Boats(idcar)) return Message(playerid, COLOR_GRAD2, "¡No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, TUNING_MENU_RUEDAS, DIALOG_STYLE_LIST, "-> Menú Llantas <-", "OffRoad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Tunear", "<<");
					}
					case 2:
					{
						if(Boats(idcar)) return Message(playerid, COLOR_GRAD2, "¡No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_global_suspensionystereo, DIALOG_STYLE_LIST, "-> Supensión & Stereo <-", "Suspensión Hidráulica\nQuitar Suspension", "Tunear", "<<");
					}
					case 3: { CarInfo[idcar][cGPS] = 1; Message(playerid, COLOR_WHITE, "* Has instalado un GPS en el vehículo.");   }
				}
			}
		}
		case MECANICO_MENU_TUNING_color:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: { ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_color_1, DIALOG_STYLE_INPUT, "-> Cambiar Color #1 <-", "Inserta el ID del Color a pintar (0-255)", "Pintar", "Atrás"); }
					case 1: { ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_color_2, DIALOG_STYLE_INPUT, "-> Cambiar Color #2 <-", "Inserta el ID del Color a pintar (0-255)", "Pintar", "Atrás"); }
				}
			}
		}
		case MECANICO_MENU_TUNING_name:
		{
			if(response)
			{
				strmid(CarInfo[idcar][cName], inputtext, 0, strlen(inputtext), 12);
				format(string, sizeof(string), "- Nuevo modelo: %s", CarInfo[idcar][cPlate]);
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
			}
		}
		case MECANICO_MENU_TUNING_motor:
		{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0: { CarInfo[idcar][cGas] = 0; Message(playerid, COLOR_GRAD2, "Motor 95 instalado!"); }
					case 1: { CarInfo[idcar][cGas] = 1; Message(playerid, COLOR_GRAD2, "Motor 98 instalado!"); }
					case 2: { CarInfo[idcar][cGas] = 2; Message(playerid, COLOR_GRAD2, "Motor Diesel instalado!"); }
					case 3:	{ CarInfo[idcar][cGas] = 3; Message(playerid, COLOR_GRAD2, "Motor Biodiesel instalado!");  }
				}
			}
		}
		case MECANICO_MENU_TUNING_bateria:
		{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0: { CarInfo[idcar][cBattery] = 1000; Message(playerid, COLOR_GRAD2, "Batería Cyclon 6V instalado!"); }
					case 1: { CarInfo[idcar][cBattery] = 5000; Message(playerid, COLOR_GRAD2, "Batería Duncan 8V instalado!"); }
					case 2: { CarInfo[idcar][cBattery] = 10000; Message(playerid, COLOR_GRAD2, "Batería Bosch 12V instalado!"); }
				}
			}
		}
		case MECANICO_MENU_TUNING_global_suspensionystereo:
		{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0: { Message(playerid, COLOR_WHITE, ">- Suspensión Hidráulica -<"); CarInfo[idcar][cHydraulics] = 1087; AddVehicleComponent(idcar, CarInfo[idcar][cHydraulics]);  return 1; }
					case 1: { Message(playerid, COLOR_WHITE, ">- Suspensión Quitada -<"); CarInfo[idcar][cHydraulics] = 0; return 1; }
				}
			}
		}
		case MECANICO_MENU_TUNING_color_1:
		{
			if(response)
			{
				if(strval(inputtext) < 0 || strval(inputtext) > 255) return Message(playerid, COLOR_GRAD2, "ID Incorrecto de Color (0-255)");
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1134, cx, cy, cz);
				CarInfo[idcar][cColorOne] = strval(inputtext);
				ChangeVehicleColor(idcar, CarInfo[idcar][cColorOne], CarInfo[idcar][cColorTwo]);
			}
		}
		case MECANICO_MENU_TUNING_color_2:
		{
			if(response)
			{
				if(strval(inputtext) < 0 || strval(inputtext) > 255) return Message(playerid, COLOR_GRAD2, "ID Incorrecto de Color (0-255)");
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1134, cx, cy, cz);
				CarInfo[idcar][cColorTwo] = strval(inputtext);
				ChangeVehicleColor(idcar, CarInfo[idcar][cColorOne], CarInfo[idcar][cColorTwo]);
			}
		}
		case TUNING_MENU_RUEDAS:
		{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0: { Message(playerid, COLOR_WHITE, ">- Llantas OffRoad puestas! -<"); CarInfo[idcar][cWheel] = 1025; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]); return 1; }
					case 1: { Message(playerid, COLOR_WHITE, ">- Llantas Shadow puestas! -<"); CarInfo[idcar][cWheel] = 1073; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 2: { Message(playerid, COLOR_WHITE, ">- Llantas Mega puestas! -<"); CarInfo[idcar][cWheel] = 1074; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]); return 1; }
					case 3: { Message(playerid, COLOR_WHITE, ">- Llantas Rimshine puestas! -<"); CarInfo[idcar][cWheel] = 1075; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 4: { Message(playerid, COLOR_WHITE, ">- Llantas Wires puestas! -<"); CarInfo[idcar][cWheel] = 1076; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 5: { Message(playerid, COLOR_WHITE, ">- Llantas Classic puestas! -<"); CarInfo[idcar][cWheel] = 1077; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 6: { Message(playerid, COLOR_WHITE, ">- Llantas Twist puestas! -<"); CarInfo[idcar][cWheel] = 1078; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 7: { Message(playerid, COLOR_WHITE, ">- Llantas Cutter puestas! -<"); CarInfo[idcar][cWheel] = 1079; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 8: { Message(playerid, COLOR_WHITE, ">- Llantas Switch puestas! -<"); CarInfo[idcar][cWheel] = 1080; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 9: { Message(playerid, COLOR_WHITE, ">- Llantas Grove puestas! -<"); CarInfo[idcar][cWheel] = 1081; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 10: { Message(playerid, COLOR_WHITE, ">- Llantas Import puestas! -<"); CarInfo[idcar][cWheel] = 1082; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 11: { Message(playerid, COLOR_WHITE, ">- Llantas Dollar puestas! -<"); CarInfo[idcar][cWheel] = 1083; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 12: { Message(playerid, COLOR_WHITE, ">- Llantas Trance puestas! -<"); CarInfo[idcar][cWheel] = 1084; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 13: { Message(playerid, COLOR_WHITE, ">- Llantas Atomic puestas! -<"); CarInfo[idcar][cWheel] = 1085; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 14: { Message(playerid, COLOR_WHITE, ">- Llantas Atomic puestas! -<"); CarInfo[idcar][cWheel] = 1096; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 15: { Message(playerid, COLOR_WHITE, ">- Llantas Atomic puestas! -<"); CarInfo[idcar][cWheel] = 1097; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
					case 16: { Message(playerid, COLOR_WHITE, ">- Llantas Atomic puestas! -<"); CarInfo[idcar][cWheel] = 1098; AddVehicleComponent(idcar, CarInfo[idcar][cWheel]);  return 1; }
				}
			}
		}
		case TUNING_MENU_NITRO:{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0: { Message(playerid, COLOR_WHITE, "Nitro x2 Instalado."); CarInfo[idcar][cNitro] = 1009; AddVehicleComponent(idcar, CarInfo[idcar][cNitro]); return 1; }
					case 1: { Message(playerid, COLOR_WHITE, "Nitro x5 Instalado."); CarInfo[idcar][cNitro] = 1008; AddVehicleComponent(idcar, CarInfo[idcar][cNitro]); return 1; }
					case 2: { Message(playerid, COLOR_WHITE, "Nitro x10 Instalado."); CarInfo[idcar][cNitro] = 1010; AddVehicleComponent(idcar, CarInfo[idcar][cNitro]); return 1; }
				}
			}
		}
		case MECANICO_MENU_OTROS:
		{
			if(response)
			{
				GetVehiclePos(idcar, cx, cy, cz);
				PlayerPlaySound(playerid, 1133, cx, cy, cz);
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, MECANICO_MENU_OTROS_matricula, DIALOG_STYLE_INPUT, "-> Matricula <-", "Inserta una matrícula, de 5 carácteres numéricos", "Matricular", "Atrás");
					}
					case 1:
					{
						KillTimer(mmtimer);
						mmtimer = SetTimer("MM_Noise", 1000, true);
						SetTimerEx("MM_Exam", 6000, false, "i", playerid);
						Message(playerid, COLOR_WHITE, "* Examinando vehículo, espere");
					}
					case 2:
					{
						CarInfo[idcar][cAlarm] = 1;
						Message(playerid, COLOR_WHITE, "Alarma instalada!");
					}
				}
			}
		}
		case MECANICO_MENU_OTROS_matricula:
		{
			if(response)
			{
				if(strval(inputtext) > 99999 || strval(inputtext) < 11111) return ShowPlayerDialog(playerid, MECANICO_MENU_OTROS_matricula, DIALOG_STYLE_INPUT, "-> Matricula <-", "Inserta una matrícula, de 5 carácteres numéricos", "Matricular", "Atrás");
				format(string, sizeof(string), "SA - %d", strval(inputtext));
				strmid(CarInfo[idcar][cPlate], string, 0, strlen(string), 11);
				SetVehicleNumberPlate(idcar, CarInfo[idcar][cPlate]);
				Message(playerid, COLOR_WHITE, "Martrícula cambiada! Cuando respawnee el vehículo se verá la nueva matrícula!");
			}
		}
		case REQF_ACCEPT:
		{
			if(response)
			{
				format(string, sizeof(string), "¡Felicidades! Ahora trabajas en %s, aceptaste el contrato!",ReqF_Name[playerid]);
				Message(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pMember]= ReqF_Faction[playerid];
				PlayerInfo[playerid][pRank] = 1;
				UpdatePlayerStat(playerid);
				format(string, sizeof(string), "* %s acepta un contrato.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
			}
			else
			{
				Message(playerid, COLOR_GRAD2, "Rechazaste el contrato.");
				format(string, sizeof(string), "* %s rechaza un contrato.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
			}
		}
		case ENTER_LSTV:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						Pause(playerid);
						SetPosEx(playerid, -2719.7854,519.2936,48.3752,0,0,0);
						GText(playerid, "~g~~h~lstv", 5000, 1);
					}
					case 1:
					{
						Pause(playerid);
						SetPosEx(playerid, 243.2710,302.7583,999.1343+1,0,0,0);
						GText(playerid, "~g~~h~lstv", 5000, 1);
					}
				}
			}
		}
		case GASOLINA_DIALOG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: FuelCar(playerid, 0);
					case 1: FuelCar(playerid, 1);
					case 2: FuelCar(playerid, 2);
					case 3: FuelCar(playerid, 3);
				}
			}
		}
		case IMPORTAR_MOTOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						Message(playerid, COLOR_YELLOW, "Motor instalado: sin plomo 95, capacidad: 100l");
						CarInfo[idcar][cGas] = 0;
					}
					case 1:
					{
						Message(playerid, COLOR_YELLOW, "Motor instalado: sin plomo 98, capacidad: 120l");
						CarInfo[idcar][cGas] = 1;
					}
					case 2:
					{
						Message(playerid, COLOR_YELLOW, "Motor instalado: Diesel, capacidad: 160l");
						CarInfo[idcar][cGas] = 2;
					}
					case 3:
					{
						Message(playerid, COLOR_YELLOW, "Motor instalado: Biodiesel, capacidad: 230l");
						CarInfo[idcar][cGas] = 3;
					}
				}
			}
			else
			{
				CarInfo[idcar][cGas] = 0;
				Message(playerid, COLOR_YELLOW, "Motor asignado estándar (Sin plomo 95), capacidad: 100 litros");
			}
		}
		case DIALOG_PAINTBALL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetPosEx(playerid,-1410.72,1591.16,1052.53,0,14,0);
						Bought(playerid, 1000);
						Till(20, 1000);
						ArmarPaintBall(playerid);
						PaintballType[playerid] = 1;
						TotalDM += 1;
					}
					case 1:
					{
						format(string, sizeof(string), "{41FF2F} Equipo Verde (%d)\n{FF7617} Equipo Naranja (%d)", TTeamVerde, TTeamNaranja);
						ShowPlayerDialog(playerid, DIALOG_PAINTBALL_TVT, DIALOG_STYLE_LIST, "Team vs Team", string, "Aceptar", "Cancelar");
					}
					case 2:
					{
						Pause(playerid);
						SetPosEx(playerid,1975.8000,1619.4677,-11.8929,0,0,0);
						Bought(playerid, 1000);
						Till(20, 1000);
						ArmarPaintBall(playerid);
						PaintballType[playerid] = 4;
						TotalPlayer += 1;
					}
				}
			}
		}
		case DIALOG_PAINTBALL_TVT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetPosEx(playerid,-1131.2336,1057.7888,1346.4170,0,10,0);
						Bought(playerid, 1000);
						Till(20, 1000);
						ArmarPaintBall(playerid);
						PaintballType[playerid] = 3;
						TTeamVerde += 1;
						SetPlayerColor(playerid, VERDE_ADMIN);
					}
					case 1:
					{
						SetPosEx(playerid,-973.1844,1061.3037,1345.6699,0,10,0);
						Bought(playerid, 1000);
						Till(20, 1000);
						ArmarPaintBall(playerid);
						PaintballType[playerid] = 2;
						TTeamNaranja += 1;
						SetPlayerColor(playerid, ORANGE_ADMIN);
					}
				}
			}
		}
		case IPOD_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new strcan[2000];
						new can0[] = "Let her go - Passenger\nGet lucky - Daft Punk\nThrift shop - Macklemore\nJust give me a reason - Pink\nI could be the one - Avicii\n";
						new can1[] = "Play hard - David Guetta\nHo hey - The Lumineers\nImpossible - James Arthur\nLive it up - Jennifer Lopez\nMore than friends - Inna\nBlurred lines - Robin Thicke\n";
						new can2[] = "Come & get it - Selena Gomez\nOn top of the world - Imagine Dragons\nThe other side - Jason Derulo\n¡Corre! - Jesse & Joy\nI love it - Icona Pop\n";
						new can3[] = "Turn on the radio - Xuso Jones\nRight now - Kostrok\nMirrors - Justin Timberlake\nLove me again - John Newman\nCero - Dani Martin\nStay - Rihanna\n";
						new can4[] = "Quién - Pablo Alborán\nWhen I was your man - Bruno Mars\nNo digas nada -Cali & El Dandee\nUnbreakable - Marien Baker\nVuelvo a verte - Malu\nCamino de rosas - Alejandro Sanz\n";
						new can5[] = "Heartbreaker - Auryn\nFunketón - Efecto Pasillo\nWalks like Rihanna - The Wanted\nGitana - El viaje de Elliot\nMe enamoré (Feeling of love) - XRIZ\nTu jardín con enanitos - Melendi\nMondays - Yanela Brooks\n";
						new can6[] = "Make my day - Auryn\nPretty boy - Edurne\nCon fuego - Soraya\nBoy toy - Angy\nViven - Rasel";
						format(strcan, sizeof(strcan), "%s%s%s%s%s%s%s", can0,can1,can2,can3,can4,can5,can6);
						ShowPlayerDialog(playerid, IPOD_MP3, DIALOG_STYLE_LIST, "IPOD - Lista de Canciones", strcan, "Escuchar", "Atrás");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, Radios, DIALOG_STYLE_LIST,
							"Selecciona Tu Emisora","{ADFF2F}Drumm Bass\n{7B68EE}LaMEGARADIO\nRMassiveDubstep\n{912CEE}ReservaRap\n{CAE1FF}Los40\nReggae\n{FF8000}House",
							"Sintonizar", "Cancelar");
					}
					case 2:
					{
						StopAudioStreamForPlayer(playerid);
						Message(playerid, COLOR_GRAD2, "¡Apagaste tu IPOD!");
						format(string, sizeof(string), "* %s apaga su ipod y lo guarda en su bolsillo.", PlayerName(playerid));
						ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
		}

		case IPOD_MP3:
		{
			if(response)
			{
				switch(listitem)
				{

					case 0:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Passenger%20%20%20Let%20Her%20Go%20%5BOfficial%20Video%5D.mp3");

					}
					case 1:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Daft%20Punk%20%20%20Get%20Lucky%20%28Official%20Audio%29%20ft%20Pharrell%20Williams%5B1%5D.mp3");

					}
					case 2:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/MACKLEMORE%20%20RYAN%20LEWIS%20%20%20THRIFT%20SHOP%20FEAT%20WANZ%20%28OFFICIAL%20VIDEO%29.mp3");

					}
					case 3:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/P%21nk%20%20%20Just%20Give%20Me%20A%20Reason%20ft%20Nate%20Ruess.mp3");

					}
					case 4:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Avicii%20vs%20Nicky%20Romero%20%20%20I%20Could%20Be%20The%20One%20%28Official%20Music%20Video%29.mp3");

					}
					case 5:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/David%20Guetta%20%20%20Play%20Hard%20%28Official%20Video%29%20ft%20Ne%20Yo%2C%20Akon.mp3");

					}
					case 6:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/The%20Lumineers%20%20%20Ho%20Hey%20%28Official%20Video%29.mp3");

					}
					case 7:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/James%20Arthur%20%20%20Impossible%20%20%20Official%20Single.mp3");

					}
					case 8:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Jennifer%20Lopez%20%20%20Live%20It%20Up%20ft%20Pitbull.mp3");

					}
					case 9:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/INNA%20feat%20Daddy%20Yankee%20%20%20More%20Than%20Friends%20%28Official%20Music%20Video%29.mp3");

					}
					case 10:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Robin%20Thicke%20%20%20Blurred%20Lines%20ft%20TI%2C%20Pharrell.mp3");

					}
					case 11:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Selena%20Gomez%20%20%20Come%20%20Get%20It.mp3");

					}
					case 12:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Imagine%20Dragons%20%20%20On%20Top%20of%20the%20World%20%20%20Lyrics.mp3");

					}
					case 13:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Jason%20Derulo%20%27The%20Other%20Side%27%20Lyrics.mp3");

					}
					case 14:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Jesse%20%20Joy%20%20%20Corre%20%20%28Lyric%20Video%29.mp3");

					}
					case 15:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Icona%20Pop%20%20%20I%20Love%20It%20%28feat%20Charli%20XCX%29%20%5BOFFICIAL%20VIDEO%5D.mp3");

					}
					case 16:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Xuso%20Jones%20%20%20Turn%20On%20The%20Radio%20%28Lyric%20Video%29.mp3");

					}
					case 17:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Kostrok%20%20%20Right%20Now%20%28Official%20Lyric%20Video%29.mp3");

					}
					case 18:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Justin%20Timberlake%20%20%20Mirrors.mp3");

					}
					case 19:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/John%20Newman%20%20%20Love%20Me%20Again.mp3");

					}
					case 20:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Dani%20Martin%20%20%20Cero.mp3");

					}
					case 21:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Rihanna%20%20%20Stay%20ft%20Mikky%20Ekko.mp3");

					}
					case 22:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Pablo%20Alboran%20%20%20Qui%C3%A9n.mp3");

					}
					case 23:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Bruno%20Mars%20%20%20When%20I%20Was%20Your%20Man%20%5BOfficial%20Video%5D.mp3");

					}
					case 24:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Cali%20Y%20El%20Dandee%20%20%20No%20Digas%20Nada%20%28D%C3%A9j%C3%A0%20vu%29%20%20%20Lyric%20Video.mp3");

					}
					case 25:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Marien%20Baker%20%20%20Unbreakable%20%28feat%20Shaun%20Frank%29.mp3");

					}
					case 26:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Malu%20Con%20Pablo%20Alboran%20%20%20Vuelvo%20A%20Verte.mp3");

					}
					case 27:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Alejandro%20Sanz%20%20%20Camino%20De%20Rosas.mp3");

					}
					case 28:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/AURYN%20%20Heartbreaker%20%28Lyric%20video%29.mp3");

					}
					case 29:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Efecto%20pasillo%20%20%20Funket%C3%B3n.mp3");

					}
					case 30:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/The%20Wanted%20%20%20Walks%20Like%20Rihanna.mp3");

					}
					case 31:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/El%20Viaje%20De%20Elliot%20%20%20Gitana%20%28Videoclip%20Oficial%29.mp3");

					}
					case 32:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/XRIZ%20%20%20Me%20Enamor%C3%A9%20%28Feeling%20Of%20Love%29.mp3");

					}
					case 33:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Melendi%20%20%20Tu%20Jard%C3%ADn%20con%20enanitos.mp3");

					}
					case 34:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Yanela%20Brooks%20%20%20Mondays%20ft%20Brian%20Cross%20%28Audio%20Oficial%29.mp3");

					}
					case 35:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Auryn%20%20%20Make%20my%20day.mp3");

					}
					case 36:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Edurne%20%20%20Pretty%20Boy.mp33");

					}
					case 37:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Soraya%20%20%20Con%20Fuego%20%28Official%20video%29.mp3");

					}
					case 38:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Angy%20%20%20Boytoy.mp3");

					}
					case 39:
					{
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Rasel%20%20%20Viven%20%28feat%20Jadel%29.mp3");

					}

				}
			} else ShowPlayerDialog(playerid, IPOD_MENU, DIALOG_STYLE_LIST, "IPOD Menú", "MP3\nRadio\nApagar", "Aceptar", "Salir");
		}
		case Radios:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid, YELLOW, "Radio DrumBass Sintonizada");
						GameTextForPlayer(playerid,"~w~Radio DrumBass Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/Drum%26Bass.pls/");
					}
					case 1:
					{
						SendClientMessage(playerid, YELLOW, "LaMEGARADIO Sintonizada");
						GameTextForPlayer(playerid,"~Y~LaMEGARADIO Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/LaMEGARADIO.pls/");

					}
					case 2:
					{
						SendClientMessage(playerid, YELLOW, "Radio MassiveDubstep Sintonizada");
						GameTextForPlayer(playerid,"~w~Radio MassiveDubstep Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/Massive%20Dubstep.pls/");

					}
					case 3:
					{
						SendClientMessage(playerid, YELLOW, "Radio ReservaRap Sintonizada");
						GameTextForPlayer(playerid,"~w~Radio ReservaRap Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/GranReservaRAP.m3u/");

					}
					case 4:
					{
						SendClientMessage(playerid, YELLOW, "Radio Los40 Sintonizada");
						GameTextForPlayer(playerid,"~w~Radio Los40 Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/LOS40.pls/");
					}
					case 5:
					{
						SendClientMessage(playerid, YELLOW, "Radio Reggae Sintonizada");
						GameTextForPlayer(playerid,"~w~Radio Reggae Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/La%20Grosse%20Radio%20Reggae.pls");

					}
					case 6:
					{
						SendClientMessage(playerid, YELLOW, "Radio House Sintonizada");
						GameTextForPlayer(playerid,"~w~Radio House Sintonizada",5000,3);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/HouseTime.pls");

					}
				}
			} 
		}
		case RECARGA_PHONE:
		{
			if(response)
			{
				if(DetectNumber(inputtext))
				{
					RecNumber[playerid] = strval(inputtext);
					format(string,sizeof(string),"{FFFFFF}¿Confirmas tu numero celular: %d?", RecNumber[playerid]);
					ShowPlayerDialog(playerid, OTECEL_CONFIRM, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL", string, "Confirmar", "Cancelar");
				}
				else { ShowPlayerDialog(playerid, RECARGA_PHONE, DIALOG_STYLE_INPUT, "{018CFE}OTECEL - Operadora", "{FFFFFF}Solo se permite ingresar números, mínimo 4 digitos\nIngrese su numero nuevamente:", "Aceptar", "Cancelar"); }
			}
		}
		case OTECEL_CONFIRM:
		{
			if(response)
			{
				if(RecNumber[playerid] == PlayerInfo[playerid][pPnumber])
				{
					ShowPlayerDialog(playerid, OTECEL_PAQUETES, DIALOG_STYLE_LIST, "{018CFE}Paquetes OTECEL", " 60$ Llamadas - 15 Mensajes\t $100\n 120$ LLamadas - 30 Mensajes\t $200\n 60$ LLamadas\t\t\t $60\n 120$ Llamadas\t\t\t $120\n 15 Mensajes\t\t\t $45\n 30 Mensajes\t\t\t $90", "Seleccionar", "Cancelar");
					RecNumber[playerid] = 0;
				}
				else { ShowPlayerDialog(playerid, RECARGA_PHONE, DIALOG_STYLE_INPUT, "{018CFE}OTECEL - Operadora", "{FFFFFF}Segun nuestro sistema ese numero esta a nombre\nde otra persona, ingrese nuevamente su número:", "Aceptar", "Cancelar"); }
			}
			else { ShowPlayerDialog(playerid, RECARGA_PHONE, DIALOG_STYLE_INPUT, "{018CFE}Operadora de Telefonia Celular OTECEL", "{FFFFFF}Ingresa tu numero celular para realizar la recarga", "Aceptar", "Cancelar"); }
		}
		case OTECEL_PAQUETES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: {
						Till(13, 100);
						Bought(playerid, 100);
						PlayerInfo[playerid][pMinutes] += 600;
						PlayerInfo[playerid][pMTexto] += 15;
						ShowPlayerDialog(playerid,1419, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Confirmación", "{FFFFFF}Recarga celular realizada: 60$ Llamadas - 15 Mensajes", "Aceptar", "");
					}
					case 1: {
						Till(13, 200);
						Bought(playerid, 200);
						PlayerInfo[playerid][pMinutes] += 1200;
						PlayerInfo[playerid][pMTexto] += 30;
						ShowPlayerDialog(playerid,1419, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Confirmación", "{FFFFFF}Recarga celular realizada: 120$ Llamadas - 30 Mensajes", "Aceptar", "");
					}
					case 2: {
						Till(13, 60);
						Bought(playerid, 60);
						PlayerInfo[playerid][pMinutes] += 600;
						ShowPlayerDialog(playerid,1419, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Confirmación", "{FFFFFF}Recarga celular realizada: 60$ Llamadas", "Aceptar", "");
					}
					case 3: {
						Till(13, 120);
						Bought(playerid, 120);
						PlayerInfo[playerid][pMinutes] += 1200;
						ShowPlayerDialog(playerid,1419, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Confirmación", "{FFFFFF}Recarga celular realizada: 120$ Llamadas", "Aceptar", "");
					}
					case 4: {
						Till(13, 45);
						Bought(playerid, 45);
						PlayerInfo[playerid][pMTexto] += 15;
						ShowPlayerDialog(playerid,1419, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Confirmación", "{FFFFFF}Recarga celular realizada: 15 Mensajes", "Aceptar", "");
					}
					case 5: {
						Till(13, 90);
						Bought(playerid, 90);
						PlayerInfo[playerid][pMTexto] += 30;
						ShowPlayerDialog(playerid,1419, DIALOG_STYLE_MSGBOX, "{018CFE}OTECEL - Confirmación", "{FFFFFF}Recarga celular realizada: 30 Mensajes", "Aceptar", "");
					}
				}
			}
		}
		case MATRIMONIO_DIALOG:
		{
			if(response)
			{
				if(!IsPlayerConnected(strval(inputtext))) return Message(playerid, COLOR_GRAD2, "Jugador no conectado");
				if(!ProxDetectorS(5.0,playerid,strval(inputtext))) return Message(playerid, COLOR_GRAD2, "Estan demasiado lejos.");
				if(PlayerInfo[strval(inputtext)][pMarried] == 1) return Message(playerid, COLOR_GRAD2, "¡Esa persona ya esta casada!");
				if(PlayerInfo[strval(inputtext)][pSex] == 1) return Message(playerid, COLOR_GRAD2, "¡Solo se permiten matrimonio entre hombre y mujer!");
				if(strval(inputtext) == playerid) return Message(playerid, COLOR_GRAD2, "¡No te puedes casar contigo mismo!");
				Matrimonio[playerid] = strval(inputtext);
				Matrimonio[Matrimonio[playerid]] = playerid;
				format(string, sizeof(string), "Padre Torres dice: %s, ¿aceptas como esposo a %s para amarlo y respetarlo, en la", PlayerName(Matrimonio[playerid]),PlayerName(playerid));
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				ProxDetector(20.0, playerid, "Padre Torres dice: salud y en la enfermedad, en la pobreza y en la riqueza hasta que la muerte los separe?" ,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				ShowPlayerDialog(Matrimonio[playerid], MATRIMONIO_CONFIRM, DIALOG_STYLE_MSGBOX,"{018CFE}Iglesia", "{FFFFFF}Por favor selecione su respuesta","SI Acepto","NO Acepto");
			}
		}
		case MATRIMONIO_CONFIRM:
		{
			if(response)
			{
				format(string, sizeof(string), "%s dice: Si, acepto.", PlayerName(playerid));
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				format(string, sizeof(string), "* %s toma la mano de %s y le pone un anilo.", PlayerName(playerid), PlayerName(Matrimonio[playerid]));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Padre Torres dice: %s, ¿aceptas como tu esposa a %s para amarla y respetarla, en la", PlayerName(Matrimonio[playerid]),PlayerName(playerid));
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				ProxDetector(20.0, playerid, "Padre Torres dice: salud y en la enfermedad, en la pobreza y en la riqueza hasta que la muerte los separe?",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				ShowPlayerDialog(Matrimonio[playerid], MATRIMONIO_CONFIRM2, DIALOG_STYLE_MSGBOX,"{018CFE}Iglesia", "{FFFFFF}Por favor selecione su respuesta","SI Acepto","NO Acepto");
			}
			else
			{
				format(string, sizeof(string), "%s dice: No, lo siento no me puedo casar.", PlayerName(playerid));
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				Matrimonio[Matrimonio[playerid]] = 999;
				Matrimonio[playerid] = 999;
			}
		}
		case MATRIMONIO_CONFIRM2:
		{
			if(response)
			{
				format(string, sizeof(string), "%s dice: Si, acepto.", PlayerName(playerid));
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				format(string, sizeof(string), "* %s toma la mano de %s y le pone un anilo.", PlayerName(playerid), PlayerName(Matrimonio[playerid]));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s y %s firman en un libro.", PlayerName(playerid), PlayerName(Matrimonio[playerid]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ProxDetector(20.0, playerid, "Padre Torres dice: Por el poder que me concede la Santa Iglesia Catolica, yo los declaro marido y mujer,",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				ProxDetector(20.0, playerid, "Padre Torres dice: Que lo que hoy a unido Dios no lo separe el hombre, puedes besar a la novia.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				strmid(PlayerInfo[playerid][pMarriedTo], PlayerName(Matrimonio[playerid]), 0, strlen(PlayerName(Matrimonio[playerid])), 64);
				strmid(PlayerInfo[Matrimonio[playerid]][pMarriedTo], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 64);
				Bought(playerid, 8000);
				PlayerInfo[playerid][pMarried] = 1;
				PlayerInfo[Matrimonio[playerid]][pMarried] = 1;
				Matrimonio[Matrimonio[playerid]] = 999;
				Matrimonio[playerid] = 999;
			}
			else
			{
				format(string, sizeof(string), "%s dice: No, lo siento no me puedo casar.", PlayerName(playerid));
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				Matrimonio[Matrimonio[playerid]] = 999;
				Matrimonio[playerid] = 999;
			}
		}
		case DIVORCIO_DIALOG:
		{
			if(response)
			{
				Message(playerid, COLOR_GRAD2, "* Ahora debes esperar su respuesta.");
				format(string, sizeof(string), "{FFFFFF}%s ha hecho una peticion de divorcio, ¿aceptas firmar el divorcio?", PlayerName(playerid));
				ShowPlayerDialog(Divorciar[playerid], DIVORCIO_CONFIRM, DIALOG_STYLE_MSGBOX, "{018CFE}Iglesia - Divorcio", string, "Aceptar", "Cancelar");
			}
		}
		case DIVORCIO_CONFIRM:
		{
			if(response)
			{
				strmid(PlayerInfo[playerid][pMarriedTo], "Nadie", 0, strlen("Nadie"), 64);
				strmid(PlayerInfo[Divorciar[playerid]][pMarriedTo], "Nadie", 0, strlen("Nadie"), 64);
				PlayerInfo[playerid][pMarried] = 0;
				PlayerInfo[Divorciar[playerid]][pMarried] = 0;
				format(string, sizeof(string), "* Te has divorciado de %s, ahora eres libre", PlayerName(Divorciar[playerid]));
				Message(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "* Te has divorciado de %s, ahora eres libre", PlayerName(playerid));
				Message(Divorciar[playerid], COLOR_GRAD4, string);
				format(string, sizeof(string), "* %s y %s firman un documento.", PlayerName(playerid), PlayerName(Divorciar[playerid]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Divorciar[playerid] = 999;
				Divorciar[Divorciar[playerid]] = 999;
			}
			else
			{
				Message(playerid, COLOR_GRAD2, "* Rechazaste la peticion de divorcio.");
				format(string, sizeof(string), "%s no ha aceptado la peticion de divorcio", PlayerName(playerid));
				Message(Divorciar[playerid], COLOR_GRAD2, string);
				Divorciar[playerid] = 999;
				Divorciar[Divorciar[playerid]] = 999;
			}
		}
		case HOUSE_IMPUESTOS:
		{
			if(response)
			{
				if(strlen(inputtext) < 1) return ShowPlayerDialog(playerid, HOUSE_IMPUESTOS, DIALOG_STYLE_INPUT, "Casa de Impuestos", "{FFFFFF}Por favor ingrese su numero de DNI", "Aceptar", "Cancelar");
				if(strval(inputtext) != PlayerInfo[playerid][pDNI]) return ShowPlayerDialog(playerid, HOUSE_IMPUESTOS, DIALOG_STYLE_INPUT, "Casa de Impuestos", "{FFFFFF}Nuestro sistema ha detectado que ninguna propiedad se encuentra\nrelacionada con ese numero de DNI, por favor revise bien.", "Aceptar", "Cancelar");
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hTime] = gettime() + 2592000;
				Message(playerid, COLOR_WHITE, "{FF7617}Casa de Impuestos: {FFFFFF}Ha realizado su pago de impuestos, recuerde acercarse el próximo mes.");
				Bought(playerid, 25000);
				Tax += 25000;
				return 1;
			}
		}
		case COMPRAR_JOYAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(CheckMoney(playerid, 40000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir un Anillo de Compromiso valorado en 40000$.");
							PlayerInfo[playerid][pAnilloCom] += 1;
							Bought(playerid, 25000);
							Till(29, 25000);
						}
					}
					case 1:
					{
						if(CheckMoney(playerid, 50000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir un Anillo de Oro valorado en 50000$.");
							PlayerInfo[playerid][pAnilloOro] += 1;
							Bought(playerid, 50000);
							Till(29, 50000);
						}
					}
					case 2:
					{
						if(CheckMoney(playerid, 100000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir un Collar de Perlas valorado en 100000$.");
							PlayerInfo[playerid][pCollar] += 1;
							Bought(playerid, 100000);
							Till(29, 100000);
						}
					}
					case 3:
					{
						if(CheckMoney(playerid, 140000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir un Anillo de de Diamantes valorado en 140000$.");
							PlayerInfo[playerid][pAnilloDia] += 1;
							Bought(playerid, 140000);
							Till(29, 140000);
						}
					}
					case 4:
					{
						if(CheckMoney(playerid, 80000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir una Pulsera de Oro valorada en 80000$.");
							PlayerInfo[playerid][pPulsera] += 1;
							Bought(playerid, 80000);
							Till(29, 80000);
						}
					}
					case 5:
					{
						if(CheckMoney(playerid, 18000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir un Arete de Diamantes valorado en 18000$.");
							PlayerInfo[playerid][pAretes] += 1;
							Bought(playerid, 18000);
							Till(29, 18000);
						}
					}
					case 6:
					{
						if(CheckMoney(playerid, 46000))
						{
							Message(playerid, COLOR_WHITE, "* {FFFF00}Joyeria: {FFFFFF}Acabas de adquirir un Reloj de Oro valorado en 46000$.");
							PlayerInfo[playerid][pReloj] += 1;
							Bought(playerid, 46000);
							Till(29, 46000);
						}
					}
				}
			}
		}
		case CARGAR_CAMION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						Mercancia[playerid] = 1;
						PlayerIsRuta[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 5.0);
						Message(playerid, COLOR_WHITE, "¡Dirígete al checkpoint para recoger tu carga!");
					}
					case 1:
					{
						Mercancia[playerid] = 2;
						PlayerIsRuta[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 5.0);
						Message(playerid, COLOR_WHITE, "¡Dirígete al checkpoint para recoger tu carga!");
					}
					case 2:
					{
						Mercancia[playerid] = 3;
						PlayerIsRuta[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 5.0);
						Message(playerid, COLOR_WHITE, "¡Dirígete al checkpoint para recoger tu carga!");
					}
					case 3:
					{
						Mercancia[playerid] = 4;
						PlayerIsRuta[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 5.0);
						Message(playerid, COLOR_WHITE, "¡Dirígete al checkpoint para recoger tu carga!");
					}
					case 4:
					{
						Mercancia[playerid] = 5;
						PlayerIsRuta[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 5.0);
						Message(playerid, COLOR_WHITE, "¡Dirígete al checkpoint para recoger tu carga!");
					}
					case 5:
					{
						Mercancia[playerid] = 6;
						PlayerIsRuta[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2197.9363,-2659.8430,13.5469, 5.0);
						Message(playerid, COLOR_WHITE, "¡Dirígete al checkpoint para recoger tu carga!");
					}
				}
			}
			else RemovePlayerFromVehicle(playerid);
		}
		case DIALOG_PUERTO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(CheckMoney(playerid,1000))
						{
							PlayerInfo[playerid][pImplementos] = 1;
							Message(playerid, COLOR_GRAD2, "* Has comprado los implementos necesarios para la pesca.");
							Bought(playerid, 1000);
							Till(15, 1000);
						}
					}
					case 1:
					{
						if(CheckMoney(playerid, 100))
						{
							Till(15, 100);
							Bought(playerid, 100);
							PlayerInfo[playerid][pCarnada] += 500;
							Message(playerid, COLOR_GRAD2, "* Has comprado carnada, te servira para realizar 5 tiros de redes.");
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pPeces] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes nada para vender!");
						new ganado = PlayerInfo[playerid][pPeces]*6;
						PlayerInfo[playerid][pCheques] += ganado;
						format(string, sizeof(string), "* Has ganado %d$ vendiendo los peces a Roberto.", ganado);
						Message(playerid, YELLOW, string);
						ProxDetector(20.0, playerid, "Roberto dice: Bien aqui esta tu cheque, sigue así y traeme mas cuando puedas.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						PlayerInfo[playerid][pPeces] = 0;
					}
				}
			}
		}
		case CASINO_FICHAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, COMPRAR_FICHAS, DIALOG_STYLE_INPUT, "Comprar Fichas", "{FFFFFF}Ingrese el numero de fichas que desea comprar\n\tEl valor de cada ficha es de 1$", "Aceptar", "Cancelar");
					case 1:
					{
						if(PlayerInfo[playerid][pFichas] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes fichas para cambiar!");
						Earn(playerid, PlayerInfo[playerid][pFichas]);
						Till(30, -PlayerInfo[playerid][pFichas]);
						format(string, sizeof(string), "* Has recibido un total de %d$ por tus fichas.", PlayerInfo[playerid][pFichas]);
						Message(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pFichas] = 0;
					}
				}
			}
		}
		case COMPRAR_FICHAS:
		{
			if(response)
			{
				if(strval(inputtext) < 0) return ShowPlayerDialog(playerid, COMPRAR_FICHAS, DIALOG_STYLE_INPUT, "Comprar Fichas", "Ingrese el numero de fichas que desea comprar\nEl valor de cada ficha es de 1$", "Aceptar", "Cancelar");
				Fichas[playerid] = strval(inputtext);
				ShowPlayerDialog(playerid, METODO_FICHAS, DIALOG_STYLE_LIST, "Compra Fichas - Seleccione el metodo de pago", "Efectivo\nCheque", "Aceptar", "Cancelar");
			}
		}
		case METODO_FICHAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(CheckMoney(playerid, Fichas[playerid]))
						{
							Bought(playerid, Fichas[playerid]);
							Till(30, Fichas[playerid]);
							PlayerInfo[playerid][pFichas] += Fichas[playerid];
							format(string, sizeof(string), "* Has comprado un total de %d fichas por el mismo valor en dolares.", Fichas[playerid]);
							Message(playerid, COLOR_GREEN, string);
							Fichas[playerid] = 0;
						}
					}
					case 1:
					{
						if(PlayerInfo[playerid][pAccount] > Fichas[playerid])
						{
							Till(30, Fichas[playerid]);
							PlayerInfo[playerid][pAccount] -= Fichas[playerid];
							PlayerInfo[playerid][pFichas] += Fichas[playerid];
							format(string, sizeof(string), "* Has comprado un total de %d fichas por el mismo valor en dolares.", Fichas[playerid]);
							Message(playerid, COLOR_GREEN, string);
							Fichas[playerid] = 0;
						} else Message(playerid, COLOR_GRAD2, "¡No dispones de esa cantidad en el banco!");
					}
				}
			}
		}
		case GPS_DIALOG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, BARES, DIALOG_STYLE_LIST, "{018CFE}GPS - Bares/Discotecas:", "{FFFFFF}Alhambra\nClub VIP\nBar Groove", "Marcar", "Atrás");
					case 1: ShowPlayerDialog(playerid, EMERGENCIAS, DIALOG_STYLE_LIST, "{018CFE}GPS - Emergencias:", "{FFFFFF}LSMD\nLSPD\nFBI\nSAEM", "Marcar", "Atrás");
					case 2: ShowPlayerDialog(playerid, NEGOCIOS, DIALOG_STYLE_LIST, "{018CFE}GPS - Negocios:", "{FFFFFF}24/7 Ayuntamiento\n24/7 Unity\n24/7 Vinewood\nPizza Stark\nAmmunation\nBinco\nGimnasio\nVictim", "Marcar", "Atrás");
					case 3: ShowPlayerDialog(playerid, LUGARPUBLICO, DIALOG_STYLE_LIST, "{018CFE}GPS - Lugares Públicos:", "{FFFFFF}Ayuntamiento\nBanco\nGasolinera\nGrotti\nCyber\nCNN\nBiblioteca\nPaintball\nBowling\nIglesia\nCasino", "Marcar", "Atrás");
					case 4: ShowPlayerDialog(playerid, SERVICIOS, DIALOG_STYLE_LIST, "{018CFE}GPS - Servicios:", "{FFFFFF}Mecánicos\nAutoescuela\nTaxistas\nCIA", "Marcar", "Atrás");
				}
			}
		}
		case BARES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayerCheckpoint(playerid, 1828.7018,-1682.9352,13.5469, 3.0);
					case 1: SetPlayerCheckpoint(playerid, 1805.9573,-1576.6815,13.4496, 3.0);
					case 2: SetPlayerCheckpoint(playerid, 2305.5979,-1652.2327,14.4630, 3.0);
				} Message(playerid, COLOR_WHITE, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
			} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case EMERGENCIAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayerCheckpoint(playerid, 1186.7639,-1324.5430,13.5593, 3.0);
					case 1: SetPlayerCheckpoint(playerid, 1545.0645,-1675.4355,13.5596, 3.0);
					case 2: SetPlayerCheckpoint(playerid, 912.8531,-992.2309,38.0075, 3.0);
					case 3: SetPlayerCheckpoint(playerid, 2610.6838,-2396.7205,13.6252, 3.0);
				} Message(playerid, COLOR_WHITE, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
			} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case NEGOCIOS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayerCheckpoint(playerid, 1352.7506,-1754.8582,13.3568, 3.0);
					case 1: SetPlayerCheckpoint(playerid, 1829.0416,-1843.0101,13.5781, 3.0);
					case 2: SetPlayerCheckpoint(playerid, 1315.1741,-900.1744,39.5781, 3.0);
					case 3: SetPlayerCheckpoint(playerid, 2101.3071,-1806.8872,13.5547, 3.0);
					case 4: SetPlayerCheckpoint(playerid, 1363.2135,-1279.6903,13.5469, 3.0);
					case 5: SetPlayerCheckpoint(playerid, 2245.0457,-1661.8610,15.4690, 3.0);
					case 6: SetPlayerCheckpoint(playerid, 2225.8884,-1724.2968,13.5599, 3.0);
					case 7: SetPlayerCheckpoint(playerid, 454.6484,-1503.0116,30.8653, 3.0);
				} Message(playerid, COLOR_WHITE, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
			} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case LUGARPUBLICO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayerCheckpoint(playerid, 1480.0077,-1739.7684,13.5469, 3.0);
					case 1: SetPlayerCheckpoint(playerid, 305.5959,-1612.1421,33.2421, 3.0);
					case 2: SetPlayerCheckpoint(playerid, 1003.5906,-940.7248,42.1797, 3.0);
					case 3: SetPlayerCheckpoint(playerid, 555.1510,-1260.8953,17.2422, 3.0);
					case 4: SetPlayerCheckpoint(playerid, 1094.3595,-1390.4651,13.7299, 3.0);
					case 5: SetPlayerCheckpoint(playerid, 776.8192,-1389.5275,13.6205, 3.0);
					case 6: SetPlayerCheckpoint(playerid, 1560.0825,-1093.1130,23.6643, 3.0);
					case 7: SetPlayerCheckpoint(playerid, 2781.5659,-1814.6296,11.8438, 3.0);
					case 8: SetPlayerCheckpoint(playerid, 1631.6582,-1166.1237,24.0781, 3.0);
					case 9: SetPlayerCheckpoint(playerid, 2264.9971,-1339.5735,23.9818, 3.0);
					case 10: SetPlayerCheckpoint(playerid, 1022.4526,-1122.9113,23.8707, 3.0);
				} Message(playerid, COLOR_WHITE, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
			} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case SERVICIOS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayerCheckpoint(playerid, 1602.6504,-2169.1699,13.6598, 3.0);
					case 1: SetPlayerCheckpoint(playerid, 2073.0464,-1913.1292,13.5469, 3.0);
					case 2: SetPlayerCheckpoint(playerid, 1814.0922,-1889.2008,13.4141, 3.0);
					case 3: SetPlayerCheckpoint(playerid, 2028.8326,-1419.2201,16.9922, 3.0);
				} Message(playerid, COLOR_WHITE, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
			} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case DIALOG_ESTADO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid,DIALOG_REG_ESTADO,DIALOG_STYLE_INPUT,"{FFFFFF}Escribe tu estado","{FFFFFF}Como máximo puedes escribir 17 carácteres","Aceptar","Cancelar");
					}
					case 1:
					{
						if(EstadoON[playerid] == 0)
						{
							Delete3DTextLabel(Estado[playerid]);
							Estado[playerid] = Create3DTextLabel(PlayerInfo[playerid][pEstado], COLOR_ESTADO, 1.0, 1.0, 1.0, 15.0, 0,1);
							Attach3DTextLabelToPlayer(Estado[playerid], playerid, 0.0, 0.0, 0.3);
							EstadoON[playerid] = 1;
							DialogoEstado(playerid);
						}
						else if(EstadoON[playerid] == 1)
						{
							Delete3DTextLabel(Estado[playerid]);
							EstadoON[playerid] = 0;
							DialogoEstado(playerid);
						}
					}
				}
			}
		}
		case DIALOG_REG_ESTADO:
		{
			if(response)
			{
				if(!DetectarSPAM(inputtext) && strlen(inputtext) < 18 && strlen(inputtext) > 0 && strfind(inputtext, "=", true) == -1 && strfind(inputtext, "\n", true) == -1)
				{
					strmid(PlayerInfo[playerid][pEstado], inputtext, 0, strlen(inputtext), 18);
					DialogoEstado(playerid);
				}
				else return ShowPlayerDialog(playerid,DIALOG_REG_ESTADO,DIALOG_STYLE_INPUT,"{FFFFFF}Formato Inválido","{FFFFFF}Has insertado un formato inválido. Límite 17 carácteres.\n Ej: Triste","Aceptar","Cancelar");
			}
		}
		case DELE_BUY_SEX:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:{
						if(CheckMoney(playerid,150))
						{
							ShowPlayerDialog(playerid, DELE_BUY_SEXF, DIALOG_STYLE_LIST, "{DD1111}Tienda Sexual {FFFFFF}- Ropa De Mujer", "Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4\nRopa de Sexo 5\nRopa de Sexo 6\nRopa de Sexo 7\nRopa de Sexo 8", "Aceptar", "Salir");
						}
					}
					case 1:{
						if(CheckMoney(playerid,150))
						{
							ShowPlayerDialog(playerid, DELE_BUY_SEXM, DIALOG_STYLE_LIST, "{DD1111}Tienda Sexual {FFFFFF}- Ropa De Hombre", "Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4", "Aceptar", "Salir");
						}
					}
					case 2:{
						if(CheckMoney(playerid,350))
						{
							ShowPlayerDialog(playerid, DELE_BUY_SEXJ, DIALOG_STYLE_LIST, "{DD1111}Tienda Sexual {FFFFFF}- Juguetes De Diversion", "Juguete 1\nJuguete 2\nJuguete 3\nJuguete 4", "Aceptar", "Salir");
						}
					}
				}
			}
		}
		case DELE_BUY_SEXF:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:	Skin(playerid, 63);
					case 1:	Skin(playerid, 75);
					case 2: Skin(playerid, 85);
					case 3: Skin(playerid, 87);
					case 4: Skin(playerid, 152);
					case 5: Skin(playerid, 178);
					case 6: Skin(playerid, 256);
					case 7: Skin(playerid, 257);
				}
				ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
				Message(playerid, COLOR_WHITE, "Has comprado un Traje de Sexo Femenino.");
				Bought(playerid, 170);
				Till(23, 170);
				return 1;
			}
		}
		case DELE_BUY_SEXM:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: Skin(playerid, 18);
					case 1: Skin(playerid, 97);
					case 2: Skin(playerid, 154);
					case 3: Skin(playerid, 252);
				}
				ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
				Message(playerid, COLOR_WHITE, "Has comprado un Traje de Sexo Masculino.");
				Bought(playerid, 170);
				Till(23, 170);
				return 1;
			}
		}
		case DELE_BUY_SEXJ:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SafeGivePlayerWeapon(playerid, 10, 1);
					case 1: SafeGivePlayerWeapon(playerid, 11, 1);
					case 2: SafeGivePlayerWeapon(playerid, 12, 300);
					case 3: SafeGivePlayerWeapon(playerid, 13, 300);
				}
				ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
				Message(playerid, COLOR_WHITE, "Has comprado un Objeto De Diversion.");
				Bought(playerid, 350);
				Till(23, 350);
				return 1;
			}
		}
		case QUIT_EXTORTION:
		{
			if(response)
			{
				strmid(BizzInfo[QuitExtortion[playerid]][bExtortion], "Nadie", 0, strlen("Nadie"), 32);
				format(string, sizeof(string), "Has dejado de ser el extorcionista del negocio de {FF7617}%s", PlayerName(ExtortionID[playerid]));
				Message(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s ha aceptado dejar de ser el extorcionista de tu negocio.", PlayerName(playerid));
				Message(ExtortionID[playerid], COLOR_GRAD2, string);
				OnBizzTextdrawUpdate(QuitExtortion[playerid]);
				QuitExtortion[playerid] = 999;
				ExtortionID[playerid] = 999;
				UpdateBizz();
				return 1;
			}
			else
			{
				format(string, sizeof(string), "* %s no ha aceptado dejar de ser el extorcionista de tu negocio.", PlayerName(playerid));
				Message(ExtortionID[playerid], COLOR_GRAD2, string);
				Message(playerid, COLOR_GRAD2, "* Has rechazado una peticion.");
			}
		}
		case ELECTRONIC_BUY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(CheckMoney(playerid,200))
						{
							new randphone = 100000 + random(899999);
							PlayerInfo[playerid][pPnumber] = randphone;
							format(string, sizeof(string), "Has comprado un nuevo teléfono cuyo número es: %d",PlayerInfo[playerid][pPnumber]);
							Message(playerid, COLOR_WHITE, string);
							Bought(playerid, 200);
							Till(24, 200);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
							return 1;
						}
					}
					case 1:
					{
						ShowPlayerDialog(playerid, RECARGA_PHONE, DIALOG_STYLE_INPUT, "{018CFE}Operadora de Telefonia Celular OTECEL", "{FFFFFF}Ingresa tu numero celular para realizar la recarga", "Aceptar", "Cancelar");
					}
					case 2:
					{
						if(CheckMoney(playerid,220))
						{
							PlayerInfo[playerid][pIpod] = 1;
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
							Message(playerid, COLOR_WHITE, "Has comprado un Ipod, usa /ipod");
							Bought(playerid, 220);
							Till(24, 220);
							return 1;
						}
					}
					case 3:
					{
						if(CheckMoney(playerid,100))
						{
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
							SafeGivePlayerWeapon(playerid, 43, 36);
							Message(playerid, COLOR_WHITE, "Has comprado una cámara de fotos.");
							Bought(playerid, 100);
							Till(24, 100);
							return 1;
						}
					}
					case 4:
					{
						if(CheckMoney(playerid,260))
						{
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
							PlayerInfo[playerid][pWalkie] = 1;
							Message(playerid, COLOR_WHITE, "Compraste el Walkie-Talkie - /walkie - /frecuencia - /wt");
							Bought(playerid, 260);
							Till(24, 260);
							return 1;
						}
					}
				}
			}
		}
	}
	return 1;
}

function UpdateHouses()
{
	new idx, File: file2, coordsstring[300];
	while (idx < sizeof(HouseInfo))
	{
		HouseInfo[idx][hWorld] = idx;

		format(coordsstring, sizeof(coordsstring), "%d,%s,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
			HouseInfo[idx][hOwned],
			HouseInfo[idx][hOwner],
			HouseInfo[idx][hEntrancex],
			HouseInfo[idx][hEntrancey],
			HouseInfo[idx][hEntrancez],
			HouseInfo[idx][hExitx],
			HouseInfo[idx][hExity],
			HouseInfo[idx][hExitz],
			HouseInfo[idx][hInt],
			HouseInfo[idx][hLevel],
			HouseInfo[idx][hValue],
			HouseInfo[idx][hLock],
			HouseInfo[idx][hRooms],
			HouseInfo[idx][hRent],
			HouseInfo[idx][hRentabil],
			HouseInfo[idx][hWep],
			HouseInfo[idx][hAmmo],
			HouseInfo[idx][hMats],
			HouseInfo[idx][hDrugs],
			HouseInfo[idx][hSpeed],
			HouseInfo[idx][hEctasy],
			HouseInfo[idx][hRitalin],
			HouseInfo[idx][hHeroina],
			HouseInfo[idx][hMarihuana],
			HouseInfo[idx][hWorld],
			HouseInfo[idx][hTime]);

		if(idx == 0)	file2 = fopen("property.cfg", io_write);
		else			file2 = fopen("property.cfg", io_append);

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
}

function BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}

function ABroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdminCP] >= level && AdminChat[i] == 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

function A_Info(string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdminCP] >= 1 && AdminChat[i] == 0)
			{
				SendClientMessage(i, 0xFF9562FF, string);
			}
		}
	}
	return 1;
}

stock OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!gOoc[i])
			{
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gNews[i] == 0)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
			{
				if(RadioOn[i])
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

stock SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
			{
				if(!gFam[i])
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}
//acciones CiudadRol David
zcmd(rendirse, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	} return 1;
}
zcmd(borracho, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);
	} return 1;
}
zcmd(hablar, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);
	} return 1;
}
zcmd(paja, playerid, params[])
{
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	return Message(playerid, MORADO_ADMIN, "Para seguir utiliza /irsecortao");
}
zcmd(irsecortao, playerid, pamras[])
{
	return ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0);
}
zcmd(arrestado, playerid, params[])
{
	return ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
}
zcmd(amenazar, playerid, params[])
{
	return ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);
}
zcmd(superpatada, playerid, params[])
{
	return ApplyAnimation(playerid,"FIGHT_C","FightC_3",4.1,0,1,1,1,1);
}
zcmd(reirse, playerid, params[])
{
	return ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
}
zcmd(agredido, playerid, params[])
{
	return ApplyAnimation(playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 0, 0, 1, 0);
}
zcmd(herido, playerid, params[])
{
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	return Message(playerid, MORADO_ADMIN, "Para continuar utiliza /agonizar");
}
zcmd(encender, playerid, params[])
{
	ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.000000, 0, 0, 1, 1, 0);
	return Message(playerid, MORADO_ADMIN, "Para continuar puedes utilizar /inhalar o /apagar");
}
zcmd(inhalar, playerid, params[])
{
	ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.000000, 1, 0, 0, 0, -1);
	return Message(playerid, MORADO_ADMIN, "Para continuar utiliza /apagar");
}
zcmd(asustado, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
}
zcmd(adolorido, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
}
zcmd(apagar, playerid, params[])
{
	return ApplyAnimation(playerid, "SMOKING", "M_smk_out", 4.000000, 0, 1, 1, 0, 0);
}
zcmd(vigilar, playerid, params[])
{
	return ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
}
zcmd(recostarse, playerid, params[])
{
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
	return Message(playerid, MORADO_ADMIN, "Para ponerte de pie utiliza /pararse");
}
zcmd(pararse, playerid, params[])
{
	return ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
}
zcmd(cubrirse, playerid, params[])
{
	return ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);
}
zcmd(fumar1, playerid, params[])
{
	return ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
}
zcmd(fumar2, playerid, params[])
{
	return ApplyAnimation(playerid,"SMOKING","F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
}
zcmd(fumar3, playerid, params[])
{
	return ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
}
zcmd(vomitar, playerid, params[])
{
	return ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
}
zcmd(cenar, playerid, params[])
{
	return ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
}
zcmd(chao, playerid, params[])
{
	return ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);
}
zcmd(palmada, playerid, params[])
{
	return ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
}
zcmd(agonizar, playerid, params[])
{
	return ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
}
zcmd(levantarse, playerid, params[])
{
	return ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
}
zcmd(rodar, playerid, params[])
{
	ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,0);
	return Message(playerid, MORADO_ADMIN, "Para ponerte de pie utiliza /levantarse");
}
zcmd(traficar, playerid, params[])
{
	return ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
}
zcmd(beso, playerid, params[])
{
	return ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);
}
zcmd(crack, playerid, params[])
{
	return ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
}
zcmd(mear, playerid, params[])
{
	return ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
}
zcmd(patada, playerid, params[])
{
	return ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,7,5,1,1,1);
}
zcmd(sentarse, playerid, params[])
{
	return ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);
}
zcmd(depie, playerid, params[])
{
	return ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 1, 1, 1, 0);
}
zcmd(fokear, playerid, params[])
{
	return ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );
}
zcmd(siquiero, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
}
zcmd(noquiero, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
}
zcmd(comerciar, playerid, params[])
{
	return ApplyAnimation(playerid, "DEALER", "shop_pay", 4.000000, 0, 1, 1, 0, 0);
}
zcmd(piquero, playerid, params[])
{
	return ApplyAnimation(playerid, "DAM_JUMP", "DAM_Launch", 4.0, 0, 1, 1, 1, 1);
}
zcmd(taichi, playerid, params[])
{
	return ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);
}
zcmd(beber, playerid, params[])
{
	return ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);
}
zcmd(boxear, playerid, params[])
{
	return ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);
}
zcmd(fuerza, playerid, params[])
{
	return ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
}
zcmd(pelea, playerid, params[])
{
	ApplyAnimation(playerid, "ped", "FIGHTIDLE", 4.000000, 0, 1, 1, 1, 1);
	return Message(playerid, MORADO_ADMIN, "Para continuar utiliza /boxear");
}
zcmd(recojer, playerid, params[])
{
	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.000000, 0, 1, 1, 1, 1);
	return Message(playerid, MORADO_ADMIN, "Para continuar utiliza /botear");
}
zcmd(botear, playerid, params[])
{
	ApplyAnimation(playerid, "BSKTBALL", "BBALL_walk", 4.000000, 1, 1, 1, 1, 500);
	return Message(playerid, MORADO_ADMIN, "Para continuar utiliza /clavarse o /lanzar");
}
zcmd(clavarse, playerid, params[])
{
	return ApplyAnimation(playerid, "BSKTBALL", "BBALL_def_jump_shot", 4.0, 0, 1, 1, 1, 500);
}
zcmd(lanzar, playerid, params[])
{
	return ApplyAnimation(playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.0, 0, 1, 1, 1, 500);
}
zcmd(hombre, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","WALK_gang1",4.0,1,1,1,1,500);
}
zcmd(mujer, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,500);
}
zcmd(sanar, playerid, params[])
{
	return ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,0,0,0,0);
}
zcmd(llorar, playerid, params[])
{
	return ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);
}
zcmd(dormir, playerid, params[])
{
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
	SendClientMessage(playerid, COLOR_ORANGE, "¡Que bien sienta dormir!");
	return 1;
}
zcmd(detener, playerid, params[]) {
	return ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,0,0,0,0);
}
zcmd(rapear, playerid, params[])
{
	return ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);
}
zcmd(alzar, playerid, params[])
{
	return ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
}
zcmd(cansado, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,7,5,1,1,1);
}
zcmd(bomba, playerid, params[])
{
	return ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
}
zcmd(sapiar, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","roadcross_female",4.1,0,0,0,0,0);
}
zcmd(asiento, playerid, params[])
{
	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
	return Message(playerid, MORADO_ADMIN, "Para ponerte de pie utiliza /depie");
}
zcmd(servirse, playerid, params[])
{
	return ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,0,0,0,0);
}
zcmd(servir, playerid, params[])
{
	return ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
}
zcmd(asiento2, playerid, params[])
{
	ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,0,0,1,0);
	return Message(playerid, MORADO_ADMIN, "Para ponerte de pie utiliza /depie2");
}
zcmd(depie2, playerid, params[])
{
	return ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,0,0,0,0);
}
zcmd(mmm, playerid, params[])
{
	return ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,0,0,0,0,0);
}
zcmd(saludo, playerid, params[])
{
	return Message(playerid, MORADO_ADMIN, "Utiliza /saludo[1-4]");
}
zcmd(saludo1, playerid, params[])
{
	return ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,0,0,0,0);
}
zcmd(saludo2, playerid, params[])
{
	return ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,0,0,0,0);
}
zcmd(saludo3, playerid, params[])
{
	return ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,0,0,0,0);
}
zcmd(saludo4, playerid, params[])
{
	return ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);
}
zcmd(strip, playerid, params[])
{
	return Message(playerid, AMARILLO_ADMIN, "Utiliza /strip[1-20]");
}
zcmd(strip1, playerid, params[])
{
	return ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,1);
}
zcmd(strip2, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,7,5,1,1,1);
}
zcmd(strip3, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,7,5,1,1,1);
}
zcmd(strip4, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,7,5,1,1,1);
}
zcmd(strip5, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);
}
zcmd(strip6, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_B",4.1,7,5,1,1,1);
}
zcmd(strip7, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_C",4.1,7,5,1,1,1);
}
zcmd(strip8, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_D",4.1,7,5,1,1,1);
}
zcmd(strip9, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_E",4.1,7,5,1,1,1);
}
zcmd(strip10, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_F",4.1,7,5,1,1,1);
}
zcmd(strip11, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_G",4.1,7,5,1,1,1);
}
zcmd(strip12, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,1);
}
zcmd(strip13, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","strip_E",4.1,7,5,1,1,1);
}
zcmd(strip14, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_B2C",4.000000, 0, 1, 1, 1, 0);
}
zcmd(strip15, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_C1",4.000000, 0, 1, 1, 1, 0);
}
zcmd(strip16, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_C2",4.000000, 0, 1, 1, 1, 0);
}
zcmd(strip17, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,7,5,1,1,1);
}
zcmd(strip18, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,7,5,1,1,1);
}
zcmd(strip19, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,7,5,1,1,1);
}
zcmd(strip20, playerid, params[])
{
	return ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,7,5,1,1,1);
}
zcmd(echarse, playerid, params[])
{
	return ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.000000, 0, 0, 0, 1, 0);
}
zcmd(asientosexi, playerid, params[])
{
	ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
	return Message(playerid, MORADO_ADMIN, "Para ponerte de pie utiliza /pararse");
}
zcmd(skate, playerid, params[])
{
	return Message(playerid, AMARILLO_ADMIN, "Utiliza /skate[1-3]");
}
zcmd(skate1, playerid, params[])
{
	return ApplyAnimation(playerid,"SKATE","skate_run",4.0,1,1,1,1,500);
}
zcmd(skate2, playerid, params[])
{
	return ApplyAnimation(playerid,"SKATE","skate_sprint",4.0,1,1,1,1,500);
}
zcmd(skate3, playerid, params[])
{
	return ApplyAnimation(playerid,"SKATE","skate_idle",4.0,1,1,1,1,500);
}
zcmd(danzar, playerid, params[])
{
	return Message(playerid, AMARILLO_ADMIN, "Utiliza /danzar[0-12]");
}
zcmd(danzar0, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","bd_clap",4.1,7,5,1,1,1);
}
zcmd(danzar1, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,7,5,1,1,1);
}
zcmd(danzar2, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","dance_loop",4.1,7,5,1,1,1);
}
zcmd(danzar3, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);
}
zcmd(danzar4, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,7,5,1,1,1);
}
zcmd(danzar5, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,7,5,1,1,1);
}
zcmd(danzar6, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,7,5,1,1,1);
}
zcmd(danzar7, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,7,5,1,1,1);
}
zcmd(danzar8, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,7,5,1,1,1);
}
zcmd(danzar9, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,7,5,1,1,1);
}
zcmd(danzar10, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,7,5,1,1,1);
}
zcmd(danzar11, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,7,5,1,1,1);
}
zcmd(danzar12, playerid, params[])
{
	return ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,7,5,1,1,1);
}
zcmd(taxi, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
}
zcmd(seacabo, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
}
zcmd(tullio, playerid, params[])
{
	return ApplyAnimation(playerid,"PED","WALK_old",4.0,1,1,1,1,500);
}
zcmd(asco, playerid, params[])
{
	return ApplyAnimation(playerid,"FOOD","EAT_Vomit_SK",4.1,0,1,1,1,1);
}
zcmd(quepa, playerid, params[])
{
	return ApplyAnimation(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
}
zcmd(wooo, playerid, params[])
{
	return ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);
}
zcmd(quepasa, playerid, params[])
{
	return ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
}
zcmd(comodo, playerid, params[])
{
	return ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1);
}
zcmd(p1, playerid, params[])
{
	return ApplyAnimation(playerid,"Freeweights", "gym_free_B",4.0,1,1,1,1,500);
}
zcmd(bailar, playerid, params[]){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		if(!sscanf(params, "d", params[0]))
		{
			switch(params[0])
			{
				case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
				case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
				case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
				default: Message(playerid, AMARILLO_ADMIN, "Utiliza /bailar [1-3]");
			}
		} else Message(playerid, AMARILLO_ADMIN, "Utiliza /bailar [1-3]");
	}return 1;
}
zcmd(stop, playerid, params[])
{
	ClearAnimations(playerid);
	return 1;
}
zcmd(acciones, playerid, params[])
{
	Message(playerid, ORANGE_ADMIN, "Hermandad Zero RP - Acciones disponibles:");
	Message(playerid, ROJO_ADMIN, "/rendirse /borracho /hablar /paja /irsecortao /arrestado");
	Message(playerid, ROJO_ADMIN, "/amenazar /superpatada /reirse /agredido /herido /encender");
	Message(playerid, ROJO_ADMIN, "/inhablar /asustado /adolorido /apagar /vigilar /recostarse");
	Message(playerid, ROJO_ADMIN, "/pararse /cubrirse /fumar[1-3] /vomitar /cenar /chao /palmada");
	Message(playerid, ROJO_ADMIN, "/agonizar /levantarse /rodar /traficar /beso /crack /mear /p1");
	Message(playerid, ROJO_ADMIN, "/bailar /patada /sentarse /depie /fokear /siquiero /noquiero");
	return Message(playerid, MORADO_ADMIN, "Utiliza /acciones2 para ver mas acciones disponibles.");
}
zcmd(acciones2, playerid, params[])
{
	Message(playerid, ORANGE_ADMIN, "Hermandad Zero RP - Acciones disponibles 2:");
	Message(playerid, ROJO_ADMIN, "/comerciar /piquero /taichi /beber /boxear /fuerza /pelea");
	Message(playerid, ROJO_ADMIN, "/recoger /botear /clavarse /lanzar /hombre /mujer /sanar");
	Message(playerid, ROJO_ADMIN, "/llorar /dormir /detener /rapear /alzar /cansado /bomba");
	Message(playerid, ROJO_ADMIN, "/sapiar /asiento /servirse /servir /asiento2 /depie2 /mmm");
	Message(playerid, ROJO_ADMIN, "/saludo /strip /echarse /asientosexi /skate /danzar /taxi");
	Message(playerid, ROJO_ADMIN, "/seacabo /correr /tullio /asco /quepa /wooo /quepasa /comodo");
	return Message(playerid, MORADO_ADMIN, "Utiliza /sexo para mas animaciones.");
}
zcmd(encuatro1, playerid, params[])
{
	ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.0, 0, 1, 1, 1, 1);
	return 1;
}
zcmd(encuatro2, playerid, params[])
{
	ApplyAnimation(playerid, "SNM","SPANKINGW", 4.0, 1, 1, 1, 1, 1);
	return 1;
}
zcmd(encuatro3, playerid, params[])
{
	ApplyAnimation(playerid, "SNM","SPANKEDP", 4.0, 1, 1, 1, 1, 1);
	return 1;
}
zcmd(nalgada, playerid, params[])
{
	ApplyAnimation(playerid, "SNM","SPANKINGP", 4.0, 1, 1, 1, 1, 1);
	return 1;
}
zcmd(nalgada2, playerid, params[])
{
	ApplyAnimation(playerid, "SNM","SPANKEDW", 4.0, 1, 1, 1, 1, 1);
	return 1;
}

zcmd(nalgada3, playerid, params[])
{
	ApplyAnimation(playerid, "SNM","SPANKING_ENDP", 4.0, 1, 1, 1, 1, 1);
	return 1;
}
zcmd(chupamela1, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
	return 1;
}
zcmd(chupamela2, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
	return 1;
}
zcmd(chupamela3, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1);
	return 1;
}
zcmd(chupamela4, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
	return 1;
}
zcmd(chupamela5, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
	return 1;
}
zcmd(chupamela6, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
	return 1;
}
zcmd(mamar1, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
	return 1;
}
zcmd(mamar2, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
	return 1;
}
zcmd(mamar3, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
	return 1;
}
zcmd(mamar4, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
	return 1;
}
zcmd(mamar5, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
	return 1;
}
zcmd(mamar6, playerid, params[])
{
	ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
	return 1;
}
zcmd(sexo, playerid, params[])
{
	SendClientMessage(playerid, 0xFFFFFFAA, " {FFFFFF}=====================================================");
	SendClientMessage(playerid, 0xFFFFFFAA, " {FFFFFF}Animaciones de{00FF00}sexo HermandadZero{00FF00}RP");
	SendClientMessage(playerid, 0xFFFFFFAA, " {FFFFFF}/encuatro{00FFFF}[1/3] {FFFFFF}/nalgada{00FFFF}[1/3]");
	SendClientMessage(playerid, 0xFFFFFFAA, " {FFFFFF}/chupamela{00FFFF}[1/6] {FFFFFF}/mamar{00FFFF}[1/5]");
	SendClientMessage(playerid, 0xFFFFFFAA, " {FFFFFF}=====================================================");
	return 1;
}
zcmd(encuatro, playerid, params[])
{
	SendClientMessage(playerid, 0xFFFFFFAA, "{FFFFFF}/encuatro{00FFFF}[1/3]");
	return 1;
}
zcmd(chupamela, playerid, params[])
{
	SendClientMessage(playerid, 0xFFFFFFAA, "{FFFFFF}/chupamela{00FFFF}[1/6]");

	return 1;
}
zcmd(mamar, playerid, params[])
{
	SendClientMessage(playerid, 0xFFFFFFAA, "{FFFFFF}/mamar{00FFFF}[1/5]");

	return 1;
}

	// zcmd:nps/anims ============================================================================================================================
zcmd(ayudarol, playerid, params[])
{
	return ShowPlayerDialog(playerid, AYUDA_DIALOG, DIALOG_STYLE_LIST, "{FF0D00}>{6CF600}Hermandad Zero RP{FFFFF}-{9024D3}Reglas de Rol", " {00FF00}>{FFFFFF}CarJack \n {00FF00}>{FFFFFF}DeathMatch \n {00FF00}>{FFFFFF}MetaGaming \n {00FF00}>{FFFFFF}PowerGaming \n {00FF00}>{FFFFFF}Badly Parked Car \n {00FF00}>{FFFFFF}Bad Driving \n {00FF00}>{FFFFFF}Revenge Kill \n {00FF00}>{FFFFFF}Noob Abuser", "Ver", "Salir");
}
zcmd(reglasadmin, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] >= 1){
		new string[820];
		new ver[] = "{2E2EFE}Normas administrativas, importante leerlas:\n\n\t{FFFFFF}- Si un administrador superior te dice que te pongas DUTY, no rechistar.\n\t- Buena ortografía y buena expresión.\n\t- Actividad en el servidor mínima.\n\t- Responsabilidad y ganas de ayudar.\n\t- Dar ejemplo a los usuarios.\n\t- No faltar al respeto ni a un usuario ni a un administrador superior.\n\n";
		new ver2[] = "\t- No pedir a cada 5 minutos permiso para rolear, recuerda que eres admin.\n\t- Tener una mínima actividad mínima en el foro.\n\t- Si estas solo de admin y no hay ningún administrador ON, ponte ONDUTY.\n\t- No hacer ningun tipo de Admin Abuse sobre los usuarios o para tener ventaja ON ROL.\n";
		format(string, sizeof(string),"%s %s",ver,ver2);
		return ShowPlayerDialog(playerid,821,DIALOG_STYLE_MSGBOX, "{2E2EFE}Reglas administrativas", string, "Ok", "");
	} else Message(playerid, COLOR_GRAD2, "¡No eres administrador!");
	return 1;
}
zcmd(estilocaminar, playerid, params[])
{
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /estilocaminar <1-13>");
	if(params[0] > 0 && params[0] < 14)
	{
		PlayerInfo[playerid][pWalk] = params[0];
		SetPlayerWalkingStyle(playerid, PlayerInfo[playerid][pWalk]);
		Message(playerid, COLOR_GRAD2, "* Estilo de caminar ha sido cambiado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /estilocaminar <1-13>");
	return 1;
}
zcmd(apelear, playerid, params[]){
	if(PlayerToPoint(10, playerid, 767.6719,13.6320,1000.7010) || PlayerToPoint(10, playerid, 768.6885,-36.5168,1000.6865)){
		ShowPlayerDialog(playerid, FSTYLE_DIALOG, DIALOG_STYLE_LIST, " Que le gustaria aprender?", "Me gustaría aprender Knee Head\t 1500$\nMe gustaría aprender Kung Fu\t 1000$\nMe gustaría aprender Boxeo\t 800$", "Sí", "No");
	} else Message(playerid, COLOR_GRAD2, "¡No estas en el GYM!");
	return 1;
}
zcmd(burbuja, playerid, params[])
{    SetPlayerAttachedObject(playerid,0,1276,1,-0.241000,0.056999,0.000000,2.200000,71.799964,-101.999992,0.000000,0.000000,0.051999);
	return 1;
}
zcmd(talk, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(contrabando, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(casino, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(clecciones, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(carmas, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(pescadero, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(iglesia, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		RequestNPCTalk(playerid,5.0);
	}
	return 1;
}
zcmd(npcload, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	for(new i = 0; i < 0; i++){
		new npcname[MAX_PLAYER_NAME];
		GetPlayerName(i, npcname, sizeof(npcname));
		RequestNPCLoad(i,npcname);
		Message(playerid, COLOR_GRAD2, "* Comando Ejecutado");
	}
	return 1;
}
zcmd(npcjoin, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(npctoggle == 0)
	{
		RequestNPCJoin();
		GlobalMsg(COLOR_WHITE, "SERVIDOR: NPCs Cargados.");
	}
	else
	{
		Message(playerid, COLOR_GREY, " Todos los NPC están cargados, para re-cargarlos use /npckick y despues use este comando.");
	}
	return 1;
}
zcmd(npckick, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerNPC(i))
		{
			Kick(i);
		}
	}
	GlobalMsg(COLOR_WHITE, "SERVIDOR: NPCs Kickeados.");
	npctoggle = 0;
	return 1;
}
zcmd(trajepizza, playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 6) return Message(playerid, COLOR_GRAD2, " Usted no trabaja de Pizzero");
	if(PlayerToPoint(5, playerid, 369.0226,-114.5778,1001.4995)){
		ShowPlayerDialog(playerid,EQUIPO_PIZZA,DIALOG_STYLE_LIST,">> Equipo {FF0400}Pizza {D6D300}Stack {FFFFFF}<<","Ropa de Trabajo\nRopa Normal","Usar","Salir");
		return 1;
	}
	return 1;
}
zcmd(cfumar, playerid, params[])
{
	if(cNicotina[playerid] == 1) 					return Message(playerid, COLOR_GRAD2, 		"¡No tienes ganas de fumar!");
	else if(PlayerInfo[playerid][pCigarettes] == 0) return Message(playerid, COLOR_GRAD2, 		"¡No tienes cigarros!");
	else if(PlayerInfo[playerid][pLighter] == 0) 	return Message(playerid, COLOR_GRAD2, 		"¡No tienes encendedor!");
	else if(IsSmoking[playerid] > 0) 				return Message(playerid, COLOR_GRAD2, 		"¡Ya estas fumando!");
	else
	{
		new randsmoke = random(6);
		if(randsmoke < 5)
		{
			new string[72];
			PlayerInfo[playerid][pLighter] -= 1;	PlayerInfo[playerid][pCigarettes] -= 1;
			format(string, sizeof(string), "* %s abre su cajetilla y enciende un cigarro.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			IsSmoking[playerid] = 80;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			Message(playerid, COLOR_WHITE, "(Fumando) Ahora puedes utilizar /dfumar (para dejar de fumar).");
			SmokeTimer[playerid] = SetTimerEx("SmokingCigarette", 1000, true, "i", playerid);
		}
		else
		{
			PlayerInfo[playerid][pLighter] -= 1;
			Message(playerid, COLOR_GRAD2, "¡Fallaste al encender el cigarro!");
		}
	}
	return 1;
}
zcmd(dfumar, playerid, params[]){
	if(IsSmoking[playerid] > 0){
		new string[128];
		IsSmoking[playerid] = 0;
		format(string, sizeof(string), "* %s tira el cigarro al suelo y lo pisa.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		KillTimer(SmokeTimer[playerid]);
		ClearAnimations(playerid);
	} else Message(playerid, COLOR_GREY, "¡No está fumando!");
	return 1;
}
zcmd(lockhq, playerid, params[])
{
	if(IsPlayerConnected(playerid)){
		if(Team_Groove(playerid)){
			if(hqlock[GS] == 0) {hqlock[GS] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[GS] == 1) {hqlock[GS] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Ballas_pand(playerid)){
			if(hqlock[PIR] == 0) {hqlock[PIR] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[PIR] == 1) {hqlock[PIR] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Team_Hermandad(playerid)){
			if(hqlock[LH] == 0) {hqlock[LH] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[LH] == 1) {hqlock[LH] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Moteros(playerid)){
			if(hqlock[MOT] == 0) {hqlock[MOT] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[MOT] == 1) {hqlock[MOT] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Team_LK(playerid)){
			if(hqlock[LK] == 0) {hqlock[LK] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[LK] == 1) {hqlock[LK] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Mafia_Italiana(playerid)){
			if(hqlock[ITA] == 0) {hqlock[ITA] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[ITA] == 1) {hqlock[ITA] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Mafia_Rusa(playerid)){
			if(hqlock[RUS] == 0) {hqlock[RUS] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[RUS] == 1) {hqlock[RUS] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Hitman(playerid)){
			if(hqlock[HIT] == 0) {hqlock[HIT] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[HIT] == 1) {hqlock[HIT] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Piratas4x4(playerid)){
			if(hqlock[PIR] == 0) {hqlock[PIR] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[PIR] == 1) {hqlock[PIR] = 0; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		}
		else if(Mafia_Yakuza(playerid)){
			if(hqlock[YAK] == 0) {hqlock[YAK] = 1; SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Cerrado!"); return 1;}
			else if(hqlock[YAK] == 1) {hqlock[YAK] = 0;  SaveHQLocks(); Message(playerid, COLOR_GREY, "HQ Abierto!"); return 1;}
		} else return Message(playerid, COLOR_GREY, "No tienes las llaves del HQ!");
	}
	return 1;
}
	//zcmd: Buy Vehicle
zcmd(cvehpremium, playerid, params[]){
	if(PlayerInfo[playerid][pDonateT] == 0) return Message(playerid, COLOR_RED2, "Necesitas ser premium.");
	new newcar = GetPlayerVehicleID(playerid), idcar = GetPlayerVehicleID(playerid);
	if(CarInfo[idcar][cOwned] == 1) return Message(playerid, COLOR_RED2, "El vehículo no está en venta.");
	if(PlayerInfo[playerid][pCarPremium] != 9999) return Message(playerid, COLOR_RED2, "Ya posees un vehículo.");
	if(!IsAnOwnableCar(newcar)) return Message(playerid, COLOR_RED2, "Este vehículo no está en venta.");
	if(GetPlayerMoney(playerid) >= CarInfo[idcar][cValue]){
		ShowPlayerDialog(playerid, IMPORTAR_MOTOR, DIALOG_STYLE_LIST, "Elegir prestaciones", "Motor sin plomo 95\t\tCapacidad: 100l (1$/l)\nMotor sin plomo 98\t\tCapacidad: 120l (1$/l)\nMotor Diesel\t\tCapacidad: 160l (2$/l)\nMotor Biodiesel\t\tCapacidad: 230l (3$/l)", "Instalar", "Salir");
		PlayerInfo[playerid][pCarPremium] = idcar;
		CarInfo[idcar][cOwned] = 1;
		CarInfo[idcar][cBattery] = 5000;
		strmid(CarInfo[PlayerInfo[playerid][pCarPremium]][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 32);
		Bought(playerid, CarInfo[PlayerInfo[playerid][pCarPremium]][cValue]);
		SetVehicleParamsEx(idcar, 0,0,0,0,0,0,0);
		gEngine[playerid] = 0;
		engineOn[idcar] = false;
		ClearChatbox(playerid, 10);
		Message(playerid, COLOR_GREEN, "Felicidades! Has adquirido este vehículo, utiliza (/v [item])");
		strmid(CarInfo[idcar][cPlate], "00000", 0, strlen("00000"), 255);
		SetVehicleNumberPlate(idcar, CarInfo[idcar][cPlate]);
		UpdateCars();
	} else Message(playerid, COLOR_RED2, "No tienes dinero suficiente!");
	return 1;
}
zcmd(cvehpremium2, playerid, params[]){
	if(PlayerInfo[playerid][pDonateT]  < 2) return Message(playerid, COLOR_RED2, "Necesitas ser premium de nivel 2.");
	new newcar = GetPlayerVehicleID(playerid), idcar = GetPlayerVehicleID(playerid);
	if(CarInfo[idcar][cOwned] == 1) return Message(playerid, COLOR_RED2, "El vehículo no está en venta.");
	if(PlayerInfo[playerid][pCarPremium2] != 9999) return Message(playerid, COLOR_RED2, "Ya posees un vehículo.");
	if(!IsAnOwnableCar(newcar)) return Message(playerid, COLOR_RED2, "Este vehículo no está en venta.");
	if(GetPlayerMoney(playerid) >= CarInfo[idcar][cValue]){
		ShowPlayerDialog(playerid, IMPORTAR_MOTOR, DIALOG_STYLE_LIST, "Elegir prestaciones", "Motor sin plomo 95\t\tCapacidad: 100l (1$/l)\nMotor sin plomo 98\t\tCapacidad: 120l (1$/l)\nMotor Diesel\t\tCapacidad: 160l (2$/l)\nMotor Biodiesel\t\tCapacidad: 230l (3$/l)", "Instalar", "Salir");
		PlayerInfo[playerid][pCarPremium2] = idcar;
		CarInfo[idcar][cOwned] = 1;
		CarInfo[idcar][cBattery] = 5000;
		strmid(CarInfo[PlayerInfo[playerid][pCarPremium2]][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 32);
		Bought(playerid, CarInfo[PlayerInfo[playerid][pCarPremium2]][cValue]);
		SetVehicleParamsEx(idcar, 0,0,0,0,0,0,0);
		gEngine[playerid] = 0;
		engineOn[idcar] = false;
		ClearChatbox(playerid, 10);
		Message(playerid, COLOR_GREEN, "Felicidades! Has adquirido este vehículo, utiliza (/v [item])");
		strmid(CarInfo[idcar][cPlate], "00000", 0, strlen("00000"), 255);
		SetVehicleNumberPlate(idcar, CarInfo[idcar][cPlate]);
		UpdateCars();
	} else Message(playerid, COLOR_RED2, "No tienes dinero suficiente!");
	return 1;
}
zcmd(cvehiculo, playerid, params[]){
	if(PlayerInfo[playerid][pLevel] < 2) return Message(playerid, COLOR_RED2, "Debes ser como mínimo nivel 2");
	new newcar = GetPlayerVehicleID(playerid), idcar = GetPlayerVehicleID(playerid);
	if(CarInfo[idcar][cOwned] == 1) return Message(playerid, COLOR_RED2, "El vehículo no está en venta.");
	if(PlayerInfo[playerid][pPcarkey] != 9999) return Message(playerid, COLOR_RED2, "Ya posees un vehículo.");
	if(!IsAnOwnableCar(newcar)) return Message(playerid, COLOR_RED2, "Este vehículo no está en venta.");
	if(GetPlayerMoney(playerid) >= CarInfo[idcar][cValue]){
		ShowPlayerDialog(playerid, IMPORTAR_MOTOR, DIALOG_STYLE_LIST, "Elegir prestaciones", "Motor sin plomo 95\t\tCapacidad: 100l (1$/l)\nMotor sin plomo 98\t\tCapacidad: 120l (1$/l)\nMotor Diesel\t\tCapacidad: 160l (2$/l)\nMotor Biodiesel\t\tCapacidad: 230l (3$/l)", "Instalar", "Salir");
		PlayerInfo[playerid][pPcarkey] = idcar;
		CarInfo[idcar][cVehTime] = gettime() + 1296000;
		PlayerInfo[playerid][pTimeCar] = gettime() + 1296000;
		CarInfo[idcar][cOwned] = 1;
		CarInfo[idcar][cBattery] = 5000;
		strmid(CarInfo[PlayerInfo[playerid][pPcarkey]][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 32);
		Bought(playerid, CarInfo[PlayerInfo[playerid][pPcarkey]][cValue]);
		SetVehicleParamsEx(idcar, 0,0,0,0,0,0,0);
		gEngine[playerid] = 0;
		engineOn[idcar] = false;
		ClearChatbox(playerid, 10);
		Message(playerid, COLOR_GREEN, "Felicidades! Has adquirido este vehículo, utiliza (/v [item])");
		Message(playerid, COLOR_GREEN, "IMPORTANTE: {FFFFFF}Utiliza /timevehinfo para mas informacion sobre tu vehículo.");
		strmid(CarInfo[idcar][cPlate], "00000", 0, strlen("00000"), 255);
		SetVehicleNumberPlate(idcar, CarInfo[idcar][cPlate]);
		UpdateCars();
	} else Message(playerid, COLOR_RED2, "¡No tienes dinero suficiente!");
	return 1;
}
zcmd(cvehiculo2, playerid, params[]){
	if(PlayerInfo[playerid][pLevel] < 5) return Message(playerid, COLOR_RED2, "Debes ser como mínimo nivel 5");
	new newcar = GetPlayerVehicleID(playerid), idcar = GetPlayerVehicleID(playerid);
	if(CarInfo[idcar][cOwned] == 1) return Message(playerid, COLOR_RED2, "El vehículo no está en venta.");
	if(PlayerInfo[playerid][pPcarkey2] != 9999) return Message(playerid, COLOR_RED2, "Ya posees un vehículo.");
	if(!IsAnOwnableCar(newcar)) return Message(playerid, COLOR_RED2, "Este vehículo no está en venta.");
	if(GetPlayerMoney(playerid) >= CarInfo[idcar][cValue]){
		ShowPlayerDialog(playerid, IMPORTAR_MOTOR, DIALOG_STYLE_LIST, "Elegir prestaciones", "Motor sin plomo 95\t\tCapacidad: 100l (1$/l)\nMotor sin plomo 98\t\tCapacidad: 120l (1$/l)\nMotor Diesel\t\tCapacidad: 160l (2$/l)\nMotor Biodiesel\t\tCapacidad: 230l (3$/l)", "Instalar", "Salir");
		PlayerInfo[playerid][pPcarkey2] = idcar;
		CarInfo[idcar][cVehTime] = gettime() + 1296000;
		PlayerInfo[playerid][pTimeCar2] = gettime() + 1296000;
		CarInfo[idcar][cOwned] = 1;
		CarInfo[idcar][cBattery] = 5000;
		strmid(CarInfo[PlayerInfo[playerid][pPcarkey2]][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 32);
		Bought(playerid, CarInfo[PlayerInfo[playerid][pPcarkey2]][cValue]);
		SetVehicleParamsEx(idcar, 0,0,0,0,0,0,0);
		gEngine[playerid] = 0;
		engineOn[idcar] = false;
		ClearChatbox(playerid, 10);
		Message(playerid, COLOR_GREEN, "Felicidades! Has adquirido este vehículo, utiliza (/v [item])");
		Message(playerid, COLOR_GREEN, "IMPORTANTE: {FFFFFF}Utiliza /timevehinfo para mas informacion sobre tu vehículo.");
		strmid(CarInfo[idcar][cPlate], "00000", 0, strlen("00000"), 255);
		SetVehicleNumberPlate(idcar, CarInfo[idcar][cPlate]);
		UpdateCars();
	} else Message(playerid, COLOR_RED2, "No tienes dinero suficiente!");
	return 1;
}

// Eventos
new Float:xe, Float:ye, Float:ze;
zcmd(evento, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(EventoOn != 1){
		EventoOn = 1;
		new string[128];
		GlobalMsg(-1, " {CDE8F0}Atención <<");
		format(string, sizeof(string), "{FFFFFF}El modo evento ha sido activado por {CDE878}%s, {FFFFFF}usa {519760}/participar {FFFFFF}para entrar.", PlayerName(playerid));
		GlobalMsg(-1, string);
		GlobalMsg(-1, "{FFFFFF}Recuerde que al entrar al evento perderá sus armas. Si entra siga las indicaciones de los administradores.");
		GetPlayerPos(playerid,xe,ye,ze);
	}else{
		EventoOn = 0;
		GlobalMsg(-1, "{FFFFFF}El modo evento ha sido {F80F60}desactivado.");
	}
	return 1;
}
zcmd(participar, playerid, params[]){
	if(EventoOn == 1){
		SetPlayerPos(playerid,xe,ye,ze);
		SetPlayerArmour(playerid, 100);
		ResetPlayerWeapons(playerid);
		SetHP(playerid, 100);
		GText(playerid, "~g~Entraste al modo evento~n~~w~Sigue las instrucciones del organizador", 7000, 4);
	} else Message(playerid, COLOR_GRAD2, "No está activado el modo evento");
	return 1;
}

// zcmd:info ============================================================================================================================
zcmd(soporte, playerid, params[])
{
	ClearChatbox(playerid, 8);
	Message(playerid, -1, "{C8D228}-= {00B39D}Centro de Soporte {FFFFFF}Hermandad Zero RP {C8D228}=-");
	Message(playerid, -1, "{FFFFFF}- Dudas sobre terminos de juego - {FF0828}/duda");
	Message(playerid, -1, "{FFFFFF}- Reportar a un jugador por infringir las normas - {46ED8F}/re");
	return Message(playerid, -1, "{FFFFFF}- ¿Necesistas asistencia? - {00A400}/solicitaradmin");
}
zcmd(timevehinfo, playerid, params[]){
	new string[800];
	new tveh[] = "{FFFFFF}Este servidor cuenta con un sistema de tiempo vehicular diseñado para evitar que existan\nvehiculos de personas que ya no entran al servidor y asi poder tener mas carros en venta\npara aquellos usuarios que son mas activos. Si posees un vehiculo puedes ver el tiempo\n";
	new tveh2[] = "{FFFFFF}restante con el comando /v tiempo siempre y cuando estes en tu vehículo, antes de que el\ntiempo llegue a 0 debes renovarlo buscando un licenciero para que lo haga, el valor de la\n renovacion es depende de los días(15-30), en caso de no hacerlo tu vehículo se vende\n";
	new tveh3[] = "{FFFFFF}automaticamente y deja de ser tuyo(es eliminado de tu cuenta). Recuerda siempre tener en\n cuenta el tiempo de tu vehículo, si lo pierdes no puedes reclamarlo como tuyo.\n\n\t\t\t{FF7617}Atte. Administración de Hermandad Zero RP.";
	format(string, sizeof(string),"%s %s %s",tveh,tveh2,tveh3);
	return ShowPlayerDialog(playerid,12397,DIALOG_STYLE_MSGBOX, "{FF231D}Informacion del Tiempo Vehicular", string, "Ok", "");
}
DialogCreate:telServicios(playerid) {
	Dialog_Open(playerid, Dialog:telServicios, DIALOG_STYLE_MSGBOX, "{658EBB}Números de Servicios", "{952BFF}Emergencias - {65BD7D}# 911\n{952BFF}Mecanicos - {65BD7D}# 555\n{952BFF}Pizza Stack - {65BD7D}# 111\n{952BFF}Taxi Cab Company - {65BD7D}# 444", "Ok", "");
}
DialogResponse:telServicios(playerid, response, listitem, inputtext[]) {
	return 1;
}
zcmd(servicios, playerid, params[]){
	Dialog_Show(playerid, Dialog:telServicios);
	return 1;
}
zcmd(facciones, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] >= 2012 || PlayerInfo[playerid][pFacciones] == 1){
		Message(playerid, COLOR_BLUE, "= ID'S de Facciones =");
		Message(playerid, -1, "1. LSPD - 2.Piratas4x4 - 3. SAEM - 4. LSMC - 5. Ballas");
		Message(playerid, -1, "7. Mecanicos - 8. Moteros - 9. Groove - 10. La Hermandad");
		Message(playerid, -1, "11. L.Kings - 12. LCN - 13. Yakuza - 14. Rusos");
		Message(playerid, -1, "16. Gobierno - 17. CNN - 19. Traficantes - 23. Hitman - 24. FBI - 25. Corte Judicial" );

	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
	//Canales
zcmd(togac, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2013){
		if(!AdminChat[playerid]){
			AdminChat[playerid] = 1;
			Message(playerid, COLOR_GRAD2, "- Canal de administración desactivado");
		}
		else{
			AdminChat[playerid] = 0;
			Message(playerid, COLOR_GRAD2, "- Canal de administración activado");
		}
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(togpm, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if (!HidePM[playerid]){
		HidePM[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "¡PMs Bloqueados!");
	}
	else if (HidePM[playerid]){
		HidePM[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "¡PMs Habilitados!");
	}
	return 1;
}
zcmd(togooc, playerid, params[]){
	if (!gOoc[playerid]){
		gOoc[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "    Desactivaste el chat de ayuda.");
	}
	else{
		gOoc[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "    Activaste el chat de ayuda.");
	}
	return 1;
}
zcmd(togfam, playerid, params[]){
	if(!gFam[playerid]){
		gFam[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "Chat de Facción desactivado.");
	}
	else{
		gFam[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Chat de Facción activado.");
	}
	return 1;
}
zcmd(tognews, playerid, params[]){
	if(!gNews[playerid]){
		gNews[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "Chat de Radio/Ads desactivado.");
	}
	else{
		gNews[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Chat de Radio/Ads activado.");
	}
	return 1;
}
zcmd(togphone, playerid, params[]){
	if (!PhoneOnline[playerid]){
		PhoneOnline[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "Teléfono apagado.");
	}
	else{
		PhoneOnline[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Teléfono encendido.");
	}
	return 1;
}
zcmd(id, playerid, params[]){
	if(!sscanf(params, "u", params[0])){
		new string[32];
		format(string, sizeof(string), "(%d) - %s",params[0], PlayerName(params[0]));
		Message(playerid, COLOR_GRAD2, string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /id <NombreJugador>");
	return 1;
}
zcmd(clientes, playerid, params[]){
	if(PlayerInfo[playerid][pJob] != 9) return Message(playerid, COLOR_GRAD2, "¡No eres Taxista!");
	if(TransportDuty[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No estás en servicio!");
	if(!isTaxiTransportVehicle(GetPlayerVehicleID(playerid))) return Message(playerid, COLOR_GRAD2, "¡No estás en un taxi!");
	TaxiRadar(playerid);
	return 1;
}
zcmd(gpsmeca, playerid, params[]){
	if(!Team_Mecanicos(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres mecánico!");
	if(OnDuty[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No estás en servicio!");
	if(!isMecanicosVehicle(GetPlayerVehicleID(playerid))) return Message(playerid, COLOR_GRAD2, "¡No estás en un carro de mecanico!");
	if(!sscanf(params, "u", params[0])){
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(params[0], X,Y,Z);
		SetPlayerCheckpoint(playerid, X,Y,Z, 6);
		Message(playerid, COLOR_YELLOW2, "Posición del jugador marcado en el mapa.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /gpsmeca <Nombre_Jugador>");
	return 1;
}
zcmd(removegps, playerid, params[]){
	if(IsPlayerConnected(playerid)){
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}
zcmd(saltartutorial, playerid, params[]){
	if(TutTime[playerid] > 0){
		TextDrawHideForPlayer(playerid, Film_1);
		TextDrawHideForPlayer(playerid, Film_2);
		TextDrawHideForPlayer(playerid, Tutorial[playerid]);
		SetPlayerCameraPos(playerid,1799.000,-1680.000,23.000);
		SetPlayerCameraLookAt(playerid,1809.000,-1682.000,23.000);
		SetPosEx(playerid, 1800.7739,-1678.1132,14.4939,213.9432,0,0);
		Message(playerid, -1, "{F20C00}Atención! {FFFFFF}Ahora pasaremos al test de Rol, si usted falla mas de 5 preguntas, volverá a leer el tutorial.")
		ClearChatbox(playerid, 10);
		new tes[] = "{FFFFFF}Es atropellar a alguien con un auto.\nEs MetaPower, es tirarte de un edificio.\nEs decir información OOC en el juego.\nEs MetaGaming, la confunsión de canales IC u OOC.";
		ShowPlayerDialog(playerid, TEST_0, DIALOG_STYLE_LIST, "{4DE868}¿Que significa MG?", tes, "OK", "");
	} else Message(playerid, COLOR_GRAD2, "¡Usted no está en el tutorial!");
	return 1;
}
zcmd(registrar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params,"u",params[0])){
		if(IsPlayerConnected(params[0])){
			if(TutTime[params[0]] > 0){
				new string[128];
				ClearChatbox(params[0], 20);
				TextDrawHideForPlayer(params[0], Film_1);
				TextDrawHideForPlayer(params[0], Film_2);
				TextDrawHideForPlayer(params[0], Tutorial[params[0]]);
				SetCameraBehindPlayer(params[0]);
				new lu[] = "{FFFFFF}Has terminado el tutorial, ahora ya puedes empezar a jugar, recuerda respetar las reglas del servidor.";
				ShowPlayerDialog(params[0], SEL_CITY, DIALOG_STYLE_MSGBOX, "{46FF92}Hermandad Zero RP - Tutorial Finalizado", lu, "Ok", "");
				format(string, sizeof(string), "Has registrado ha %s.", PlayerName(params[0]));
				Message(playerid, COLOR_GRAD4, string);
			} else Message(playerid, COLOR_GRAD2, "¡El jugador no está en el tutorial!");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /registrar <PlayerID>");
	return 1;
}
zcmd(hidetaxi, playerid, params[]){
	if(IsPlayerConnected(playerid)){
		TextDrawHideForPlayer(playerid, Taximeter[playerid]);
	}
	return 1;
}
zcmd(eject, playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new State = GetPlayerState(playerid), string[90];
		if(State!=PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GRAD2, "¡No eres conductor!");
		if(!sscanf(params, "u", params[0]))
		{
			if(IsPlayerConnected(params[0]))
			{
				if(params[0] == playerid) return Message(playerid, COLOR_GRAD2, "¡No te puedes echar ati mismo!");
				if(IsPlayerInAnyVehicle(params[0]))
				{
					if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(params[0]))
					{
						format(string, sizeof(string), "* %s agarra fuertemente a %s y lo expulsa del vehículo.", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RemovePlayerFromVehicle(params[0]);
					} else Message(playerid, COLOR_GRAD2, "El jugador no está en tu vehículo");
				} else Message(playerid, COLOR_GRAD2, "El jugador no está en un vehículo");
			} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
		} else Message(playerid, COLOR_GRAD2, "Utilice: /eject <ID>");
	} else Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	return 1;
}
    //zcmd [Cmd's Houses]
zcmd(asellhouse, playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_RED, "No posees una propiedad.");
	if(PlayerToPoint(3.0, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex],HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey],HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez]))
	{
		new string[128];
		if(PlayerInfo[playerid][pPhousekey] != 9999 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			new sell = HouseInfo[PlayerInfo[playerid][pPhousekey]][hValue]+HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentabil];
			Earn(playerid, sell);
			format(string, sizeof(string), "Has vendido tu propiedad. Has recuperado %d$",sell);
			Message(playerid, COLOR_WHITE, string);
			SellHouse(playerid, PlayerInfo[playerid][pPhousekey]);
			PlayerInfo[playerid][pPhousekey] = 9999;
		} else Message(playerid, COLOR_RED, "No posees una propiedad.");
	} else Message(playerid, COLOR_RED, "¡Debes estar cerca de tu casa para venderla!");
	return 1;
}
zcmd(rcuarto, playerid, params[])
{
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			if(HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRent] > 0)
			{
				new string[64];
				if(PlayerInfo[playerid][pPhousekey] != 9999 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					Message(playerid, COLOR_RED2, "Tú posees una propiedad. No hace falta que rentes una.");
					return 1;
				}
				if(HouseInfo[h][hRooms] < 1) return Message(playerid, COLOR_RED2, "¡No hay habitaciones disponibles!");
				if(PlayerInfo[playerid][pRent] > 0) return Message(playerid, COLOR_RED2, "¡Ya estás pagando una renta!");
				if(GetPlayerMoney(playerid) >= HouseInfo[h][hRent])
				{
					PlayerInfo[playerid][pPhousekey] = h;
					PlayerInfo[playerid][pEntered] = h;
					PlayerInfo[playerid][pRent] = HouseInfo[PlayerInfo[playerid][pPhousekey]][hRent];
					Bought(playerid, HouseInfo[h][hRent]);
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentabil] = HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentabil]+HouseInfo[h][hRent];
					Message(playerid, COLOR_WHITE, "Has rentado esta casa. Ahora podrás vivir aquí.");
					format(string, sizeof(string), "Cada PayDay, pagarás %d$ de Renta.", PlayerInfo[playerid][pRent]);
					Message(playerid, COLOR_WHITE, string);
					Message(playerid, COLOR_WHITE, "Utiliza /desrentar para cancelar la renta.");
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hRooms] -= 1;
					OnPropTextdrawUpdate(PlayerInfo[playerid][pPhousekey]);
				} else Message(playerid, COLOR_RED2, "No tienes suficientes fondos para rentar esta casa.");
			} else Message(playerid, COLOR_RED2, "Esta casa no se encuentra disponible para alquilarla.");
		}
	}
	return 1;
}
    // zcmd:puente
zcmd(puente, playerid, params[])
{
	new string[128], idcar = GetPlayerVehicleID(playerid);
	if(Ganzuas[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes ganzúas!");
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GRAD2, "No eres el conductor.");
	if(gEngine[playerid] == 1 || IsABike(idcar)) { return 1; }
	if(NoBattery(idcar)) return Message(playerid, COLOR_GRAD2, "¡Vehículo sin batería!");
	if(IsAnOwnableCar(idcar)) { if(PlayerInfo[playerid][pPcarkey] == idcar || PlayerInfo[playerid][pPcarkey2] == idcar) { return 1; } }
	if(HireKey[playerid] == idcar) { return 1; }

	format(string, sizeof(string), "* %s utiliza unas ganzúas y cruza los cables.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	SetTimerEx("StartingTheVehicle",2500,false,"i",playerid);
	GameTextForPlayer(playerid, "~w~haciendo puente.",2500,3);
	gEngine[playerid] = 1;
	return 1;
}
zcmd(tlc, playerid, params[])
{
	if(Team_LSPD(playerid))
	{
		if(pdtrace != 0 || pdtrace_x != 0 || pdtrace_y != 0 || pdtrace_z != 0)
		{
			Message(playerid, 0xFF8080FF, ">><<>><<>> Estableciendo contacto ... >><<>><<>>");
			Message(playerid, COLOR_WHITE, "GPS: Contacto establecido, ubicación marcada en el mapa.");
			SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
		}
		else Message(playerid, COLOR_WHITE, "Error en la localizacion de la persona que llama.");
	}
	else if(Team_SAMUR(playerid))
	{
		if(emdtrace != 0 || emdtrace_x != 0 || emdtrace_y != 0 || emdtrace_z != 0)
		{
			Message(playerid, COLOR_WHITE, "Ultima llamada del lugar marcados en rojo en el mapa");
			Message(playerid, COLOR_WHITE, "Utiliza: /removegps para remover el checkpoint");
			SetPlayerCheckpoint(playerid,emdtrace_x,emdtrace_y,emdtrace_z,8.0);
		} else Message(playerid, COLOR_WHITE, "Error al localizar!");
	} else Message(playerid, COLOR_WHITE, "¡No autorizado!");
	return 1;
}
zcmd(desalojar, playerid, params[]){
	if(!sscanf(params, "u", params[0])){
		new bouse = PlayerInfo[playerid][pPhousekey], string[64];
		if (bouse != 9999 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0){
			if(IsPlayerConnected(params[0]) || params[0] == playerid){
				if(PlayerInfo[params[0]][pPhousekey] == PlayerInfo[playerid][pPhousekey]){
					format(string,sizeof(string), "Desalojaste a %s", PlayerName(params[0]));
					Message(playerid, COLOR_WHITE, string);
					Message(params[0], COLOR_RED2, "No tienes casa, tu amo canceló la renta.");
					PlayerInfo[params[0]][pPhousekey] = 9999;
					PlayerInfo[params[0]][pRent] = 0;
					HouseInfo[bouse][hRooms] += 1;
					OnPropTextdrawUpdate(bouse);
				} else Message(playerid, COLOR_RED2, "El jugador no te ha alquilado la casa.");
			} else Message(playerid, COLOR_RED2, "Jugador no conectado.");
		} else Message(playerid, COLOR_RED2, "No posees una propiedad.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /desalojar <PlayerID>");
	return 1;
}
zcmd(desrentar, playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != 9999 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
		Message(playerid, COLOR_RED2, "No puedes desrentar tu propia casa.");
		return 1;
	}

	if(PlayerInfo[playerid][pRent] < 1 || PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_RED2, "¡No has rentado nada!");

	HouseInfo[PlayerInfo[playerid][pPhousekey]][hRooms] += 1;
	OnPropTextdrawUpdate(PlayerInfo[playerid][pPhousekey]);
	PlayerInfo[playerid][pPhousekey] = 9999;
	PlayerInfo[playerid][pRent] = 0;
	Message(playerid, COLOR_WHITE, "Dejaste de rentar una casa. Ahora eres un sin-techo.");
	return 1;
}
zcmd(cinfo, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new x[64];
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(3.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				if(HouseInfo[h][hOwned] == 0)
				{
					Message(playerid, COLOR_GREEN, "- Propiedad en Venta - Información");
					format(x, sizeof(x), "Interior ID: %d", HouseInfo[h][hInt]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Valor: %d   -   Nivel: %d", HouseInfo[h][hValue],HouseInfo[h][hLevel]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Habitaciones: %d", HouseInfo[h][hRooms]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "ID: %d", HouseInfo[h][hWorld]);
					Message(playerid, COLOR_WHITE, x);
					Message(playerid, COLOR_YELLOW2, "- Utiliza /comprarcasa, para comprar la casa");
					return 1;
				}
				if(PlayerInfo[playerid][pPhousekey] == h)
				{
					Message(playerid, COLOR_RED, "- Propiedad Privada -");
					format(x, sizeof(x), "Interior ID: %d", HouseInfo[h][hInt]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Valor: %d   -   Nivel: %d", HouseInfo[h][hValue],HouseInfo[h][hLevel]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Habitaciones Disponibles: %d", HouseInfo[h][hRooms]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Armario: (Wep: %d - Ammo: %d)", HouseInfo[h][hWep],HouseInfo[h][hAmmo]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Bloqueada: %d", HouseInfo[h][hLock]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "ID: %d", HouseInfo[h][hWorld]);
					Message(playerid, COLOR_WHITE, x);
					return 1;
				}
				if(HouseInfo[h][hRent] > 0 && PlayerInfo[playerid][pPhousekey] != h)
				{
					Message(playerid, COLOR_YELLOW, "- Propiedad en Renta - Información");
					format(x, sizeof(x), "Dueño: %s", HouseInfo[h][hOwner]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Interior ID: %d", HouseInfo[h][hInt]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Habitaciones: %d", HouseInfo[h][hRooms]);
					Message(playerid, COLOR_WHITE, x);
					format(x, sizeof(x), "Renta: %d$", HouseInfo[h][hRent]);
					Message(playerid, COLOR_WHITE, x);
					Message(playerid, COLOR_YELLOW2, "- Utiliza /rcuarto, para rentar una habitación");
					return 1;
				} else return Message(playerid, COLOR_GRAD2, "No hay información disponible para esta propiedad!");
			}
		}
	} else Message(playerid, COLOR_GRAD2, "¡Necesitas estar conectado!");
	return 1;
}
zcmd(houseid, playerid, params[])
{
	new string[32];
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(1.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			format(string, sizeof(string), "Casa ID: %d", h);
			Message(playerid, COLOR_GRAD2,string);
			break;
		}
	}
	return 1;
}
zcmd(entrar, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
				{
					PlayerInfo[playerid][pEntered] = i;
					SetPosEx(playerid, HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz],0,HouseInfo[i][hInt],HouseInfo[i][hWorld]);
				}
				else
				{
					GameTextForPlayer(playerid, "~r~puerta cerrada", 5000, 1);
				}
			}
		}
	}
	return 1;
}
zcmd(comprarcasa, playerid, params[])
{
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			new string[128];
			if(HouseInfo[h][hOwned] == 1) return Message(playerid, COLOR_RED2, "¡Esta casa ya tiene dueño!");
			if(PlayerInfo[playerid][pPhousekey] != 9999) return Message(playerid, COLOR_RED2, "¡Ya posees una propiedad!");
			if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
			{
				format(string, sizeof(string), "Esta propiedad requiere que seas nivel %d", HouseInfo[h][hLevel]);
				Message(playerid, COLOR_RED2, string);
				return 1;
			}
			if(GetPlayerMoney(playerid) >= HouseInfo[h][hValue])
			{
				PlayerInfo[playerid][pPhousekey] = h;
				HouseInfo[h][hOwned] = 1;
				HouseInfo[h][hTime] = gettime() + 2592000;
				PlayerInfo[playerid][pEntered] = h;
				strmid(HouseInfo[h][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 255);
				Bought(playerid, HouseInfo[h][hValue]);
				SetPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz],0,HouseInfo[h][hInt],HouseInfo[h][hWorld]);
				Message(playerid, COLOR_WHITE, "Felicidades por comprar esta casa. Utiliza /ayuda casa");
				OnPropTextdrawUpdate(h);
				UpdateHouses();
				return 1;
			}
			else Message(playerid, COLOR_RED2, "No tienes fondos suficientes para comprarte esta propiedad.");
		}
	}
	return 1;
}
zcmd(salir, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			TogglePlayerControllable(playerid, 1);
			RemovePlayerFromVehicle(playerid);
		}
		else if(NoFuel[playerid] == 1)
		{
			TogglePlayerControllable(playerid, 1);
			RemovePlayerFromVehicle(playerid);
			NoFuel[playerid] = 0;
		}
		else if(PlayerInfo[playerid][pEntered] != -1)
		{
			new key = PlayerInfo[playerid][pEntered];
			SetPosEx(playerid, HouseInfo[key][hEntrancex],HouseInfo[key][hEntrancey],HouseInfo[key][hEntrancez],0,0,0);
		}
	}
	return 1;
}
zcmd(houseint, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /houseint <Casa ID>");
	if(params[0] < 0 || params[0] >= MAX_HOUSES) return Message(playerid, COLOR_GRAD2, "¡ID de casa errónea!");
	PlayerInfo[playerid][pEntered] = HouseInfo[params[0]][hWorld];
	SetPosEx(playerid,HouseInfo[params[0]][hExitx],HouseInfo[params[0]][hExity],HouseInfo[params[0]][hExitz],0,HouseInfo[params[0]][hInt],HouseInfo[params[0]][hWorld]);
	Message(playerid, COLOR_GRAD1, "¡Teleportado!");
	return 1;
}
zcmd(timehouse, playerid, params[])
{
	new h = PlayerInfo[playerid][pPhousekey], string[128];
	if(PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_GRAD2, "No posees una propiedad.");
	if(!PlayerToPoint(3.0, playerid, HouseInfo[h][hEntrancex],HouseInfo[h][hEntrancey],HouseInfo[h][hEntrancez])) return Message(playerid, COLOR_GRAD2, "No estas cerca de tu casa.");
	new
	TimeHouse = HouseInfo[h][hTime] - gettime(),
	dias = TimeHouse/60/60/24,
	horas = TimeHouse/60/60 - dias*24,
	minutos = TimeHouse/60 - dias*24*60 - horas*60;
	format(string, sizeof(string), "{FF8000}%d {FFFFFF}Dias, {FF8000}%d {FFFFFF}Horas, {FF8000}%d {FFFFFF}Minutos para pagar impuestos.", dias, horas, minutos);
	Message(playerid, COLOR_WHITE, string);
	return 1;
}
zcmd(pagarimpuestos, playerid, params[])
{
	if(!PlayerToPoint(5.0,playerid,358.3462,186.2765,1008.3828)) return Message(playerid, COLOR_GRAD2, "No estas en la recaudadora de impuestos.");
	if(PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_GRAD2, "No tienes una casa.");
	if(CheckMoney(playerid, 25000)){
		ShowPlayerDialog(playerid, HOUSE_IMPUESTOS, DIALOG_STYLE_INPUT, "Casa de Impuestos", "{FFFFFF}Por favor ingrese su numero de DNI", "Aceptar", "Cancelar");
	}
	return 1;
}
zcmd(house, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /house <Casa ID>");
	if(params[0] < 0 || params[0] >= MAX_HOUSES) return Message(playerid, COLOR_GRAD2, "¡ID de casa errónea!");
	SetPlayerPos(playerid,HouseInfo[params[0]][hEntrancex],HouseInfo[params[0]][hEntrancey],HouseInfo[params[0]][hEntrancez]);
	Message(playerid, COLOR_GRAD1, "¡Teleportado!");
	return 1;
}
zcmd(houseentrancea, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /houseentrace <Casa ID>");
	if(params[0] < 0 || params[0] >= MAX_HOUSES) return Message(playerid, COLOR_GRAD2, "¡ID de casa errónea!");
	new string[80];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	format(string,sizeof(string),"Entrada de Casa %d movido a %f - %f - %f", params[0],X,Y,Z);
	Message(playerid,COLOR_YELLOW2,string);
	HouseInfo[params[0]][hEntrancex] = X;
	HouseInfo[params[0]][hEntrancey] = Y;
	HouseInfo[params[0]][hEntrancez] = Z;
	OnPropTextdrawUpdate(params[0]);
	UpdateHouses();
	return 1;
}
zcmd(houseexita, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /houseexit <Casa ID>");
	if(params[0] < 0 || params[0] >= MAX_HOUSES) return Message(playerid, COLOR_GRAD2, "¡ID de casa errónea!");
	new string[80];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	format(string,sizeof(string),"Interior de Casa %d puesto en %f - %f - %f", params[0],X,Y,Z);
	Message(playerid,COLOR_YELLOW2,string);
	HouseInfo[params[0]][hExitx] = X;
	HouseInfo[params[0]][hExity] = Y;
	HouseInfo[params[0]][hExitz] = Z;
	HouseInfo[params[0]][hInt] = GetPlayerInterior(playerid);
	UpdateHouses();
	return 1;
}
zcmd(sarma, playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != 9999)
	{
		if(PlayerToPoint(20.0, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExitx],HouseInfo[PlayerInfo[playerid][pPhousekey]][hExity],HouseInfo[PlayerInfo[playerid][pPhousekey]][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hWorld])
		{
			if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWep] != 0)
			{
				SafeGivePlayerWeapon(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hWep], HouseInfo[PlayerInfo[playerid][pPhousekey]][hAmmo]);
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hWep] = 0;
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hAmmo] = 0;
				Message(playerid, COLOR_YELLOW, "Sacaste tu arma de tu armario. Utiliza /garma para volverla a guardar.");
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes un arma en tu armario!");
		}
		else Message(playerid, COLOR_RED2, "¡No estás en tu casa!");
	}
	else Message(playerid, COLOR_RED2, "¡No tienes casa!");
	return 1;
}
zcmd(garma, playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != 9999)
	{
		if(PlayerToPoint(20.0, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExitx],HouseInfo[PlayerInfo[playerid][pPhousekey]][hExity],HouseInfo[PlayerInfo[playerid][pPhousekey]][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hWorld])
		{
			if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWep] > 0) return Message(playerid, COLOR_RED2, "¡Tu armario está lleno!");

			new gunID = GetPlayerWeapon(playerid);
			new gunAmmo = GetPlayerAmmo(playerid);
			if(gunID != 0 && gunAmmo != 0)
			{
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hWep] = gunID;
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hAmmo] = gunAmmo;
				RemovePlayerWeapon(playerid, gunID);
				Message(playerid, COLOR_YELLOW, "Guardaste tu arma en tu armario. Utiliza /sarma para removerla.");
			}
			else Message(playerid, COLOR_RED2, "¡No tienes arma!");
		}
		else Message(playerid, COLOR_RED2, "¡No estás en tu casa!");
	}
	else Message(playerid, COLOR_RED2, "¡No tienes casa!");
	return 1;
}
zcmd(gbodega, playerid, params[])
{
	new string[128], item[32], houseid = PlayerInfo[playerid][pPhousekey];
	if(!sscanf(params,"s[32]d",item,params[1]))
	{
		if(PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_GRAD2, "¡No tienes una casa!");
		if(PlayerToPoint(20.0, playerid, HouseInfo[houseid][hExitx],HouseInfo[houseid][hExity],HouseInfo[houseid][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hWorld])
		{
			if(strcmp(item,"materiales",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pMats])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de materiales!");
				HouseInfo[houseid][hMats] += params[1];
				PlayerInfo[playerid][pMats] -= params[1];
				format(string, sizeof(string), "* Guardaste %d materiales en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"droga",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pDrugs])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de droga!");
				HouseInfo[houseid][hDrugs] += params[1];
				PlayerInfo[playerid][pDrugs] -= params[1];
				format(string, sizeof(string), "* Guardaste %d gramos de droga en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"speed",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pSpeed])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de speed!");
				HouseInfo[houseid][hSpeed] += params[1];
				PlayerInfo[playerid][pSpeed] -= params[1];
				format(string, sizeof(string), "* Guardaste %d speed en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"ectasy",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pEctasy])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de ectasy!");
				HouseInfo[houseid][hEctasy] += params[1];
				PlayerInfo[playerid][pEctasy] -= params[1];
				format(string, sizeof(string), "* Guardaste %d ectasy en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"ritalin",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pRitalin])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de ritalin!");
				HouseInfo[houseid][hRitalin] += params[1];
				PlayerInfo[playerid][pRitalin] -= params[1];
				format(string, sizeof(string), "* Guardaste %d ritalin en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"heroina",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pHeroina])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de heroina!");
				HouseInfo[houseid][hHeroina] += params[1];
				PlayerInfo[playerid][pHeroina] -= params[1];
				format(string, sizeof(string), "* Guardaste %d heroina en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"marihuana",true) == 0)
			{
				if(params[1] > PlayerInfo[playerid][pMarihuana])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de marihuana!");
				HouseInfo[houseid][hMarihuana] += params[1];
				PlayerInfo[playerid][pMarihuana] -= params[1];
				format(string, sizeof(string), "* Guardaste %d marihuana en tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
		} else Message(playerid, COLOR_GRAD2, "¡No estás en tu casa!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /gbodega <materiales, droga, speed, ectasy, ritalin, heroina, marihuana> <Cantidad>");
	return 1;
}
zcmd(sbodega, playerid, params[])
{
	new string[128], item[32], houseid = PlayerInfo[playerid][pPhousekey];
	if(!sscanf(params,"s[32]d",item,params[1]))
	{
		if(PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_GRAD2, "¡No tienes una casa!");
		if(PlayerToPoint(20.0, playerid, HouseInfo[houseid][hExitx],HouseInfo[houseid][hExity],HouseInfo[houseid][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hWorld])
		{
			if(strcmp(item,"materiales",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hMats])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de materiales guardados!");
				HouseInfo[houseid][hMats] -= params[1];
				PlayerInfo[playerid][pMats] += params[1];
				format(string, sizeof(string), "* Sacaste %d materiales de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"droga",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hDrugs])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de droga guardada!");
				HouseInfo[houseid][hDrugs] -= params[1];
				PlayerInfo[playerid][pDrugs] += params[1];
				format(string, sizeof(string), "* Sacaste %d gramos de droga de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"speed",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hSpeed])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de speed guardada!");
				HouseInfo[houseid][hSpeed] -= params[1];
				PlayerInfo[playerid][pSpeed] += params[1];
				format(string, sizeof(string), "* Sacaste %d speed de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"ectasy",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hEctasy])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de ectasy guardada!");
				HouseInfo[houseid][hEctasy] -= params[1];
				PlayerInfo[playerid][pEctasy] += params[1];
				format(string, sizeof(string), "* Sacaste %d ectasy de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"ritalin",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hRitalin])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de ritalin guardada!");
				HouseInfo[houseid][hRitalin] -= params[1];
				PlayerInfo[playerid][pRitalin] += params[1];
				format(string, sizeof(string), "* Sacaste %d ritalin de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"heroina",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hHeroina])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de heroina guardada!");
				HouseInfo[houseid][hHeroina] -= params[1];
				PlayerInfo[playerid][pHeroina] += params[1];
				format(string, sizeof(string), "* Sacaste %d heroina de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
			else if(strcmp(item,"marihuana",true) == 0)
			{
				if(params[1] > HouseInfo[houseid][hMarihuana])  return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de marihuana guardada!");
				HouseInfo[houseid][hMarihuana] -= params[1];
				PlayerInfo[playerid][pMarihuana] += params[1];
				format(string, sizeof(string), "* Sacaste %d marihuana de tu casa.", params[1]);
				Message(playerid, COLOR_YELLOW, string);
			}
		} else Message(playerid, COLOR_GRAD2, "¡No estás en tu casa!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /sbodega <materiales, droga, speed, ectasy, ritalin, heroina, marihuana> <Cantidad>");
	return 1;
}
zcmd(bodega, playerid, params[])
{
	new string[128], houseid = PlayerInfo[playerid][pPhousekey];
	if(PlayerInfo[playerid][pPhousekey] == 9999) return Message(playerid, COLOR_GRAD2, "¡Usted no tiene una casa!");
	if(PlayerToPoint(20.0, playerid, HouseInfo[houseid][hExitx],HouseInfo[houseid][hExity],HouseInfo[houseid][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hWorld])
	{
		Message(playerid, COLOR_YELLOW, "============================== Inventario =============================");
		format(string, sizeof(string), "Materiales: %d - Drogas: %d - Speed: %d - Ectasy: %d - Ritalin: %d - Heroina: %d - Marihuana: %d", HouseInfo[houseid][hMats],
			HouseInfo[houseid][hDrugs], HouseInfo[houseid][hSpeed], HouseInfo[houseid][hEctasy], HouseInfo[houseid][hRitalin], HouseInfo[houseid][hHeroina], HouseInfo[houseid][hMarihuana]);
		Message(playerid, COLOR_WHITE, string);
		return 1;
	} else Message(playerid, COLOR_GRAD2, "¡No estás en tu casa!");
	return 1;
}
zcmd(allanarcasa, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		new string[128];
		if(PlayerToPoint(3.0, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			format(string, sizeof(string), "* %s coje saca un C4, lo activa y lo coloca en la puerta de la casa.", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ProxDetector(20.0, playerid, "* C4 (( Bip Bip Bip ))", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
			ProxDetector(20.0, playerid, "¡La bomba esta a punto de explotar, cubranse!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetTimerEx("TumbarPuerta", 10000, false, "ifff", playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
			HouseExplo[playerid] = i;
			return 1;
		}
	}
	return 1;
}
zcmd(revisarcasa, playerid, params[])
{
	new string[128];
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(20.0,playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]))
		{
			format(string, sizeof(string), "* %s revisa la casa en busca de materiales/drogas.", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Message(playerid, COLOR_YELLOW, "============================== Inventario =============================");
			format(string, sizeof(string), "Materiales: %d - Drogas: %d - Speed: %d - Ectasy: %d - Ritalin: %d - Heroina: %d - Marihuana: %d", HouseInfo[i][hMats],
				HouseInfo[i][hDrugs], HouseInfo[i][hSpeed], HouseInfo[i][hEctasy], HouseInfo[i][hRitalin], HouseInfo[i][hHeroina], HouseInfo[i][hMarihuana]);
			Message(playerid, COLOR_WHITE, string);
			return 1;
		}
	}
	return 1;
}
zcmd(incautar, playerid, params[])
{
	new string[128];
	if(!Team_LSPD(playerid) && !Team_FBI(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(20.0,playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]))
		{
			if(HouseInfo[i][hMats] == 0 && HouseInfo[i][hDrugs] == 0 && HouseInfo[i][hSpeed] == 0 && HouseInfo[i][hEctasy] == 0 && HouseInfo[i][hRitalin] == 0 && HouseInfo[i][hHeroina] == 0 && HouseInfo[i][hMarihuana] == 0) return Message(playerid, COLOR_GRAD2, "¡Esta casa no tiene nada para incautar!");
			format(string, sizeof(string), "* %s toma la evidencia y las guarda.", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			HouseInfo[i][hMats] = 0;
			HouseInfo[i][hDrugs] = 0;
			HouseInfo[i][hSpeed] = 0;
			HouseInfo[i][hEctasy] = 0;
			HouseInfo[i][hRitalin] = 0;
			HouseInfo[i][hHeroina] = 0;
			HouseInfo[i][hMarihuana] = 0;
			format(string, sizeof(string), "* Central: %s ha incautado drogas/materiales en una casa de Los Santos.", PlayerName(playerid));
			if(Team_LSPD(playerid)) { SendRadioMessage(1, TEAM_RADIO_COLOR, string); Fondos[LSPD] += 10000; }
			else if(Team_FBI(playerid)) { SendRadioMessage(24, TEAM_RADIO_COLOR, string); Fondos[FBI] += 10000; }
			return 1;
		}
	}
	return 1;
}
zcmd(heal, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey];
		if(bouse != 9999)
		{
			if(PlayerToPoint(20.0,playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
			{
				SetHP(playerid, 100.0);
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
		}
		else Message(playerid, COLOR_RED2, "No posees una propiedad.");
	}
	else Message(playerid, COLOR_RED2, "! Primero Conectate !");
	return 1;
}
zcmd(renta, playerid, params[])
{
	if(!sscanf(params, "i", params[0]))
	{
		new bouse = PlayerInfo[playerid][pPhousekey], string[64];
		if (bouse != 9999 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(params[0] < 0 || params[0] > 1000) return Message(playerid, COLOR_GRAD2, "Valor entre 1 - 1000$; 0 = No rentable");

			HouseInfo[bouse][hRent] = params[0];
			OnPropTextdrawUpdate(bouse);
			format(string, sizeof(string), "Renta de la propiedad: %d", HouseInfo[bouse][hRent]);
			Message(playerid, COLOR_WHITE, string);
		}
		else Message(playerid, COLOR_RED2, "No posees una propiedad.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /renta <precio>");
	return 1;
}
zcmd(abrir, playerid, params[])
{
	new x = PlayerInfo[playerid][pPhousekey];
	if(PlayerToPoint(3, playerid,HouseInfo[x][hEntrancex], HouseInfo[x][hEntrancey], HouseInfo[x][hEntrancez]))
	{
		if(HouseInfo[x][hLock] == 1)
		{
			HouseInfo[x][hLock] = 0;
			GameTextForPlayer(playerid, "~w~Puerta ~g~Abierta", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseInfo[x][hLock] = 1;
			GameTextForPlayer(playerid, "~w~Puerta ~r~cerrada", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás en la puerta de tu casa!");
	return 1;
}
zcmd(cajafuerte, playerid, params[])
{
	new bouse = PlayerInfo[playerid][pPhousekey], string[64];
	if (bouse != 9999 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
		if(!sscanf(params, "i", params[0]))
		{
			if(PlayerToPoint(20.0,playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
			{
				if (params[0] >  HouseInfo[bouse][hRentabil] || params[0] < 1) return Message(playerid, COLOR_RED2, "No dispones de esa cantidad.");
				else
				{
					GivePlayerMoney(playerid,params[0]);
					HouseInfo[bouse][hRentabil]=HouseInfo[bouse][hRentabil]-params[0];
					format(string, sizeof(string), "Extraiste %d$ de tu caja fuerte. Te quedan: %d$", params[0],HouseInfo[bouse][hRentabil]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			else Message(playerid, COLOR_RED2, "No estás en tu casa.");
		}
		else
		{
			format(string, sizeof(string), "Utilice: /cajafuerte <$> (Tiene %d$ de ganancias)", HouseInfo[bouse][hRentabil]);
			Message(playerid, COLOR_GRAD2, string);
		}
	}
	else Message(playerid, COLOR_RED2, "No posees una propiedad.");
	return 1;
}
    		//zcmd [Sell Adm]
zcmd(venderauto, playerid, params[]){
	new vehid = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	if(!IsAnOwnableCar(vehid)) return Message(playerid, COLOR_GRAD2, "¡No es un vehículo de venta!");
	new Float:x,Float:y,Float:z,Float:a;
	CarInfo[vehid][cOwned] = 0;
	strmid(CarInfo[vehid][cOwner], "Concesionario", 0, strlen("Concesionario"), 999);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	Message(playerid, COLOR_GRAD2, "¡Has vendido el vehículo!");
	GetVehiclePos(vehid, x, y, z);
	GetVehicleZAngle(vehid, a);
	CarInfo[vehid][cLocationx] = x;
	CarInfo[vehid][cLocationy] = y;
	CarInfo[vehid][cLocationz] = z;
	CarInfo[vehid][cAngle] = a;
	CarInfo[vehid][cBattery] = 0;
	CarInfo[vehid][cGas] = 0;
	CarInfo[vehid][cAlarm] = 0;
	CarInfo[vehid][cVehTime] = 1999999999;
	CarInfo[vehid][cLock] = 0;
	CarInfo[vehid][cSpoiler] = 0;
	CarInfo[vehid][cHood] = 0;
	CarInfo[vehid][cRoof] = 0;
	CarInfo[vehid][cSideskirt] = 0;
	CarInfo[vehid][cNitro] = 0;
	CarInfo[vehid][cLamps] = 0;
	CarInfo[vehid][cExhaust] = 0;
	CarInfo[vehid][cWheel] = 0;
	CarInfo[vehid][cHydraulics] = 0;
	CarInfo[vehid][cPaintjob] = 0;
	CarInfo[vehid][cFrontBumper] = 0;
	CarInfo[vehid][cVents] = 0;
	CarInfo[vehid][cEmbargo] = 0;
	CarInfo[vehid][cMulta] = 0;
	SetVehicleVirtualWorld(vehid, 0);
	strmid(CarInfo[vehid][cPlate], "For Sale", 0, strlen("For Sale"), 999);
	SetVehicleNumberPlate(vehid,CarInfo[vehid][cPlate]);
	RemovePlayerFromVehicle(playerid);
	TogglePlayerControllable(playerid, 1);
	UpdateCars();
	return 1;
}
zcmd(vendercasa, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "i", params[0]))
	{
		new string[128];
		if(params[0] >= MAX_HOUSES || params[0] < 0) return Message(playerid, COLOR_GRAD2, "ID incorrecto.");
		else{
			SellHouse(playerid, params[0]);
			format(string, sizeof(string), "Propiedad %d vendida.", params[0]);
			Message(playerid, COLOR_GRAD2, string);
		}
	} else Message(playerid, COLOR_GRAD2, "Utilice: /asellhouse <HouseID>");
	return 1;
}	
zcmd(hitman, playerid, params[])
{
	if(!PlayerToPoint(5.0, playerid, 1425.2998,-1291.2107,13.5560)) return Message(playerid, COLOR_GRAD2, "¡No estás en el lugar!");
	if(Hitman(playerid)) return Message(playerid, COLOR_GRAD2, "No puedes contratar siendo un hitman!");
	if(!sscanf(params, "ud", params[0], params[1]))
	{
		if(params[1] < 5000 || params[1] > 99999) return Message(playerid, COLOR_GRAD2, "Máx: 99,999$ || Mín: 5000$");
		if(IsPlayerConnected(params[0]))
		{
			if(Hitman(params[0])) return Message(playerid, COLOR_GRAD2, "¡No puedes exterminar a un hitman!");
			if (PlayerInfo[playerid][pAccount] > params[1]) {
				if(GetPlayerMoney(playerid) > 5000)
				{
					new string[128];
					Bought(playerid, params[1]);
					PlayerInfo[params[0]][pHead] += params[1];
					SendRadioMessage(23, TEAM_RADIO_COLOR, "** Atención - Hay un objetivo nuevo! **");
					format(string, sizeof(string), "[Cliente: %s] - [Objectivo: %s] - [Recompensa: %d$]",PlayerName(playerid), PlayerName(params[0]), params[1], PlayerInfo[params[0]][pHead]);
					SendRadioMessage(23, TEAM_RADIO_COLOR, string);
					format(string, sizeof(string), "* ¡%s está ahora en la lista de objetivos con una recompensa de %d!",PlayerName(params[0]), PlayerInfo[params[0]][pHead]);
					Message(playerid, COLOR_WHITE, string);
				} else Message(playerid, COLOR_RED2, "Transacción inválida.");
			} else Message(playerid, COLOR_RED2, "No puedes ofrecer una recompensa que no tienes.");
		} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /hitman <PlayerID> <recompensa>");
	return 1;
}
zcmd(disfraz, playerid, params[])
{
	if(Hitman(playerid)){
		if(PlayerToPoint(5, playerid, -282.7598,-2174.3972,28.6580)){
			ShowPlayerDialog(playerid, DIALOG_HIT, DIALOG_STYLE_INPUT, "> Disfraz <", "{78F700}Escribe el ID del que desees\n{FFFFFF}Skin's libres para hitman's.\nTIP <1 - 299>\n", "Ok", "Salir");
		}
	}
	else Message(playerid, COLOR_GRAD2, " No eres hitman.");
	return 1;
}
zcmd(amascara, playerid, params[]){
	if(PlayerInfo[playerid][pMask] == 1) return Message(playerid, COLOR_GRAD2, " Ya tienes una máscara.");
	if(Hitman(playerid)){
		if(PlayerToPoint(5, playerid, -282.7598,-2174.3972,28.6580)){
			Message(playerid, COLOR_LIGHTBLUE, "Cogiste una máscara, /mascara para ponertela.");
			PlayerInfo[playerid][pMask] = 1;
		}
	}
	else Message(playerid, COLOR_GRAD2, " No eres hitman.");
	return 1;
}
zcmd(radio, playerid, params[]){
	if(OnDuty[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No estás en servicio!");
	if(!RadioOn[playerid]){
		RadioOn[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "Prendiste tu radio.");
	}
	else{
		RadioOn[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Apagaste tu radio.");
	}
	return 1;
}
zcmd(dutytaxi, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pJob] == 9){
		if(TransportDuty[playerid] == 0){
			TransportDuty[playerid] = 1;
			format(string, sizeof(string), "** El taxista %s está en servicio.", PlayerName(playerid));
			OOCNews(COLOR_DUTY, string);
			Message(playerid, COLOR_WHITE, "* Recibirás llamadas, estás de servicio.");
		}
		else{
			TransportDuty[playerid] = 0;
			Message(playerid, COLOR_WHITE, "* Terminaste tu servicio, ya no recibirás llamadas.");
		}
	}else Message(playerid, COLOR_GRAD2, "¡No eres taxista!");
	return 1;
}
zcmd(duty, playerid, params[]){
	new string[128];
	if(IsACop(playerid)){
		if(PlayerToPoint(10, playerid,255.3,77.4,1003.6) || PlayerToPoint(12,playerid,761.7038,-382.5090,1003.3300) || PlayerToPoint(10,playerid,246.4590,125.8930,1003.2188) || PlayerToPoint(10,playerid,197.0950,168.6891,1003.0234) || PlayerToPoint(10,playerid,222.6635,186.8341,1003.0313) || PlayerToPoint(10, playerid, 1566.2216,-1672.1409,1723.1050)){
			if(OnDuty[playerid]== 0){
				format(string, sizeof(string), "* %s coge su placa y su radio.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				OnDuty[playerid] = 1;
			}
			else{
				format(string, sizeof(string), "* %s deja su placa y su radio.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ResetPlayerWeapons(playerid);
				OnDuty[playerid] = 0;
			}
		}
		else    Message(playerid, COLOR_GRAD2, "No estás en el lugar adecuado.");
	}
	else if(Team_SAMUR(playerid)){
		if(OnDuty[playerid]== 0){
			OnDuty[playerid] = 1;
			Message(playerid, COLOR_WHITE, "* Recibirás llamadas, estás de servicio.");
		}
		else{
			OnDuty[playerid] = 0;
			Message(playerid, COLOR_WHITE, "* Terminaste tu servicio, ya no recibirás llamadas.");
		}
	}
	else if(Team_Mecanicos(playerid)){
		//if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, "");
		if(OnDuty[playerid]== 0)
		{
			OnDuty[playerid] = 1;
			if(PlayerInfo[playerid][pPnumber] == 0){
				format(string, sizeof(string), "{00E45B}* Mecánico %s está en servicio, venga al taller o llame al {FFFFFF}(Tlf. 556)", PlayerName(playerid), PlayerInfo[playerid][pPnumber]);

			}else{
				format(string, sizeof(string), "{00E45B}* Mecánico %s está en servicio, venga al taller o llame al {FFFFFF}(Tlf. %d)", PlayerName(playerid), PlayerInfo[playerid][pPnumber]);
			}
			OOCNews(-1,string);
		}
		else{
			OnDuty[playerid] = 0;
			Message(playerid, COLOR_WHITE, "* Terminaste tu servicio, ya no recibirás llamadas.");
		}
	}
	else if(Gobierno(playerid) || Journalist(playerid) || Hitman(playerid)){
		if(OnDuty[playerid]== 0)
		{
			OnDuty[playerid] = 1;
			Message(playerid, COLOR_WHITE, "* Estas de servicio, puedes encender tu radio.");
		}
		else{
			OnDuty[playerid] = 0;
			Message(playerid, COLOR_WHITE, "* Terminaste tu servicio, ya no puedes usar tu radio.");
		}
	}
	else if(IsACorteJudicial(playerid)){
		if(OnDuty[playerid]== 0)
		{
			OnDuty[playerid] = 1;
			Message(playerid, COLOR_WHITE, "* Estas de servicio, puedes encender tu radio.");
		}
		else{
			OnDuty[playerid] = 0;
			Message(playerid, COLOR_WHITE, "* Terminaste tu servicio, ya no puedes usar tu radio.");
		}
	}
	else Message(playerid, COLOR_GRAD2, "¡No puedes usar este comando!");
	return 1;
}
    // Walkie Talkie
zcmd(walkie, playerid, params[]){
	if(!sscanf(params, "s[32]", params[0])){
		if(PlayerInfo[playerid][pWalkie] == 0)    return Message(playerid, COLOR_GRAD2, "No tiene un Walkie Talkie.");
		if(strcmp(params[0],"prender",true) == 0){
			if(!RadioOn[playerid]){
				return RadioOn[playerid] = 1,
				PFrecuencia[playerid] = 0,
				Message(playerid, COLOR_GREEN, "* Walkie-Talkie encendido.");
			}
			else Message(playerid, COLOR_GRAD2, "* Ya está prendido.");
		}
		else if(strcmp(params[0],"apagar",true) == 0){
			if(RadioOn[playerid]){
				return RadioOn[playerid] = 0,
				PFrecuencia[playerid] = 0,
				Message(playerid, COLOR_RED, "* Walkie-Talkie fue apagado.");
			}
			else Message(playerid, COLOR_GRAD2, "* Ya está apagado.");
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /walkie <prender, apagar>");
	return 1;
}
zcmd(frecuencia, playerid, params[]){
	if(PlayerInfo[playerid][pWalkie] > 0 && RadioOn[playerid]){
		new string[128];
		if(!sscanf(params, "i", params[0])){
			if(params[0] < 1 || params[0] > 9999)
				return Message(playerid, TEAM_RADIO_COLOR, "* Conéctese a un canal entre '1' y '9999'.");
			PFrecuencia[playerid] = params[0],
			format(string, sizeof string, "* Ahora tu frecuencia es: '%d'.",PFrecuencia[playerid]),
			Message(playerid, COLOR_GREEN, string);
		}
		else Message(playerid, COLOR_GRAD2, "Utilice: /frecuencia <Nro> entre 1 - 9999");
	}
	else Message(playerid, COLOR_GRAD2, "* No tienes una radio con la que hablar / o está apagada.");
	return 1;
}
zcmd(wt, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!RadioOn[playerid]) return Message(playerid, COLOR_GRAD2, "* Radio apagada. Utilice: '/walkie prender'");
	if(PFrecuencia[playerid] == 0) return Message(playerid, COLOR_GRAD2, "* No estás en ninguna frecuencia. Utilice: '/frecuencia'");
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		format(string, sizeof string, "* (F#%d) %s: %s", PFrecuencia[playerid], PlayerName(playerid), params[0]);
		RadioMsg(PFrecuencia[playerid], string);
		format(string, sizeof(string), "* (WT) %s: %s", PlayerName(playerid), params[0]);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /wt <Mensaje>");
	return 1;
}
zcmd(d, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(RadioOn[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡Tu radio está apagada!");
	if(!sscanf(params, "s[128]", params[0]))
	{
		if(IsACop(playerid) || Team_SAMUR(playerid) || Gobierno(playerid) || IsACorteJudicial(playerid))
		{
			new string[128];
			format(string, sizeof(string), "** %s %s: %s **", PlayerStatInfo[playerid][4], PlayerName(playerid), params[0]);
			SendRadioMessage(1, COLOR_ALLDEPT, string);
			SendRadioMessage(3, COLOR_ALLDEPT, string);
			SendRadioMessage(4, COLOR_ALLDEPT, string);
			SendRadioMessage(16, COLOR_ALLDEPT, string);
			SendRadioMessage(24, COLOR_ALLDEPT, string);
			SendRadioMessage(25, COLOR_ALLDEPT, string);
			format(string, sizeof(string), "* %s habla por su radio.", PlayerName(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else Message(playerid, COLOR_GRAD2, "¡No eres parte de un equipo!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /d <Texto>");
	return 1;
}
zcmd(f, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pMember] == 0) 	return Message(playerid, COLOR_GRAD2, "No perteneces a ninguna facción.");
		new string[128];
		format(string, sizeof(string), "** (( %s %s: %s )) **", PlayerStatInfo[playerid][4], PlayerName(playerid), params[0]);
		if(PlayerInfo[playerid][pLeader] > 0) 	SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x00E5FFDC, string);
		else 									SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: (/f)accion <texto>");
	return 1;
}
zcmd(r, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!FacRadio(playerid)) return Message(playerid, COLOR_GRAD2, "¡Tu facción no tiene una radio!");
	if(RadioOn[playerid] == 0) return Message(playerid, COLOR_GRAD2, " Tu radio está apagada.");
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		format(string, sizeof string, "** %s %s: %s", PlayerStatInfo[playerid][4], PlayerName(playerid), params[0]);
		if(PlayerInfo[playerid][pLeader] > 0) 	SendRadioMessage(PlayerInfo[playerid][pLeader], TEAM_RADIO_COLOR, string);
		else 									SendRadioMessage(PlayerInfo[playerid][pMember], TEAM_RADIO_COLOR, string);
		format(string, sizeof(string), "* %s habla por su radio.", PlayerName(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /r <Texto>");
	return 1;
}
zcmd(contratar, playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] > 0)
	{
		if(!sscanf(params, "u", params[0]))
		{
			if(IsPlayerConnected(params[0]))
			{
				if(ProxDetectorS(8.0, playerid, params[0]))
				{
					if(params[0] == playerid) 		return	Message(playerid, COLOR_GRAD2, "¡No puedes invitarte ati mismo!");
					if(Facturing[params[0]] > 0)    return 	Message(playerid, COLOR_GRAD2, "Este jugador está en otra tarea, espera.");
					if(PlayerInfo[params[0]][pMember] > 0 || PlayerInfo[params[0]][pLeader] > 0) return 	Message(playerid, COLOR_GRAD2, "Este jugador ya tiene facción.");

					new string[186];
					switch(PlayerInfo[playerid][pLeader])
					{
						case 1: 	ReqF_Name[params[0]] = "Policía Local LS";
						case 2:     ReqF_Name[params[0]] = "Piratas Del Asfalto";
						case 3: 	ReqF_Name[params[0]] = "San Andreas Ejercito M.";
						case 4: 	ReqF_Name[params[0]] = "LS Medical Center";
						case 5:     ReqF_Name[params[0]] = "Ballas"
						case 6: 	ReqF_Name[params[0]] = "Compañia de Taxi LS";
						case 7: 	ReqF_Name[params[0]] = "Mecánico Los Santos";
						case 8: 	ReqF_Name[params[0]] = "Empresa de Investigacion";
						case 9: 	ReqF_Name[params[0]] = "Groove Street";
						case 10: 	ReqF_Name[params[0]] = "La Hermandad";
						case 11:    ReqF_Name[params[0]] = "Latin Kings";
						case 12:    ReqF_Name[params[0]] = "La Cosa Nostra";
						case 13:    ReqF_Name[params[0]] = "Yakuza";
						case 14:    ReqF_Name[params[0]] = "Família Korsakova";
						case 15:    ReqF_Name[params[0]] = "Compañia de Licencias";
						case 16:    ReqF_Name[params[0]] = "Gobierno";
						case 17:    ReqF_Name[params[0]] = "CNN";
						case 19:    ReqF_Name[params[0]] = "Narcotraficantes";
						case 23:    ReqF_Name[params[0]] = "Hitman Agency";
						case 24:    ReqF_Name[params[0]] = "FBI";
						case 25:    ReqF_Name[params[0]] = "Corte Judicial";
					}
					ReqF_Faction[params[0]] = PlayerInfo[playerid][pLeader];
					Facturing[params[0]] = 1;
					format(string, sizeof(string), "\t\t----- OFERTA DE TRABAJO -----\n\n\t%s te ofrece contrato a la facción %s\n\t¿ Quieres aceptarlo y pertenecer a esta facción ?", PlayerName(playerid), ReqF_Name[params[0]]);
					ShowPlayerDialog(params[0], REQF_ACCEPT, DIALOG_STYLE_MSGBOX, "Contrato de Trabajo", string, "Aceptar", "Rechazar");
				}
				else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
			}
			else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
		}
		else Message(playerid, COLOR_GRAD2, "Utilice: /contratar <PlayerID>");
	}
	else Message(playerid, COLOR_GRAD2, "Usted no es lider de facción.");
	return 1;
}
zcmd(despedir, playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 0) return Message(playerid, COLOR_GRAD2, "Usted no es lider de facción.");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /despedir <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	if(PlayerInfo[playerid][pLeader] == PlayerInfo[params[0]][pMember])
	{
		new string[80];
		format(string, sizeof(string), "  Tu líder %s te ha despedido", PlayerName(playerid));
		Message(params[0], COLOR_RED2, "--- [ Contrato de Trabajo Terminado ] --");
		Message(params[0], COLOR_WHITE, string);
		format(string, sizeof(string), "  Despediste a %s", PlayerName(params[0]));
		Message(playerid, COLOR_WHITE, string);
		PlayerInfo[params[0]][pMember] = 0;
		PlayerInfo[params[0]][pRank] = 0;
		UpdatePlayerStat(params[0]);
		SetPlayerSkin(params[0], 299);
	} else Message(playerid, COLOR_GRAD2, "El jugador no pertenece a tu facción.");
	return 1;
}
zcmd(recibirstats, playerid, params[]){
	if(PlayerInfo[playerid][pLevel] != 1) return SendClientMessage(playerid, -1, "Este comando es solo para nuevos usuarios.");
	PlayerInfo[playerid][pLevel] = 2;
	PlayerInfo[playerid][pAccount] = 12000;
	SendClientMessage(playerid, -1, "{575A64}Hermandad Zero RP: ¡Bienvenido! acabas de recibir LVL: 2 y se a añadido 12.000 $ a tu cuenta bancaria. ");
	return 1;
}
zcmd(giverank, playerid, params[])
{
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		if(params[1] > 8 || params[1] < 0) { SendClientMessage(playerid, COLOR_GREY, " No hay rango tan alto!"); return 1; }
		if(PlayerInfo[playerid][pLeader] == 0) return Message(playerid, COLOR_GRAD2, "No eres líder de facción.");
		if(IsPlayerConnected(params[0]))
		{
			if(PlayerInfo[params[0]][pLeader] > 0) return Message(playerid, COLOR_GRAD2, "¡No puedes asignar rango a un líder!");
			if(PlayerInfo[playerid][pLeader] == PlayerInfo[params[0]][pMember])
			{
				new string[128];
				PlayerInfo[params[0]][pRank] = params[1];
				UpdatePlayerStat(params[0]);
				format(string, sizeof(string), "Líder %s asignó rango %d al miembro %s", PlayerName(playerid), PlayerInfo[params[0]][pRank], PlayerName(params[0]));
				Message(params[0], COLOR_LIGHTBLUE, string);
				Message(playerid, COLOR_LIGHTBLUE, string);
			}
			else Message(playerid, COLOR_GRAD2, "¡Este miembro no es de tu facción!");
		}
		else Message(playerid, COLOR_GREY, "Jugado desconectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /giverank <PlayerID> <Rango>");
	return 1;
}
zcmd(equipo, playerid, params[]){
	if(Team_LSPD(playerid)){
		if(PlayerToPoint(10, playerid, 761.7038,-382.5090,1003.3300)){
			new eq[] = "Cadete\nAgente\nMotorista\nAntidisturbio\nInspector\nPolicía Científica\nTraje de Comisario\nChaleco + Salud\nPistola + Porra\nRopa Normal";
			ShowPlayerDialog(playerid,EQUIPO_DIALOG,DIALOG_STYLE_LIST,">> Equipo Policía <<",eq,"Equipar","Cancelar");
		}
	}
	if(Team_FBI(playerid)){
		if(PlayerToPoint(5, playerid, 222.3244,186.7450,1003.0313)){
			new eq[] = "Equipo FBI\nEquipo FBI Misiones\nCriminalista\nEncubierto 1\nEncubierto 2\nEncubierto 3\nChaleco + Salud\nRopa Normal";
			ShowPlayerDialog(playerid,EQUIPO_FBI,DIALOG_STYLE_LIST,">> Equipo FBI <<",eq,"Equipar","Cancelar");
		}
	}
	if(Team_NG(playerid)){
		if(PlayerToPoint(20, playerid, 258.3126,2028.1844,-6.7623) || PlayerToPoint(5.0, playerid, 243.0874,2030.2115,-6.7553)){
			new eq1[] = "Entrenamiento\nSoldado\nFrancotirador\nUS Army Liviana\nUS Army Pesada\nNormal\nChaleco+Salud";
			ShowPlayerDialog(playerid,EQUIPO_NG,DIALOG_STYLE_LIST,">> Equipo SAEM <<",eq1,"Equipar","Cancelar");
		}
	}
	else if(Team_SAMUR(playerid)){
		if(PlayerToPoint(5, playerid, -2639.9487,535.6438,51.6134)){
			new eq[] = "Traje Doctor\nTraje Médico Blanco\nTraje Médico Azul\nTraje Médico Verde\nIndumentario Normal";
			ShowPlayerDialog(playerid,EQUIPO_DIALOG4,DIALOG_STYLE_LIST,">> Equipo SAMUR <<",eq,"Equipar","Cancelar");
		}
	}
	else if(Team_Mecanicos(playerid)){
		if(PlayerToPoint(5, playerid, 1615.2629,-2160.2664,13.6281)) {
			new mec[] = "Ayudante\nMecanico\nIngeniero\nDirector\nRopa Normal";
			ShowPlayerDialog(playerid,EQUIPO_MECANICO,DIALOG_STYLE_LIST,">> Equipo Mecánico <<",mec,"Equipar","Cancelar");
		}
	}
	else if(Gobierno(playerid)){
		if(PlayerToPoint(5, playerid, 366.6122,158.6483,1008.3828)){
			new gob[] = "Equipo Guardaespaldas\nRopa Normal";
			ShowPlayerDialog(playerid,EQUIPO_GOBIERNO,DIALOG_STYLE_LIST,">> Equipo Gobierno <<",gob,"Equipar","Cancelar");
		}
	}
	else if(Hitman(playerid)){
		if(PlayerToPoint(5, playerid, -282.7598,-2174.3972,28.6580)){
			new hit[] = "Pistol SD + Cuchillo\nSniper + Cuchillo\nD. Eagle + Cuchillo\nDejar Armas";
			ShowPlayerDialog(playerid,EQUIPO_HITMAN,DIALOG_STYLE_LIST,">> Equipo Hitman <<",hit,"Equipar","Cancelar");
		}
	}
	else if(Team_CorteJudicial(playerid)){
		if(PlayerToPoint(5, playerid, 1425.7179,-1460.4479,1616.3573)){
			new gob[] = "Abogado\nFiscal\nJuez\nJuez Supremo";
			ShowPlayerDialog(playerid,EQUIPO_CORTEJUDICIAL,DIALOG_STYLE_LIST,">> Equipo Corte Judicial <<",gob,"Equipar","Cancelar");
		}
	}
	else if(PlayerInfo[playerid][pJob] == 9){
		if(PlayerToPoint(5, playerid, -1825.4268,137.4265,18.9315)){
			new eq[] = "Traje I\nTraje II\nTraje III\nIndumentario Normal";
			ShowPlayerDialog(playerid,EQUIPO_DIALOG5,DIALOG_STYLE_LIST,">> Equipo Taxi <<",eq,"Equipar","Cancelar");
		}
	}
	return 1;
}
zcmd(moneda, playerid, params[])
{
	new coin = random(2)+1, string[90], coinname[10];
	if(coin == 1) 	coinname = "cara";
	else 			coinname = "cruz";
	format(string, sizeof(string), "*** %s lanza una moneda al aire y cae %s.", PlayerName(playerid), coinname);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
zcmd(ven, playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new string[128];
		if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		{
			VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
			format(string, sizeof(string), "* %s baja la ventana.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
		{
			VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
			format(string, sizeof(string), "* %s sube la ventanilla.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	return 1;
}
zcmd(limpiar, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(OnDuty[playerid] == 0 && IsACop(playerid)) return  SendClientMessage(playerid, COLOR_GREY, "¡No estas OnDuty!");
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		if(IsPlayerConnected(params[0]))
		{
			new string[128];
			switch(params[1])
			{
				case 0:
				{
					strmid(PlayerInfo[params[0]][pAntecedente1], "None", 0, strlen("None"), 64);
					strmid(PlayerInfo[params[0]][pAntecedente2], "None", 0, strlen("None"), 64);
					strmid(PlayerInfo[params[0]][pAntecedente3], "None", 0, strlen("None"), 64);
					PlayerInfo[params[0]][pBusqueda] = 0;
					SetPlayerWantedLevel(params[0], 0);
					format(string, sizeof(string), "* %s limpió los antecedentes y la búsqueda de %s", PlayerName(playerid), PlayerName(params[0]));
					Message(playerid, COLOR_GREEN, string);
					Message(params[0], COLOR_GREEN, string);
				}
				case 1:
				{
					if(strcmp("None", PlayerInfo[params[0]][pAntecedente1], true) == 0) return Message(playerid, COLOR_GRAD2, "Slot#1 Sin antecedentes!");
					else
					{
						strmid(PlayerInfo[params[0]][pAntecedente1], "None", 0, strlen("None"), 64);
						format(string, sizeof(string), "* %s limpió el antecedente 1º de %s", PlayerName(playerid), PlayerName(params[0]));
						Message(playerid, COLOR_GREEN, string);
						Message(params[0], COLOR_GREEN, string);
					}
				}
				case 2:
				{
					if(strcmp("None", PlayerInfo[params[0]][pAntecedente2], true) == 0) return Message(playerid, COLOR_GRAD2, "Slot#2 Sin antecedentes!");
					else
					{
						strmid(PlayerInfo[params[0]][pAntecedente2], "None", 0, strlen("None"), 64);
						format(string, sizeof(string), "* %s limpió el antecedente 2º de %s", PlayerName(playerid), PlayerName(params[0]));
						Message(playerid, COLOR_GREEN, string);
						Message(params[0], COLOR_GREEN, string);
					}
				}
				case 3:
				{
					if(strcmp("None", PlayerInfo[params[0]][pAntecedente3], true) == 0) return Message(playerid, COLOR_GRAD2, "Slot#3 Sin antecedentes!");
					else
					{
						strmid(PlayerInfo[params[0]][pAntecedente3], "None", 0, strlen("None"), 64);
						format(string, sizeof(string), "* %s limpió el antecedente 3º de %s", PlayerName(playerid), PlayerName(params[0]));
						Message(playerid, COLOR_GREEN, string);
						Message(params[0], COLOR_GREEN, string);
					}
				}
				case 4:
				{
					PlayerInfo[params[0]][pBusqueda] = 0;
					SetPlayerWantedLevel(playerid, 0);
					format(string, sizeof(string), "* %s canceló el nivel de búsqueda de %s", PlayerName(playerid), PlayerName(params[0]));
					Message(playerid, COLOR_GREEN, string);
					Message(params[0], COLOR_GREEN, string);
				}
			}
		}
		else Message(playerid, COLOR_GRAD2, "Error de ID - Jugador OffLine.");
	}
	else
	{
		ClearChatbox(playerid, 5);
		Message(playerid, COLOR_GRAD2, "Utilice: /limpiar <ID> <item> 0 [Todos] 1 [Antecedente] 2 [Antecedente] 3 [Antecedente] 4 [N. Busqueda]");
	}
	return 1;
}
zcmd(ant, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(OnDuty[playerid] == 0) return  Message(playerid, COLOR_GREY, "¡No estas OnDuty!");
	if(!sscanf(params, "us[64]", params[0], params[1]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(StringOther(playerid, params[1]) == 1)
			{
				if (IsACop(params[0])) return Message(playerid, COLOR_GRAD2, "No puedes acusar a un policía.");
				if(strcmp("None", PlayerInfo[params[0]][pAntecedente1], true) == 0 || strcmp("None", PlayerInfo[params[0]][pAntecedente2], true) == 0 || strcmp("None", PlayerInfo[params[0]][pAntecedente3], true) == 0)
				{
					if(strcmp("None", PlayerInfo[params[0]][pAntecedente1], true) == 0)  	strmid(PlayerInfo[params[0]][pAntecedente1], params[1], 0, strlen(params[1]), 64);
					else if(strcmp("None", PlayerInfo[params[0]][pAntecedente2], true) == 0) strmid(PlayerInfo[params[0]][pAntecedente2], params[1], 0, strlen(params[1]), 64);
					else if(strcmp("None", PlayerInfo[params[0]][pAntecedente3], true) == 0) strmid(PlayerInfo[params[0]][pAntecedente3], params[1], 0, strlen(params[1]), 64);

					new string[128];
					Message(playerid, COLOR_RED,  "_________| Antecedentes Policiales |_________");
					Message(params[0], COLOR_RED, "_________| Antecedentes Policiales |_________");
					format(string, sizeof(string), "- %s", PlayerInfo[params[0]][pAntecedente1]);    	Message(playerid, COLOR_YELLOW, string);    Message(params[0], COLOR_YELLOW, string);
					format(string, sizeof(string), "- %s", PlayerInfo[params[0]][pAntecedente2]);    	Message(playerid, COLOR_YELLOW, string);    Message(params[0], COLOR_YELLOW, string);
					format(string, sizeof(string), "- %s", PlayerInfo[params[0]][pAntecedente3]);   	Message(playerid, COLOR_YELLOW, string);    Message(params[0], COLOR_YELLOW, string);
					Message(playerid, COLOR_RED,  "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
					Message(params[0], COLOR_RED, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
					format(string, sizeof(string), "* El oficial %s escribe en el historial de %s", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else Message(playerid, COLOR_GRAD2, "Ha alcanzado el límite de Antecedentes");
			}
			else Message(playerid, COLOR_GRAD2, "* Has utilizado carácteres no permitidos.");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /ant <PlayerID> <Antecedente>");
	return 1;
}
zcmd(expediente, playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "¡Primero conectate!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /expediente <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	if(ProxDetectorS(8.0, playerid, params[0]))
	{
		new string[64];
		Message(params[0], COLOR_GREEN,"______-= Expediente policial =-_______");
		format(string, sizeof(string),"  Nombre: %s", PlayerName(playerid));
		Message(params[0], COLOR_WHITE,string);
		Message(params[0], COLOR_YELLOW2,"  Antecedentes:");
		format(string, sizeof(string), "  - %s", PlayerInfo[playerid][pAntecedente1]);
		Message(params[0], WANTED_COLOR, string);
		format(string, sizeof(string), "  - %s", PlayerInfo[playerid][pAntecedente2]);
		Message(params[0], WANTED_COLOR, string);
		format(string, sizeof(string), "  - %s", PlayerInfo[playerid][pAntecedente3]);
		Message(params[0], WANTED_COLOR, string);
		Message(params[0], COLOR_GREEN,"_______________________________________");
		format(string, sizeof(string), "* %s le muestra a %s su expediente.", PlayerName(playerid), params[0]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else Message(playerid, COLOR_GRAD2, "Jugador está lejos de ti.");
	return 1;
}
zcmd(nokear, playerid, params[])
{
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /nokear <ID>");
	if(PlayerInfo[playerid][pLevel] < 2) return Message(playerid, COLOR_GRAD2, "Usted debe ser mayor al nivel 2.");
	if(KnockedDown[playerid] == 0 || IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(params[0]))
	{
		if(ProxDetectorS(3.0, playerid, params[0]))
		{
			new rands = random(2)+1, string[128];
			format(string, sizeof(string), "* %s agarra una piedra.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
			KnockedDown[playerid] = 100;

			if(rands == 1)
			{
				ApplyAnimation(params[0], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetTimerEx("ClearKnock", 60000, false, "i", params[0]);
				SetTimerEx("ClearKnock", 60000, false, "i", playerid);
				KnockedDown[params[0]] = 1;
				format(string, sizeof(string), "* %s intenta noquear a %s con la piedra y lo consige.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(3.0, playerid, string, 0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF);
				format(string, sizeof(string), "* %s queda inconsciente.", PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				format(string, sizeof(string), "* %s intenta noquear a %s con la piedra y le da muy suave.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(3.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
			}
		}
		else Message(playerid, COLOR_GRAD2, "El jugador está muy lejos de usted.");
	}
	else Message(playerid, COLOR_GRAD2, "Usted no puede utilizar este comando ahora.");
	return 1;
}
	//SAEM
zcmd(misil, playerid, params[])
{
	new Float:M_X, Float:M_Y, Float:M_Z, Float:radius;
	if(Team_NG(playerid))
	{
		if(Misile_Launcher < 3)
		{
			new string[128];
			if(PlayerToPoint(1.0,playerid,2634.9543,-2351.2449,30.5923))
			{
				if(!sscanf(params, "fffiii",M_X,M_Y,M_Z,radius,params[1],params[2]))
				{
					if(PlayerInfo[playerid][pRank] > 3)
					{
						if(radius > 100 || radius < 0) return Message(playerid, COLOR_GRAD2, "Radio máximo 100");
						if(params[1] > 13  || params[1] < 0) return Message(playerid, COLOR_GRAD2, "Tipo explosión 0-13");
						if(params[2] > 60  || params[2] < 0) return Message(playerid, COLOR_GRAD2, "Tiempo máximo 60 segundos");
						SetTimerEx("MissileLaunchEx", params[2]*1000, false, "fffii", M_X,M_Y,M_Z,radius,params[1]);
						Misile_Launcher ++;
						SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
						format(string, sizeof(string), "* Lanzamiento de misil en %d segundos, destino: %0.2f - %0.2f - %0.2f, radio: %d",
							params[2],M_X,M_Y,M_Z,radius,params[1]);
						SendRadioMessage(3, TEAM_RADIO_COLOR, string);
					}
					else Message(playerid, COLOR_GRAD2, "Necesitas ser mayor de rango 3.");
				}
				else Message(playerid, COLOR_GRAD2, "Utilice: /misil <coordenada X> <coordenada Y> <coordenada Z> <radio> <tipo> <tiempo>");
			}
			else if(PlayerToPoint(1.0,playerid,2752.9141,-2351.3301,31.0923))
			{
				if(!sscanf(params, "id",params[0], params[1]))
				{
					if(PlayerInfo[playerid][pRank] > 3)
					{
						if(params[0] > VEH || params[0] < 0) return Message(playerid, COLOR_GRAD2, "Vehículo incorrecto.");
						if(params[1] > 60  || params[1] < 0) return Message(playerid, COLOR_GRAD2, "Tiempo máximo 60 segundos");
						SetTimerEx("MissileLaunch", params[1]*1000, false, "i", params[0]);
						Misile_Launcher ++;
						SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
						format(string, sizeof(string), "* Lanzamiento de misil en %d segundos, objetivo vehículo %d.", params[1], params[0]);
						SendRadioMessage(3, TEAM_RADIO_COLOR, string);
					}
					else Message(playerid, COLOR_GRAD2, "Necesitas ser mayor de rango 3.");
				}
				else Message(playerid, COLOR_GRAD2, "Utilice: /misil <vehículo> <tiempo>");
			}
			else Message(playerid, COLOR_GRAD2, "No estás en ningún lanzamisiles.");
		}
		else Message(playerid, COLOR_GRAD2, "Aún no han detonado los otros misiles.");
	}
	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(arrestar, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(!sscanf(params, "uiii", params[0], params[1], params[2], params[3]))
	{
		//LSPD
		if(PlayerToPoint(4.0, playerid, 780.4319,-360.8171,994.2100)) { 
			if(!ProxDetectorS(5.0, playerid, params[0])) return Message(playerid, COLOR_GREY, "¡Jugador muy lejos!");
			if(params[1] < 0 || params[1] > 60) return Message(playerid, COLOR_GREY, "El máximo de minutos es 60.");
			if(params[2] < 0 || params[2] > 120000) return Message(playerid, COLOR_GREY, "El máximo de precio es 120,000$");
			if(params[3] < 0 || params[3] > 9999999) return Message(playerid, COLOR_GREY, "Máximo fianza: 9,999,999$ (Sin fianza)");

			new wantedlevel = GetPlayerWantedLevel(params[0]), string[128];
			if(wantedlevel < 1) return SendClientMessage(playerid, COLOR_GREY, "¡Este jugador no tiene nivel de búsqueda!");

			SetPlayerWantedLevel(params[0], 0);
			GameTextForPlayer(params[0], "ENCARCELADO", 5000, 5);
			Bought(params[0], params[2]);
			Fondos[LSPD] += params[2];
			ResetPlayerWeapons(params[0]);
			PlayerInfo[params[0]][pJailTime] = params[1] * 60;
			PlayerInfo[params[0]][pJailed] = 3;
			format(string, sizeof(string), "{FFFFFF}Noticias {EE0000}SA {00B546}CNN+{FFFFFF} \"Sospechoso {FF9900}%s {FFFFFF}ha sido arrestado por %d años\"",PlayerName(params[0]), params[1]);
			GlobalMsg(-1, string);
			format(string, sizeof(string), "[ Sospechoso %s encarcelado por %d minutos, multa %d$, fianza %d$ - Oficial: %s ]", PlayerName(params[0]),params[1],params[2],params[3],PlayerName(playerid));
			MessageEx(playerid, params[0], COLOR_WHITE, string);
			if(GetPlayerInterior(playerid) == 3 || GetPlayerInterior(params[0]) == 3)
			{
				PlayerInfo[params[0]][pJailed] = 3;
				new cellran = random(3);
				switch(cellran)
				{
					case 0: SetPosEx(params[0], 197.5159,174.6245,1003.0234,3.1802,3,0);
					case 1: SetPosEx(params[0], 193.3041,175.5405,1003.0234,355.6601,3,0);
					case 2: SetPosEx(params[0], 198.3940,161.4172,1003.0300,176.7217,3,0);
				}
			}
			else Message(playerid, COLOR_GRAD2, "No estás en las celdas.");
			return 1;
		}
        //FBI
		if(PlayerToPoint(4.0, playerid, 200.7091,168.4553,1003.0234)) {
			if(!ProxDetectorS(5.0, playerid, params[0])) return Message(playerid, COLOR_GREY, "¡Jugador muy lejos!");
			if(params[1] < 0 || params[1] > 60) return Message(playerid, COLOR_GREY, "El máximo de minutos es 60.");
			if(params[2] < 0 || params[2] > 120000) return Message(playerid, COLOR_GREY, "El máximo de precio es 120,000$");
			if(params[3] < 0 || params[3] > 9999999) return Message(playerid, COLOR_GREY, "Máximo fianza: 9,999,999$ (Sin fianza)");

			new wantedlevel = GetPlayerWantedLevel(params[0]), string[128];
			if(wantedlevel < 1) return SendClientMessage(playerid, COLOR_GREY, "¡Este jugador no tiene nivel de búsqueda!");

			SetPlayerWantedLevel(params[0], 0);
			GameTextForPlayer(params[0], "ENCARCELADO", 5000, 5);
			Bought(params[0], params[2]);
			Fondos[FBI] += params[2];
			ResetPlayerWeapons(params[0]);
			PlayerInfo[params[0]][pJailTime] = params[1] * 60;
			PlayerInfo[params[0]][pJailed] = 4;
			format(string, sizeof(string), "{FFFFFF}Noticias {EE0000}SA {00B546}CNN+{FFFFFF} \"Sospechoso {FF9900}%s {FFFFFF}ha sido arrestado por %d años\"",PlayerName(params[0]), params[1]);
			GlobalMsg(-1, string);
			format(string, sizeof(string), "[ Sospechoso %s encarcelado por %d minutos, multa %d$, fianza %d$ - Oficial: %s ]", PlayerName(params[0]),params[1],params[2],params[3],PlayerName(playerid));
			MessageEx(playerid, params[0], COLOR_WHITE, string);
			return 1;
		}
            //SAEM
		if(PlayerToPoint(4.0, playerid, 625.9482,854.0344,-90.2031)) 
		{
			if(!ProxDetectorS(5.0, playerid, params[0])) return Message(playerid, COLOR_GREY, "¡Jugador muy lejos!");
			if(params[1] < 0 || params[1] > 60) return Message(playerid, COLOR_GREY, "El máximo de minutos es 60.");
			if(params[2] < 0 || params[2] > 120000) return Message(playerid, COLOR_GREY, "El máximo de precio es 120,000$");
			if(params[3] < 0 || params[3] > 9999999) return Message(playerid, COLOR_GREY, "Máximo fianza: 9,999,999$ (Sin fianza)");

			new wantedlevel = GetPlayerWantedLevel(params[0]), string[128];
			if(wantedlevel < 1) return SendClientMessage(playerid, COLOR_GREY, "¡Este jugador no tiene nivel de búsqueda!");

			SetPlayerWantedLevel(params[0], 0);
			GameTextForPlayer(params[0], "ENCARCELADO", 5000, 5);
			Bought(params[0], params[2]);
			Fondos[SAEM] += params[2];
			ResetPlayerWeapons(params[0]);
			PlayerInfo[params[0]][pJailTime] = params[1] * 60;
			PlayerInfo[params[0]][pJailed] = 5;
			format(string, sizeof(string), "{FFFFFF}Noticias {EE0000}SA {00B546}CNN+{FFFFFF} \"Sospechoso {FF9900}%s {FFFFFF}ha sido arrestado por %d años\"",PlayerName(params[0]), params[1]);
			GlobalMsg(-1, string);
			format(string, sizeof(string), "[ Sospechoso %s encarcelado por %d minutos, multa %d$, fianza %d$ - Oficial: %s ]", PlayerName(params[0]),params[1],params[2],params[3],PlayerName(playerid));
			MessageEx(playerid, params[0], COLOR_WHITE, string);
			return 1;
		}
	} else Message(playerid, COLOR_GRAD2, "Utilice: /arrestar <PlayerID> <Minutos> <Multa$> <Fianza$>");
	return 1;
}
zcmd(su, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(OnDuty[playerid] == 0 && IsACop(playerid)) return  SendClientMessage(playerid, COLOR_GREY, "¡No estas OnDuty!");
	if(!sscanf(params, "us[64]", params[0], params[1]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if (IsACop(params[0])) return Message(playerid, COLOR_GRAD2, "No puedes acusar a un policía.");
			if (PlayerInfo[params[0]][pBusqueda] == 6)
			{
				ClearChatbox(playerid, 5);
				Message(playerid, WANTED_COLOR, "Este jugador ha alcanzado el nivel de búsqueda máximo");
				return Message(playerid, WANTED_COLOR, "Nivel de búsqueda: 6/6");
			}
			else
			{
				if(PlayerInfo[params[0]][pBusqueda] < 1)
				{
					SendRadioMessage(1, TEAM_RADIO_COLOR, "** Central: se ha encontrado un nuevo sospechoso, para más información miren sus ordenadores.")
				}
				new string[64];
				ClearChatbox(playerid, 10);
				PlayerInfo[params[0]][pBusqueda] ++;
				format(string, sizeof(string), "** Acusaste a %s: %s", PlayerName(params[0]), params[1])
				Message(playerid, WANTED_COLOR, string);
				format(string, sizeof(string), "Nivel de búsqueda: %d/6", PlayerInfo[params[0]][pBusqueda])
				Message(playerid, WANTED_COLOR, string);
				SetPlayerWantedLevel(params[0], PlayerInfo[params[0]][pBusqueda]);
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: (/su)spect <PlayerID> <crimen>");
	return 1;
}
zcmd(retener, playerid, params[]){
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	if(!sscanf(params, "u", params[0])){
		if (ProxDetectorS(8.0, playerid, params[0])){
			if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "ID invalida.");
			new string[64];
			TogglePlayerControllable(params[0], 0);
			Freezed[params[0]] = 1;
			format(string, sizeof(string), "",PlayerName(playerid), PlayerName(params[0]));
			Message(params[0], COLOR_RED2, string);
			return A_Info(string);
		} else Message(playerid, COLOR_GREY, "El jugador está muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /retener <PlayerID>");
	return 1;
}
zcmd(soltar, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	if(!sscanf(params, "u", params[0]))
	{
		if (ProxDetectorS(8.0, playerid, params[0])){
			if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "ID invalida.");
			new string[64];
			TogglePlayerControllable(params[0], 1);
			Freezed[params[0]] = 0;
			format(string, sizeof(string), "",PlayerName(playerid), PlayerName(params[0]));
			Message(params[0], COLOR_RED2, string);
			return A_Info(string);
		} else Message(playerid, COLOR_GREY, "El jugador está muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /soltar <PlayerID>");
	return 1;
}
zcmd(camaras, playerid, params[])
{
	if(!IsACop(playerid) && !Team_NG(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if (PlayerToPoint(8, playerid,1579.9940,-1634.2922,13.5626))
	{
		ShowPlayerDialog(playerid, CAMARAS_LSPD, DIALOG_STYLE_LIST, "¿Que camara Deseas Ver?","\nCamara 1\nCamara 2\nCamara 3\nCamara 4\nCamara 5\nDejar camara", "Ver", "Salir");
	}
	return 1;
}
zcmd(esposar, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(!sscanf(params, "u", params[0]))
	{
		if (params[0] == playerid) return Message(playerid, COLOR_GRAD2, "¡No puedes esposarte ati mismo!");
		if (ProxDetectorS(8.0, playerid, params[0]))
		{
			new string[128];
			if(PlayerCuffed[params[0]] == 0)
			{
				format(string, sizeof(string), "* Oficial %s esposa al sospechoso %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(params[0], "~r~ESPOSADO", 2500, 3);
				PlayerCuffed[params[0]] = 1;
				SetPlayerSpecialAction(params[0], 24);
				return 1;
			}
			else
			{
				format(string, sizeof(string), "* Oficial %s desesposa a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(params[0], "~g~LIBRE", 2500, 3);
				PlayerCuffed[params[0]] = 0;
				SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
				return 1;
			}
		} else Message(playerid, COLOR_GREY, "El jugador está muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /esposar <PlayerID>");
	return 1;
}
zcmd(sospechosos, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(OnDuty[playerid] == 1)
	{
		if(!sscanf(params, "i", params[0]))
		{
			if(params[0] < 1 || params[0] > 6) return Message(playerid, COLOR_GRAD2, "Utilice: /sospechosos < Nivel Búsqueda: 1-6 >");
			new string[64];
			ClearChatbox(playerid, 10);
			Message(playerid, WANTED_COLOR, "> Sospechosos más buscados <");
			for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(params[0] == 1 && PlayerInfo[i][pBusqueda] == 1){ 		 format(string, sizeof(string), "  Nombre: %s <> Búsqueda: 1", PlayerName(i)); Message(playerid, WANTED_COLOR, string);}
				else if(params[0] == 2 && PlayerInfo[i][pBusqueda] == 2){    format(string, sizeof(string), "  Nombre: %s <> Búsqueda: 2", PlayerName(i)); Message(playerid, WANTED_COLOR, string);}
				else if(params[0] == 3 && PlayerInfo[i][pBusqueda] == 3){    format(string, sizeof(string), "  Nombre: %s <> Búsqueda: 3", PlayerName(i)); Message(playerid, WANTED_COLOR, string);}
				else if(params[0] == 4 && PlayerInfo[i][pBusqueda] == 4){    format(string, sizeof(string), "  Nombre: %s <> Búsqueda: 4", PlayerName(i)); Message(playerid, WANTED_COLOR, string);}
				else if(params[0] == 5 && PlayerInfo[i][pBusqueda] == 5){    format(string, sizeof(string), "  Nombre: %s <> Búsqueda: 5", PlayerName(i)); Message(playerid, WANTED_COLOR, string);}
				else if(params[0] == 6 && PlayerInfo[i][pBusqueda] == 6){    format(string, sizeof(string), "  Nombre: %s <> Búsqueda: 6", PlayerName(i)); Message(playerid, WANTED_COLOR, string);}
			}
		} else Message(playerid, COLOR_GRAD2, "Utilice: /sospechosos < Nivel Búsqueda: 1-6 >");
	} else Message(playerid, COLOR_GRAD2, "¡No estas OnDuty!");
	return 1;
}
zcmd(bk, playerid, params[]){
	if(RequestingBackup[playerid] == 1) return Message(playerid, COLOR_GRAD2, "Ya tienes un pedido de ayuda.");
	if(IsACop(playerid)){
		new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
		RequestingBackup[playerid] = 1;
		if(Team_LSPD(playerid)){
			format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", PlayerName(playerid));
			SendRadioMessage(1, TEAM_RADIO_COLOR, string);
			for(new i = 0; i < MAX_PLAYERS; i++){
				if(IsPlayerConnected(i)){
					if(Team_LSPD(i)){
						if(OnDuty[i]== 1){
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
			}
		}
		else if(Team_NG(playerid)){
			format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", PlayerName(playerid));
			SendRadioMessage(3, TEAM_RADIO_COLOR, string);
			for(new i = 0; i < MAX_PLAYERS; i++){
				if(IsPlayerConnected(i)){
					if(Team_NG(i)){
						if(OnDuty[i]== 1){
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
			}
		}
		else if(Team_FBI(playerid)){
			format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", PlayerName(playerid));
			SendRadioMessage(24, TEAM_RADIO_COLOR, string);
			for(new i = 0; i < MAX_PLAYERS; i++){
				if(IsPlayerConnected(i)){
					if(Team_FBI(i)){
						if(OnDuty[i]== 1){
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
			}
		}
		SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
	} else Message(playerid, COLOR_WHITE, "¡No autorizado!");
	return 1;
}
zcmd(bkc, playerid, params[]){
	if(IsACop(playerid)) BackupClear(playerid, 0);
	else Message(playerid, COLOR_WHITE, "¡No autorizado!");
	return 1;
}
zcmd(ta, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	new string[128];
	if(Tazer[playerid] == 0){
		format(string, sizeof(string), "* %s carga su tazer", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPlayerAttachedObject(playerid, 0, 18642, 6, 0.070212, 0.017647, 0.065603, 0.000000, 185.632217, 264.085418, 1.000000, 1.000000, 1.000000 );
		Att_Obj_Slot_0[playerid] = "Tazer";
		Tazer[playerid] = 1;
	}
	else{
		format(string, sizeof(string), "* %s guarda su tazer", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Tazer[playerid] = 0;
		RemoveHand(playerid);
	}
	return 1;
}
zcmd(bar, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(OnDuty[playerid] == 0 && IsACop(playerid)) return  SendClientMessage(playerid, COLOR_GREY, "¡No estas OnDuty!");
	if(!sscanf(params, "i", params[0]))
	{
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		switch(params[0])
		{
			case 1: CreateRoadblock(1459,plocx,plocy,plocz,ploca);
			case 2: CreateRoadblock(978,plocx,plocy,plocz+0.6,ploca);
			case 3: CreateRoadblock(981,plocx,plocy,plocz+0.9,ploca+180);
			case 4: CreateRoadblock(1238,plocx,plocy,plocz+0.2,ploca);
			case 5: CreateRoadblock(1425,plocx,plocy,plocz+0.3,ploca);
			case 6: CreateRoadblock(3265,plocx,plocy,plocz-0.5,ploca);
			case 7: CreateRoadblock(3091,plocx,plocy,plocz+0.5,ploca+180);
			default: Message(playerid, COLOR_GRAD2, "Utilice: (/bar)rera <ID:1-7>");
		}
		GameTextForPlayer(playerid,"~r~barrera ~w~puesta!",3000,1);
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: (/bar)rera <ID>");
		Message(playerid, COLOR_GRAD2, "IDs: 1. Pequeña | 2. Mediana | 3. Grande");
		Message(playerid, COLOR_GRAD2, "IDs: 4. Cono | 5. Desvío | 6. Prohibido | 7.Cierre");
		Message(playerid, COLOR_GRAD2, "Utiliza: /qb para quitar la barrera más cercana");
	}
	return 1;
}
zcmd(qb, playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pAdminCP] > 3)
	{
		DeleteClosestRoadblock(playerid);
		GameTextForPlayer(playerid,"~r~barrera ~w~eliminada!",3000,1);
	}
	return 1;
}
zcmd(qbs, playerid, params[])
{
	if(IsACop(playerid)  || PlayerInfo[playerid][pAdminCP] >= 3)
	{
		if(PlayerInfo[playerid][pRank] >= 6 || PlayerInfo[playerid][pAdminCP] >= 3)
		{
			DeleteAllRoadblocks(playerid);
			return GameTextForPlayer(playerid,"~w~barreras ~r~eliminadas",3000,1);
		}
	}
	return 1;
}
zcmd(multar, playerid, params[])
{
	if(!Team_LSPD(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	if(OnDuty[playerid] == 0 && !Team_NG(playerid)) return  SendClientMessage(playerid, COLOR_GREY, "¡No estas OnDuty!");
	if(!sscanf(params, "uis[64]", params[0], params[1], params[2]))
	{
		if(params[1] < 0 || params[1] > 6000) return Message(playerid, COLOR_GREY, "El máximo de multa son 6000$");
		if(IsPlayerConnected(params[0]))
		{
			if(Facturing[playerid] == 1) return Message(playerid, COLOR_GRAD2, "Este jugador ya tiene una petición pendiente");
			if(!ProxDetectorS(8.0,playerid,params[0])) return Message(playerid, COLOR_GRAD2, "Muy lejos de el jugador.");
			new string[128];
			if(GetPlayerMoney(params[0]) < params[1])
			{
				format(string, sizeof(string), "* El infractor no tiene %d$ para pagar la multa.", params[1]);
				return Message(playerid, COLOR_GRAD2, string);
			}
			else
			{
				ClearChatbox(playerid, 10);
				Message(params[0], -1, "  {1A5FFF}Estado de San Andreas");
				format(string, sizeof(string), "  {89CBC1}Demandante: {FFFFFF}%s", PlayerName(playerid));
				Message(params[0], -1, string);
				format(string, sizeof(string), "  {89CBC1}Infracción: {FFFFFF}%s", params[2]);
				Message(params[0], -1, string);
				format(string, sizeof(string), "  {FF1700}Multa: {FFFFFF}%d$", params[1]);
				Message(params[0], -1, string);
				Message(playerid, COLOR_WHITE, "* Espere la respuesta del sujeto");
				Message(params[0], COLOR_WHITE, "Lo han multado. Utilize [/aceptar multa ó /cancelar multa] para pagar la multa.");
				TicketOffer[params[0]] = playerid;
				TicketMoney[params[0]] = params[1];
				Facturing[params[0]] = 1;
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /multar <ID> <precio> <razón>");
	return 1;
}
zcmd(darjuicio, playerid, params[])
{
	if(!IsACorteJudicial(playerid)) return Message(playerid, COLOR_GRAD2, "No eres Juez.");
	if(!sscanf(params, "uis[64]", params[0], params[1], params[2]))
	{
		if(params[1] < 0 || params[1] > 6000) return Message(playerid, COLOR_GREY, "El máximo de multa son 6000$");
		if(IsPlayerConnected(params[0]))
		{
			if(Facturing[playerid] == 1) return Message(playerid, COLOR_GRAD2, "Este jugador ya tiene una petición pendiente");
			if(!ProxDetectorS(8.0,playerid,params[0])) return Message(playerid, COLOR_GRAD2, "Muy lejos de el jugador.");
			new string[128];
			if(GetPlayerMoney(params[0]) < params[1])
			{
				format(string, sizeof(string), "* El sujeto no tiene %d$ para pagar la multa.", params[1]);
				return Message(playerid, COLOR_GRAD2, string);
			}
			else
			{
				ClearChatbox(playerid, 10);
				Message(params[0], -1, "  {1A5FFF} Corte Judicial de San Andreas");
				format(string, sizeof(string), "  {89CBC1}Juez: {FFFFFF}%s", PlayerName(playerid));
				Message(params[0], -1, string);
				format(string, sizeof(string), "  {89CBC1}Razón: {FFFFFF}%s", params[2]);
				Message(params[0], -1, string);
				format(string, sizeof(string), "  {FF1700}Precio: {FFFFFF}%d$", params[1]);
				Message(params[0], -1, string);
				Message(playerid, COLOR_WHITE, "* Espere la respuesta del sujeto");
				Message(params[0], COLOR_WHITE, "Lo han citado a un Juicio. Utilize [/aceptar juicio] para aceptar el Juicio.");
				CorteJudicial[params[0]] = playerid;
				Facturing[params[0]] = 1;
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /darjuicio <ID> <Precio> <Razón>");
	return 1;
}
zcmd(darlicencia, playerid, params[0])
{
	if(!Team_LSPD(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	if(!sscanf(params, "u", params[0])){
		if(IsPlayerConnected(params[0])){
			if(ProxDetectorS(5.0,playerid, params[0])){
				new string[164];
				PlayerInfo[params[0]][pGunLic] = 1;
				format(string, sizeof(string), "* %s le da una licencia de arma a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_YELLOW, "* Has obtenido la licencia de armas.");
			} else Message(playerid, COLOR_GRAD2, "Jugador demasiado lejos.");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /darlicencia <PlayerID>");
	return 1;
}
zcmd(m, playerid, params[])
{
	if(sscanf(params, "s[128]", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /m <texto>");
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	if(Team_SAMUR(playerid) || IsACop(playerid)) {
		new string[128];
		format(string, sizeof(string), "(Megáfono) %s: %s",PlayerName(playerid), params[0]);
		ProxDetector(60.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(aceptar, playerid, params[])
{
	if(!sscanf(params,"s[64]", params[0]))
	{
		new string[128];
		if(strcmp(params[0],"telefono",true) == 0)
		{
			if(NumBuy[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡Nadie te ha ofrecido un número!");
			if(NumPrice[playerid] > GetPlayerMoney(playerid)) return Message(playerid, COLOR_GRAD2, "¡No tienes suficiente dinero!");
			format(string, sizeof(string), "* %s compra un número de teléfono", PlayerName(playerid));
			ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerInfo[playerid][pPnumber] = NumBuy[playerid];
			Earn(NumSeller[playerid], NumPrice[playerid]);
			Bought(playerid, NumPrice[playerid]);
			NumBuy[playerid] = 0;
			NumPrice[playerid] = 0;
			NumSeller[playerid] = 0;
			Facturing[playerid] = 0;
		}
		else if(strcmp(params[0],"multa",true) == 0)
		{
			if(TicketOffer[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie te multado!");
			format(string, sizeof(string), "* %s paga una multa.", PlayerName(playerid));
			ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " {FFC990}%s {FFFFFF}pagó una multa de {3E9EEA}%d$.", PlayerName(playerid), TicketMoney[playerid]);
			MessageEx(playerid, TicketOffer[playerid], -1, string);
			Bought(playerid, TicketMoney[playerid]);
			Earn(TicketOffer[playerid], TicketMoney[playerid]);
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			Facturing[playerid] = 0;
		}
		else if(strcmp(params[0],"juicio",true) == 0)
		{
			if(CorteJudicial[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie te a citado a un juicio!");
			format(string, sizeof(string), "* %s acepta un juicio.", PlayerName(playerid));
			ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " {FFC990}%s {FFFFFF}Acepto el Juicio", PlayerName(playerid));
			MessageEx(playerid, CorteJudicial[playerid], -1, string);
			Bought(playerid, TicketMoney[playerid]);
			Earn(CorteJudicial[playerid], TicketMoney[playerid]);
			CorteJudicial[playerid] = 999;
			TicketMoney[playerid] = 0;
			Facturing[playerid] = 0;
		}
		else if(strcmp(params[0],"saludo",true) == 0)
		{
			if(Saludo_ID[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie te ha ofrecido un saludo!");
			format(string, sizeof string, "* %s acepta el saludo de %s.", PlayerName(playerid), PlayerName(Saludo_ID[playerid]));
			ProxDetector(20.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);
			ApplyAnimation(Saludo_ID[playerid],"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);
			Saludo_ID[playerid] = 999;
		}
		else if(strcmp(params[0],"proteccion",true) == 0)
		{
			if(Guardes_Oferta[playerid] < 998)
			{
				if(GetPlayerMoney(playerid) > Guardes_Precio[playerid])
				{
					format(string, sizeof(string), "* Has aceptado la protección del guardespaldas %s por $%d.",PlayerName(Guardes_Oferta[playerid]),Guardes_Precio[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* %s Ha aceptado tu protección por $%d, se han añadido a su payday.",PlayerName(playerid),Guardes_Precio[playerid]);
					SendClientMessage(Guardes_Oferta[playerid], COLOR_WHITE, string);
					MoneyGiveToPlayer(Guardes_Oferta[playerid], Guardes_Precio[playerid]);
					Bought(playerid, -Guardes_Precio[playerid]);
					Guardes_Oferta[playerid] = 999;
					Guardes_Precio[playerid] = 0;
					format(string, sizeof(string), "* %s acepta el contrato del guardespaldas", PlayerName(playerid), PlayerName(Guardes_Oferta[playerid]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					Reparar_Oferta[playerid] = 999;
					Reparar_Precio[playerid] = 0;
					format(string, sizeof(string), "* %s Ha rechazado tu protección porque no posee el dinero.",PlayerName(playerid));
					SendClientMessage(Guardes_Oferta[playerid], COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_GREY, "No tienes el dinero para pagar la protección.");
					return 1;
				}
			} else SendClientMessage(playerid, COLOR_GREY, "Nadie te ha ofrecido protección!.");
		}
		else if(strcmp(params[0],"regalo",true) == 0)
		{
			if(Regalo_ID[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie te ha ofrecido un regalo!");
			switch(Regalo_ITEM[playerid])
			{
				case 1:{
					PlayerInfo[playerid][pAnilloCom] += 1;
					PlayerInfo[Regalo_ID[playerid]][pAnilloCom] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido un anillo de compromiso.");
				}
				case 2:{
					PlayerInfo[playerid][pAnilloOro] += 1;
					PlayerInfo[Regalo_ID[playerid]][pAnilloOro] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido un anillo de oro.");
				}
				case 3:{
					PlayerInfo[playerid][pCollar] += 1;
					PlayerInfo[Regalo_ID[playerid]][pCollar] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido un collar de perlas.");
				}
				case 4:{
					PlayerInfo[playerid][pAnilloDia] += 1;
					PlayerInfo[Regalo_ID[playerid]][pAnilloDia] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido un anillo de diamantes.");
				}
				case 5:{
					PlayerInfo[playerid][pPulsera] += 1;
					PlayerInfo[Regalo_ID[playerid]][pPulsera] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido una pulsera de oro.");
				}
				case 6:{
					PlayerInfo[playerid][pAretes] += 1;
					PlayerInfo[Regalo_ID[playerid]][pAretes] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido un conjunto de aretes de oro.");
				}
				case 7:{
					PlayerInfo[playerid][pReloj] += 1;
					PlayerInfo[Regalo_ID[playerid]][pReloj] -= 1;
					Message(playerid, COLOR_GRAD4, "* Has recibido un reloj de oro puro.");
				}
			}
			format(string, sizeof string, "* %s le da un regalo a %s.",PlayerName(Regalo_ID[playerid]), PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Regalo_Offer[Regalo_ID[playerid]] = 0;
			Regalo_ID[playerid] = 999;
			Regalo_ITEM[playerid] = 0;
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /aceptar <item>");
		Message(playerid, COLOR_GRAD2, "Items: telefono, multa, saludo, regalo");
	}
	return 1;
}
zcmd(cancelar, playerid, params[])
{
	if(!sscanf(params,"s[64]", params[0]))
	{
		new string[128];
		if(strcmp(params[0],"telefono",true) == 0)
		{
			if(NumBuy[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡Nadie te ha ofrecido un número!");
			format(string, sizeof(string), "* %s cancela la compra del número de teléfono", PlayerName(playerid));
			ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			NumBuy[playerid] = 0;
			NumPrice[playerid] = 0;
			NumSeller[playerid] = 0;
			Facturing[playerid] = 0;
		}
		else if(strcmp(params[0],"taxi",true) == 0)
		{
			if(TaxiCalled[playerid] > 0)
			{
				switch(TaxiCalled[playerid])
				{
					case 1: { TaxiSlot1 = 999; SlotZone1 = "Sin Localizar"; SlotCity1 = "No"; TiempoSlot1 = 0; }
					case 2: { TaxiSlot2 = 999; SlotZone2 = "Sin Localizar"; SlotCity2 = "No"; TiempoSlot2 = 0; }
					case 3: { TaxiSlot3 = 999; SlotZone3 = "Sin Localizar"; SlotCity3 = "No"; TiempoSlot3 = 0; }
					case 4: { TaxiSlot4 = 999; SlotZone4 = "Sin Localizar"; SlotCity4 = "No"; TiempoSlot4 = 0; }
					case 5: { TaxiSlot5 = 999; SlotZone5 = "Sin Localizar"; SlotCity5 = "No"; TiempoSlot5 = 0; }
					case 6: { TaxiSlot6 = 999; SlotZone6 = "Sin Localizar"; SlotCity6 = "No"; TiempoSlot6 = 0; }
					case 7: { TaxiSlot7 = 999; SlotZone7 = "Sin Localizar"; SlotCity7 = "No"; TiempoSlot7 = 0; }
					case 8: { TaxiSlot8 = 999; SlotZone8 = "Sin Localizar"; SlotCity8 = "No"; TiempoSlot8 = 0; }
				}
				Message(playerid, -1, "{FFFFFF}* Has cancelado el servicio de {FFEC1C}taxi.");
				format(string, sizeof(string), "Central: %s canceló el servicio de taxi.", PlayerName(playerid));
				SendJobMessage(9, TEAM_BLUE_COLOR, string);
				TaxiCalled[playerid] = 0;
			}
			else
			{
				Message(playerid, COLOR_GRAD2, "¡No has pedido un taxi!");
				return 1;
			}
		}
		else if(strcmp(params[0],"multa",true) == 0)
		{
			if(TicketOffer[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie te multado!");
			format(string, sizeof(string), "* %s se niega a pagar una multa.", PlayerName(playerid));
			ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), "* {FFC990}%s {FFFFFF}canceló el pago de una multa de {3E9EEA}%d$.", PlayerName(playerid), TicketMoney[playerid]);
			Message(playerid, -1, string);
			Message(TicketOffer[playerid], -1, string);
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			Facturing[playerid] = 0;
		}
		else if(strcmp(params[0],"saludo",true) == 0)
		{
			if(Saludo_ID[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie ha ofrecido saludarte!");
			MessageEx(Saludo_ID[playerid], playerid, COLOR_GRAD2, "* El saludo ha sido cancelado.");
			Saludo_ID[playerid] = 999;
		}
		else if(strcmp(params[0],"regalo",true) == 0)
		{
			if(Regalo_ID[playerid] == 999) return Message(playerid, COLOR_GRAD2, "¡Nadie te ha ofrecido un regalo!");
			MessageEx(Regalo_ID[playerid], playerid, COLOR_GRAD2, "* El regalo ha sido rechazado.");
			Regalo_Offer[Regalo_ID[playerid]] = 0;
			Regalo_ID[playerid] = 999;
			Regalo_ITEM[playerid] = 0;
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /cancelar <item>");
		Message(playerid, COLOR_GRAD2, "Items: telefono, multa, taxi, saludo");
	}
	return 1;
}
zcmd(dni, playerid, params[])
{
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /dni <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	if(AntiAbusos[params[0]] == 1) return Message(playerid, COLOR_GRAD2, "No puedes usar esto con un admin duty.");
	if(ProxDetectorS(8.0, playerid, params[0]))
	{
		new string[90];
		ShowDNI(playerid, params[0]);
		format(string, sizeof(string), "* %s le muestra su DNI a %s.", PlayerName(playerid), PlayerName(params[0]));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	return 1;
}
zcmd(dnifalso, playerid, params[])
{
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /dnifalso <PlayerID>");
	if(!IsPlayerConnected(params[0]))  return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	if(PlayerInfo[playerid][pDNIFalse] == 0)    return Message(playerid, COLOR_GRAD2, "No posees un DNI falso.");
	if(ProxDetectorS(8.0, playerid, params[0]))
	{
		new string[90];
		ShowDNIFalse(playerid, params[0]);
		format(string, sizeof(string), "* %s le muestra su DNI a %s.", PlayerName(playerid), PlayerName(params[0]));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	return 1;
}
zcmd(quitardnifalso, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /quitardni <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	if(PlayerInfo[params[0]][pDNIFalse] != 0)
	{
		new string[128];
		PlayerInfo[params[0]][pDNIFalse] = 0;
		strmid(PlayerInfo[params[0]][pDNIName], "Ninguno", 0, strlen("Ninguno"), 12);
		format(string, sizeof(string), "* Le has quitado el DNI Falso a %s.", PlayerName(params[0]));
		Message(playerid, COLOR_GRAD2, string);
	} else Message(playerid, COLOR_GRAD2, "Esa persona no tiene un DNI Falso.");
	return 1;
}
zcmd(encontrar, playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12) return Message(playerid, COLOR_GRAD2, " Usted no trabaja de Detective");
	if(UsedFind[playerid] > 1) return Message(playerid, TEAM_RADIO_COLOR, "** Información: El Satélite está ocupado, pruebe de aquí unos segundos");
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			new string[128];
			new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
			Message(playerid, TEAM_RADIO_COLOR, "<< ... Estableciendo conexión ... >>");
			format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
			Message(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "Persona a buscar: %s", PlayerName(params[0]));
			Message(playerid, COLOR_WHITE,string);
			if(luck > 10 && PlayerInfo[params[0]][pSex] == 1) 		Message(playerid, COLOR_WHITE,"Sexo: Masculino");
			if(luck > 10 && PlayerInfo[params[0]][pSex] == 2) 		Message(playerid, COLOR_WHITE,"Sexo: Femenino");
			if(luck > 17 && PlayerInfo[params[0]][pPnumber] != 0)	format(string, sizeof(string), "Teléfono: %d", PlayerInfo[params[0]][pPnumber]); Message(playerid, COLOR_WHITE,string);
			Message(playerid, TEAM_RADIO_COLOR, "_____________________________________");
			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
			Message(playerid, COLOR_YELLOW,string);
			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
			Message(playerid, COLOR_YELLOW,string);
			SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
		} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /encontrar <PlayerID>");
	return 1;
}
zcmd(localizar, playerid, params[])
{
	if(!Hitman(playerid)) return Message(playerid, COLOR_GRAD2, "¡No perteneces a esta organización!");
	if(UsedFind[playerid] > 1) return Message(playerid, TEAM_RADIO_COLOR, "** Información: El Satélite está ocupado, pruebe de aquí unos segundos");
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			new string[128];
			new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
			Message(playerid, TEAM_RADIO_COLOR, "<< ... Estableciendo conexión ... >>");
			format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
			Message(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "Persona a buscar: %s", PlayerName(params[0]));
			Message(playerid, COLOR_WHITE,string);
			if(luck > 10 && PlayerInfo[params[0]][pSex] == 1) 		Message(playerid, COLOR_WHITE,"Sexo: Masculino");
			if(luck > 10 && PlayerInfo[params[0]][pSex] == 2) 		Message(playerid, COLOR_WHITE,"Sexo: Femenino");
			if(luck > 13 && IsPlayerInAnyVehicle(params[0])) 		Message(playerid, COLOR_WHITE,"Estado: En Automóvil");
			if(luck > 17 && PlayerInfo[params[0]][pPnumber] != 0)	format(string, sizeof(string), "Teléfono: %d", PlayerInfo[params[0]][pPnumber]); Message(playerid, COLOR_WHITE,string);
			Message(playerid, TEAM_RADIO_COLOR, "_____________________________________");
			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
			Message(playerid, COLOR_YELLOW,string);
			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
			Message(playerid, COLOR_YELLOW,string);
			SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
		} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /localizar <PlayerID>");
	return 1;
}
zcmd(encontrarveh, playerid, params[]) {
	if(!Hitman(playerid)) return Message(playerid, COLOR_GRAD2, "No perteneces a esta organización!");
	if(UsedFind[playerid] > 1) return Message(playerid, TEAM_RADIO_COLOR, "** Información: El Satélite está ocupado, pruebe de aquí unos segundos");
	if(!sscanf(params, "i", params[0]))
	{
		new string[128];
		if(params[0] < 0 || params[0] > VEH) return Message(playerid, COLOR_GRAD2, "Error ID.");
		new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
		Message(playerid, TEAM_RADIO_COLOR, "<< ... Estableciendo conexión ... >>");
		format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
		Message(playerid, COLOR_WHITE,string);
		format(string, sizeof(string), "ID Vehículo: %d",params[0]);
		Message(playerid, COLOR_WHITE,string);
		if(luck > 13)
		{
			format(string, sizeof(string), "Modelo Vehículo: %s", GetVehicleFriendlyName(params[0]));
			Message(playerid, COLOR_WHITE,string);
		}
		Message(playerid, TEAM_RADIO_COLOR, "_____________________________________");
		UsedFind[playerid] = reuse_time;
		WhoFind[playerid] = params[0];
		format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
		Message(playerid, COLOR_YELLOW,string);
		format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
		Message(playerid, COLOR_YELLOW,string);
		SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /encontrar <vehículo>");
	return 1;
}
zcmd(papeles, playerid, params[])
{
	if(PlayerInfo[playerid][pPcarkey] == 9999) return Message(playerid, COLOR_GRAD2, "No tienes vehículo.");
	if(!sscanf(params, "u", params[0]))
	{
		if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		if(ProxDetectorS(8.0, playerid, params[0]))
		{
			new string[100];
			V_Documents(playerid, params[0]);
			format(string, sizeof(string), "* %s le muestra a %s los documentos del vehículo.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /papeles <PlayerID>");
	return 1;
}
zcmd(papeles2, playerid, params[])
{
	if(PlayerInfo[playerid][pPcarkey2] == 9999) return Message(playerid, COLOR_GRAD2, "No tienes vehículo.");
	if(!sscanf(params, "u", params[0]))
	{
		if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		if(ProxDetectorS(8.0, playerid, params[0]))
		{
			new string[100];
			V_Documents2(playerid, params[0]);
			format(string, sizeof(string), "* %s le muestra a %s los documentos del vehículo.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /papeles2 <PlayerID>");
	return 1;
}
zcmd(papeles3, playerid, params[])
{
	if(PlayerInfo[playerid][pCarPremium] == 9999) return Message(playerid, COLOR_GRAD2, "No tienes vehículo premium.");
	if(!sscanf(params, "u", params[0]))
	{
		if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		if(ProxDetectorS(8.0, playerid, params[0]))
		{
			new string[100];
			V2_Documents(playerid, params[0]);
			format(string, sizeof(string), "* %s le muestra a %s los documentos del vehículo.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /papeles3 <PlayerID>");
	return 1;
}
zcmd(papeles4, playerid, params[])
{
	if(PlayerInfo[playerid][pCarPremium2] == 9999) return Message(playerid, COLOR_GRAD2, "No tienes vehículo premium.");
	if(!sscanf(params, "u", params[0]))
	{
		if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		if(ProxDetectorS(8.0, playerid, params[0]))
		{
			new string[100];
			V3_Documents(playerid, params[0]);
			format(string, sizeof(string), "* %s le muestra a %s los documentos del vehículo.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /papeles4 <PlayerID>");
	return 1;
}
	// zcmd:admin ============================================================================================================================
zcmd(conse, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2) {
		return SetVehiclePos(GetPlayerVehicleID(playerid), 552.4600,-1275.2721,17.2482);
	}
	else {
		SetPosEx(playerid, 552.4600,-1275.2721,17.2482, 0, 0 ,0);
		return 1;
	}
}
zcmd(healcar, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(PlayerInfo[playerid][pAdminCP] < 5) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "i", params[0]))
	{
		return SetVehicleHealth(GetPlayerVehicleID(playerid), params[0] * 10);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /healcar <HP>");
	return 1;
}
zcmd(aengineon, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
	engineOn[GetPlayerVehicleID(playerid)] = true;
	return SetVehicleParamsEx(GetPlayerVehicleID(playerid),1,lights,alarm,doors,bonnet,boot,objective);
}
zcmd(carstat, playerid, params[])
{
	new string[64], idcar = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	format(string, sizeof(string), "Modelo: %s - Dueño: %s(Owned:%d) - ID: %d", CarInfo[idcar][cName],CarInfo[idcar][cOwner],CarInfo[idcar][cOwned],idcar);
	return Message(playerid, COLOR_GRAD2, string);
}
zcmd(searchcar, playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params,"s[32]",params[0])){
		if(strfind(params[0], "_" , true) != -1) return Message(playerid, COLOR_GRAD2, "Ejemplo de Uso: /searchcar Emely Socola");
		for(new c = 258; c < MAX_VEHICLES; c++)
		{
			if(strcmp(params[0], CarInfo[c][cOwner], true) == 0)
			{
				format(string, sizeof(string), "Vehículo Encontrado | ID: %d | Modelo: %s", c, CarInfo[c][cName]);
				Message(playerid, COLOR_GRAD2, string);
			}
		}
	} else Message(playerid, COLOR_GRAD2, "Utilice: /searchcar <Nombre Jugador>");
	return 1;
}
zcmd(changeit, playerid, params[]){
	new idcar = GetPlayerVehicleID(playerid),Float:x,Float:y,Float:z,Float:a;
	if(PlayerInfo[playerid][pAdminCP] >= 6 || Team_Mecanicos(playerid))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
		if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "¡No es un vehículo de venta!");
		GetVehiclePos(idcar, x, y, z);
		GetVehicleZAngle(idcar, a);
		CarInfo[idcar][cLocationx] = x;
		CarInfo[idcar][cLocationy] = y;
		CarInfo[idcar][cLocationz] = z;
		CarInfo[idcar][cAngle] = a;
		Message(playerid, COLOR_GRAD2, "Nuevas coordenadas guardadas. ¡Ahora el vehículo aparecerá aqui!");
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(pagar, playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0) return Message(playerid, COLOR_GREY, "No puedes usar esto aquí.");
	if(!sscanf(params, "ui", params[0], params[1])){
		if(params[1] > GetPlayerMoney(playerid)) return Message(playerid, COLOR_GRAD2, "No posees esa cantidad.");
		if(params[1] < 1 || params[1] > 1000000) return Message(playerid, COLOR_GRAD2, "Máx: 1000000$");
		if(IsPlayerConnected(params[0])){
			if(ProxDetectorS(5.0, playerid, params[0])){
				new string[128];
				Bought(playerid, params[1]);
				Earn(params[0], params[1]);
				format(string, sizeof(string), "* %s saca su billetera y paga %d$ a %s", PlayerName(playerid), params[1], PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /pagar <PlayerID> <Cantidad>");
	return 1;
}
zcmd(llenar, playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GRAD2, "No eres el conductor de un vehiculo");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (IsABike(vehicleid)) return Message(playerid, COLOR_GRAD2, "¡Este vehiculo no tiene tanque de combustible!");
	if (GetPlayerMoney(playerid) < 1) return Message(playerid, COLOR_GRAD2, "¡No tienes dinero!");
	if (Refueling[playerid] > -1) return Message(playerid, COLOR_GRAD2, "Ya está llenando el vehículo!");
	if (IsAtGasStation(playerid)) {
		if(Gas[vehicleid] < 230) return ShowPlayerDialog(playerid,GASOLINA_DIALOG,DIALOG_STYLE_LIST,"Gasolinera - Tipo de gasolina","Sin Plomo 95\nSin Plomo 98\nGasoil\nBiodiesel","Comprar","Atrás");
		else GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Vehiculo LLenado",2000,3);
	} else Message(playerid,COLOR_GREY,"¡No estás en una estación de gasolina!");
	return 1;
}
zcmd(cargarcoche, playerid, params[])
{
	if (IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "Baja del vehiculo para realizar esta acción.");
	if (GetPVarInt(playerid, "bidon") == 0) return Message(playerid, COLOR_GRAD2, "No tienes un bidon de gasolina, adquierelo en una gasolinera.");
	new vehicleid = CarInFrontOfPlayer(playerid);
	if (vehicleid == 0) return Message(playerid, COLOR_GRAD2, "Acercate a un coche para llenar su tanque.");
	if (IsABike(vehicleid)) return Message(playerid, COLOR_GRAD2, "¡Este vehiculo no tiene tanque de combustible!");
	if (Gas{vehicleid} > 95) return Message(playerid, COLOR_GRAD2, "El vehiculo tiene gasolina suficiente, no puedes cargarlo con este bidón.");

	Gas[vehicleid] += 18;
	GameTextForPlayer(playerid, "~y~Cargaste el coche con el bidon", 2000, 5);
	SetPVarInt(playerid, "bidon", 0);
	RemovePlayerAttachedObject(playerid, 9);
	Message(playerid, YELLOW, "Tanque del coche llenado correctamente con 15 litros.");
	return 1;
}
zcmd(comprarbidon, playerid, params[])
{
	if (IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "Baja del vehiculo para realizar esta acción.");
	if (!IsAtGasStation(playerid)) return Message(playerid,COLOR_GREY,"¡No estás en una estación de gasolina!");
	if (!CheckMoney(playerid, 18)) return Message(playerid, COLOR_GRAD2, "Necesitas al menos $18 para comprar el bidón.");
	if (GetPVarInt(playerid, "bidon") == 1) return Message(playerid, COLOR_GRAD2, "Ya tienes un bidón.");
	SetPVarInt(playerid, "bidon", 1);
	Message(playerid, YELLOW , "Compraste un bidon de gasolina de 15 litros por 18$");
	Message(playerid, YELLOW , "Usa /cargarcoche frente a un coche para usarlo.");
	SetPlayerAttachedObject(playerid, 9, 1650, 5, 0.125999, 0.011999, 0.000000, -4.999999, -98.099983, 16.600004, 1.000000, 1.000000, 1.000000);
	Bought(playerid, 18);
	return 1;
}
zcmd(tirarbidon, playerid, params[])
{
	RemovePlayerAttachedObject(playerid, 9); //que te lo quite siempre, para quitarlo si se buggea el item.
	if (GetPVarInt(playerid, "bidon") == 0) return Message(playerid, COLOR_GRAD2, "No tienes un bidón.");
	SetPVarInt(playerid, "bidon", 0);
	Message(playerid, YELLOW, "Desechaste tu bidón de gasolina.");
	return 1;
}
zcmd(pcu, playerid, params[]){
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehiculo!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (IsABike(vehicleid)) return Message(playerid, COLOR_GRAD2, "¡Este vehiculo no tiene PCU!");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		vehicle_pcu(playerid, vehicleid);
	} else Message(playerid, COLOR_GREY, "No eres el conductor.");
	return 1;
}
zcmd(gps, playerid, params[])
{
	new idcar = GetPlayerVehicleID(playerid)
	if (!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehiculo!");
	if (PlayerIsRuta[playerid] != 0) return Message(playerid, COLOR_GRAD2, "¡No puedes usar el GPS trabajando!");
	if (IsAnOwnableCar(idcar) && CarInfo[idcar][cGPS] == 0) return Message(playerid, COLOR_GRAD2, "¡Este vehículo no tiene un GPS!");

	ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
	return 1;
}
zcmd(v, playerid, params[])
{
	if(!sscanf(params, "s[32]", params[0]))
	{
		new string[128], idcar = GetPlayerVehicleID(playerid), keycar = PlayerInfo[playerid][pPcarkey], keycar2 = PlayerInfo[playerid][pPcarkey2];
		new engine,lights,alarm,doors,bonnet,boot,objective, Float:x, Float:y, Float:z, Float:a;
		GetVehicleParamsEx(idcar, engine,lights,alarm,doors,bonnet,boot,objective);
		if(strcmp(params[0],"motor",true) == 0)
		{
			return Message(playerid, COLOR_WHITE, "Comando sustituido, usa la tecla {FF0000}N {FFFFFF}para encender el motor.");
		}
		else if(strcmp(params[0],"luces",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(LightsOn[idcar] == 0)
			{
				SetVehicleParamsEx(idcar,engine,1,alarm,doors,bonnet,boot,objective);
				LightsOn[idcar] = 1;
			}
			else if(LightsOn[idcar] == 1)
			{
				SetVehicleParamsEx(idcar,engine,0,alarm,doors,bonnet,boot,objective);
				LightsOn[idcar] = 0;
			}
			return 1;
		}
		else if(strcmp(params[0],"capo",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(IsABike(idcar) || isTrenVehicle(idcar) || isPizzerosVehicle(idcar) || isBarrenderoVehicle(idcar) || isPilotosVehicle(idcar)) { return 1; }
			if(BonnetOpen[idcar] == 0)
			{
				SetVehicleParamsEx(idcar,engine,lights,alarm,doors,1,boot,objective);
				BonnetOpen[idcar] = 1;
			}
			else if(BonnetOpen[idcar] == 1)
			{
				SetVehicleParamsEx(idcar,engine,lights,alarm,doors,0,boot,objective);
				BonnetOpen[idcar] = 0;
			}
			return 1;
		}
		else if(strcmp(params[0],"maletero",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(IsABike(idcar) || isTrenVehicle(idcar) || isPizzerosVehicle(idcar) || isBarrenderoVehicle(idcar) || isPilotosVehicle(idcar)) { return 1; }
			if(BootOpen[idcar] == 0)
			{
				SetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,1,objective);
				BootOpen[idcar] = 1;
			}
			else if(BootOpen[idcar] == 1)
			{
				SetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,0,objective);
				BootOpen[idcar] = 0;
			}
			return 1;
		}
		else if(strcmp(params[0],"estacionar",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(IsAnOwnableCar(idcar))
			{
				if(PlayerInfo[playerid][pPcarkey] == 9999) return Message(playerid, COLOR_GRAD2, "Usted no tiene un coche.");
				if(idcar == PlayerInfo[playerid][pPcarkey])
				{
					GetVehiclePos(idcar, x, y, z);
					GetVehicleZAngle(idcar, a);
					CarInfo[idcar][cLocationx] = x;
					CarInfo[idcar][cLocationy] = y;
					CarInfo[idcar][cLocationz] = z;
					CarInfo[idcar][cAngle] = a;
					Message(playerid, COLOR_GRAD2, "Nuevas coordenadas guardadas. ¡Ahora el vehículo aparecerá aqui!");
				}
				else return Message(playerid, COLOR_GREY, "¡No estás en tu vehículo!");
			}
		}
		else if(strcmp(params[0],"estacionar2",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(IsAnOwnableCar(idcar))
			{
				if(PlayerInfo[playerid][pPcarkey2] == 9999) return Message(playerid, COLOR_GRAD2, "Usted no tiene un coche.");
				if(idcar == PlayerInfo[playerid][pPcarkey2])
				{
					GetVehiclePos(idcar, x, y, z);
					GetVehicleZAngle(idcar, a);
					CarInfo[idcar][cLocationx] = x;
					CarInfo[idcar][cLocationy] = y;
					CarInfo[idcar][cLocationz] = z;
					CarInfo[idcar][cAngle] = a;
					Message(playerid, COLOR_GRAD2, "Nuevas coordenadas guardadas. ¡Ahora el vehículo aparecerá aqui!");
				}
				else return Message(playerid, COLOR_GREY, "¡No estás en tu vehículo!");
			}
		}
		else if(strcmp(params[0],"estacionar3",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(IsAnOwnableCar(idcar))
			{
				if(PlayerInfo[playerid][pCarPremium] == 9999) return Message(playerid, COLOR_GREY, "Usted no tiene un coche premium.");
				if(idcar == PlayerInfo[playerid][pCarPremium])
				{
					GetVehiclePos(idcar, x, y, z);
					GetVehicleZAngle(idcar, a);
					CarInfo[idcar][cLocationx] = x;
					CarInfo[idcar][cLocationy] = y;
					CarInfo[idcar][cLocationz] = z;
					CarInfo[idcar][cAngle] = a;
					Message(playerid, COLOR_GRAD2, "Nuevas coordenadas guardadas. ¡Ahora su vehículo premium aparecerá aqui!");
				}
				else return Message(playerid, COLOR_GREY, "No estás en tu vehículo!");
			}
		}
		else if(strcmp(params[0],"estacionar4",true) == 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
			if(IsAnOwnableCar(idcar))
			{
				if(PlayerInfo[playerid][pCarPremium2] == 9999) return Message(playerid, COLOR_GREY, "Usted no tiene un coche premium.");
				if(idcar == PlayerInfo[playerid][pCarPremium2])
				{
					GetVehiclePos(idcar, x, y, z);
					GetVehicleZAngle(idcar, a);
					CarInfo[idcar][cLocationx] = x;
					CarInfo[idcar][cLocationy] = y;
					CarInfo[idcar][cLocationz] = z;
					CarInfo[idcar][cAngle] = a;
					Message(playerid, COLOR_GRAD2, "Nuevas coordenadas guardadas. ¡Ahora su vehículo premium aparecerá aqui!");
				}
				else return Message(playerid, COLOR_GREY, "No estás en tu vehículo!");
			}
		}
		else if(strcmp(params[0],"seguro",true) == 0)
		{
			if(PlayerInfo[playerid][pPcarkey] != 9999)
			{
				GetVehiclePos(keycar, x, y, z);
				if(PlayerToPoint(20.0,playerid, x, y, z))
				{
					if(CarInfo[keycar][cLock] == 1)
					{
						SetVehicleParamsEx(keycar,engine,lights,alarm,0,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~g~abierto", 3000, 3);
						CarInfo[keycar][cLock] = 0;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Abierto) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s abre su %s.", PlayerName(playerid), CarInfo[keycar][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
						SetVehicleParamsEx(keycar,engine,lights,alarm,1,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~r~cerrado", 3000, 3);
						CarInfo[keycar][cLock] = 1;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Cerrado) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s cierra con seguro su %s.", PlayerName(playerid), CarInfo[keycar][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
				} else return Message(playerid, COLOR_GREY, "¡No hay señal!");
			}
			else return Message(playerid, COLOR_GREY, "Usted no tiene un vehículo.");
		}
		else if(strcmp(params[0],"seguro2",true) == 0)
		{
			if(PlayerInfo[playerid][pPcarkey2] != 9999)
			{
				GetVehiclePos(keycar2, x, y, z);
				if(PlayerToPoint(20.0,playerid, x, y, z))
				{
					if(CarInfo[keycar2][cLock] == 1)
					{
						SetVehicleParamsEx(keycar2,engine,lights,alarm,0,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~g~abierto", 3000, 3);
						CarInfo[keycar2][cLock] = 0;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Abierto) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s abre su %s.", PlayerName(playerid), CarInfo[keycar2][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
					else if(CarInfo[keycar2][cLock] == 0)
					{
						SetVehicleParamsEx(keycar2,engine,lights,alarm,1,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~r~cerrado", 3000, 3);
						CarInfo[keycar2][cLock] = 1;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Cerrado) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s cierra con seguro su %s.", PlayerName(playerid), CarInfo[keycar2][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
				} else return Message(playerid, COLOR_GREY, "¡No hay señal!");
			}
			else return Message(playerid, COLOR_GREY, "Usted no tiene un vehículo.");
		}
		else if(strcmp(params[0],"seguro3",true) == 0)
		{
			new keycar3 = PlayerInfo[playerid][pCarPremium];
			if(PlayerInfo[playerid][pCarPremium] != 9999)
			{
				GetVehiclePos(keycar3, x, y, z);
				if(PlayerToPoint(20.0,playerid, x, y, z))
				{
					if(CarInfo[keycar3][cLock] == 1)
					{
						SetVehicleParamsEx(keycar3,engine,lights,alarm,0,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~g~abierto", 3000, 3);
						CarInfo[keycar3][cLock] = 0;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Abierto) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s abre su %s.", PlayerName(playerid), CarInfo[keycar3][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
					else if(CarInfo[keycar3][cLock] == 0)
					{
						SetVehicleParamsEx(keycar3,engine,lights,alarm,1,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~r~cerrado", 3000, 3);
						CarInfo[keycar3][cLock] = 1;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Cerrado) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s cierra con seguro su %s.", PlayerName(playerid), CarInfo[keycar3][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
				} else return Message(playerid, COLOR_GREY, "¡No hay señal!");
			}
			else return Message(playerid, COLOR_GREY, "Usted no tiene un vehículo.");
		}
		else if(strcmp(params[0],"seguro4",true) == 0)
		{
			new keycar4 = PlayerInfo[playerid][pCarPremium2];
			if(PlayerInfo[playerid][pCarPremium2] != 9999)
			{
				GetVehiclePos(keycar4, x, y, z);
				if(PlayerToPoint(20.0,playerid, x, y, z))
				{
					if(CarInfo[keycar4][cLock] == 1)
					{
						SetVehicleParamsEx(keycar4,engine,lights,alarm,0,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~g~abierto", 3000, 3);
						CarInfo[keycar4][cLock] = 0;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Abierto) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s abre su %s.", PlayerName(playerid), CarInfo[keycar4][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
					else if(CarInfo[keycar4][cLock] == 0)
					{
						SetVehicleParamsEx(keycar4,engine,lights,alarm,1,bonnet,boot,objective);
						GameTextForPlayer(playerid, "~w~vehiculo ~r~cerrado", 3000, 3);
						CarInfo[keycar4][cLock] = 1;
						ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Cerrado) *", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
						format(string, sizeof(string), "* %s cierra con seguro su %s.", PlayerName(playerid), CarInfo[keycar4][cName]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
				} else return Message(playerid, COLOR_GREY, "¡No hay señal!");
			}
			else return Message(playerid, COLOR_GREY, "Usted no tiene un vehículo.");
		}
		else if(strcmp(params[0],"tiempo",true) == 0)
		{
			new
			TiempoVeh = CarInfo[idcar][cVehTime] - gettime(),
			dias = TiempoVeh/60/60/24,
			horas = TiempoVeh/60/60 - dias*24,
			minutos = TiempoVeh/60 - dias*24*60 - horas*60;
			if(PlayerInfo[playerid][pPcarkey] == 9999 && PlayerInfo[playerid][pPcarkey2] == 9999) return Message(playerid, COLOR_GRAD2,"¡No tienes vehículo!");
			if(idcar != PlayerInfo[playerid][pPcarkey] && idcar != PlayerInfo[playerid][pPcarkey2]) return Message(playerid, COLOR_GRAD2,"¡No estás en tu vehículo!");
			format(string, sizeof(string), "{FF8000}%d {FFFFFF}Dias, {FF8000}%d {FFFFFF}Horas, {FF8000}%d {FFFFFF}Minutos de vigencia vehicular.", dias, horas, minutos);
			return Message(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(params[0],"vender",true) == 0)
		{
			if(IsAtDealership(playerid))
			{
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey])
				{
					if(PlayerInfo[playerid][pPcarkey] == 9999) return Message(playerid, COLOR_GRAD2,"¡No tienes vehículo!");
					new ownvehkey;
					if(idcar == PlayerInfo[playerid][pPcarkey]) ownvehkey = PlayerInfo[playerid][pPcarkey];
					else return Message(playerid, COLOR_GRAD2,"¡No estás en tu vehículo!");
					if(strcmp(PlayerName(playerid), CarInfo[ownvehkey][cOwner], true) == 0)
					{
						new carsellprice = CarInfo[ownvehkey][cValue] / 4 * 3;
						CarInfo[ownvehkey][cOwned] = 0;
						strmid(CarInfo[ownvehkey][cOwner], "Concesionario", 0, strlen("Concesionario"), 999);
						strmid(CarInfo[ownvehkey][cName], GetVehicleFriendlyName(ownvehkey), 0, strlen(GetVehicleFriendlyName(ownvehkey)), 999);
						strmid(CarInfo[ownvehkey][cPlate], "For Sale", 0, strlen("For Sale"), 9999);
						SetVehicleNumberPlate(ownvehkey,CarInfo[ownvehkey][cPlate]);
						Earn(playerid, carsellprice);
						if(PlayerToPoint(30.0,playerid,544.5143,-1280.5714,17.2482))    Till(6, carsellprice/3);
						if(PlayerToPoint(30.0,playerid,1045.3408,-905.2751,42.6273))    Till(7, carsellprice/3);
						if(PlayerToPoint(50.0,playerid,2152.0850,-1150.7964,24.1398))   Till(8, carsellprice/3);
						if(PlayerToPoint(20.0,playerid,633.4413,-1950.7174,1.6708))     Till(15, carsellprice/3);
						format(string, sizeof(string), "* Has vendido tu vehículo por %d$", carsellprice);
						Message(playerid, COLOR_GREEN, string);
						GetVehiclePos(ownvehkey, x, y, z);
						GetVehicleZAngle(ownvehkey, a);
						CarInfo[ownvehkey][cLocationx] = x;
						CarInfo[ownvehkey][cLocationy] = y;
						CarInfo[ownvehkey][cLocationz] = z;
						CarInfo[ownvehkey][cAngle] = a;
						CarInfo[ownvehkey][cBattery] = 0;
						CarInfo[ownvehkey][cGas] = 0;
						CarInfo[ownvehkey][cAlarm] = 0;
						CarInfo[ownvehkey][cVehTime] = 1999999999;
						CarInfo[ownvehkey][cLock] = 0;
						CarInfo[ownvehkey][cSpoiler] = 0;
						CarInfo[ownvehkey][cHood] = 0;
						CarInfo[ownvehkey][cRoof] = 0;
						CarInfo[ownvehkey][cSideskirt] = 0;
						CarInfo[ownvehkey][cNitro] = 0;
						CarInfo[ownvehkey][cLamps] = 0;
						CarInfo[ownvehkey][cExhaust] = 0;
						CarInfo[ownvehkey][cWheel] = 0;
						CarInfo[ownvehkey][cHydraulics] = 0;
						CarInfo[ownvehkey][cPaintjob] = 0;
						CarInfo[ownvehkey][cFrontBumper] = 0;
						CarInfo[ownvehkey][cVents] = 0;
						CarInfo[ownvehkey][cEmbargo] = 0;
						CarInfo[ownvehkey][cMulta] = 0;
						CarInfo[ownvehkey][cGPS] = 0;
						PlayerInfo[playerid][pPcarkey] = 9999;
						PlayerInfo[playerid][pTimeCar] = 0;
						RemovePlayerFromVehicle(playerid);
						RespawnVehicle(idcar);
						TogglePlayerControllable(playerid, 1);
						UpdateCars();
						return 1;
					} else return Message(playerid, COLOR_GRAD2,"Este vehículo no está a tu nombre!");
				} else return Message(playerid, COLOR_GREY, "  Usted tiene que sentarse en su propio coche para venderlo! ");
			} else return Message(playerid, COLOR_GREY, "¡No estás en un concesionario!");
		}
		else if(strcmp(params[0],"vender2",true) == 0)
		{
			if(IsAtDealership(playerid))
			{
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2])
				{
					if(PlayerInfo[playerid][pPcarkey2] == 9999) return Message(playerid, COLOR_GRAD2,"¡No tienes vehículo!");
					new ownvehkey2;
					if(idcar == PlayerInfo[playerid][pPcarkey2]) ownvehkey2 = PlayerInfo[playerid][pPcarkey2];
					else return Message(playerid, COLOR_GRAD2,"¡No estás en tu vehículo!");
					if(strcmp(PlayerName(playerid), CarInfo[ownvehkey2][cOwner], true) == 0)
					{
						new carsellprice = CarInfo[ownvehkey2][cValue] / 4 * 3;
						CarInfo[ownvehkey2][cOwned] = 0;
						strmid(CarInfo[ownvehkey2][cOwner], "Concesionario", 0, strlen("Concesionario"), 999);
						strmid(CarInfo[ownvehkey2][cName], GetVehicleFriendlyName(ownvehkey2), 0, strlen(GetVehicleFriendlyName(ownvehkey2)), 999);
						strmid(CarInfo[ownvehkey2][cPlate], "For Sale", 0, strlen("For Sale"), 9999);
						SetVehicleNumberPlate(ownvehkey2,CarInfo[ownvehkey2][cPlate]);
						Earn(playerid, carsellprice);
						if(PlayerToPoint(30.0,playerid,544.5143,-1280.5714,17.2482))    Till(6, carsellprice/3);
						if(PlayerToPoint(30.0,playerid,1045.3408,-905.2751,42.6273))    Till(7, carsellprice/3);
						if(PlayerToPoint(50.0,playerid,2152.0850,-1150.7964,24.1398))   Till(8, carsellprice/3);
						if(PlayerToPoint(20.0,playerid,633.4413,-1950.7174,1.6708))     Till(15, carsellprice/3);
						format(string, sizeof(string), "* Has vendido tu vehículo por %d$", carsellprice);
						Message(playerid, COLOR_GREEN, string);
						GetVehiclePos(ownvehkey2, x, y, z);
						GetVehicleZAngle(ownvehkey2, a);
						CarInfo[ownvehkey2][cLocationx] = x;
						CarInfo[ownvehkey2][cLocationy] = y;
						CarInfo[ownvehkey2][cLocationz] = z;
						CarInfo[ownvehkey2][cAngle] = a;
						CarInfo[ownvehkey2][cBattery] = 0;
						CarInfo[ownvehkey2][cGas] = 0;
						CarInfo[ownvehkey2][cAlarm] = 0;
						CarInfo[ownvehkey2][cVehTime] = 1999999999;
						CarInfo[ownvehkey2][cLock] = 0;
						CarInfo[ownvehkey2][cSpoiler] = 0;
						CarInfo[ownvehkey2][cHood] = 0;
						CarInfo[ownvehkey2][cRoof] = 0;
						CarInfo[ownvehkey2][cSideskirt] = 0;
						CarInfo[ownvehkey2][cNitro] = 0;
						CarInfo[ownvehkey2][cLamps] = 0;
						CarInfo[ownvehkey2][cExhaust] = 0;
						CarInfo[ownvehkey2][cWheel] = 0;
						CarInfo[ownvehkey2][cHydraulics] = 0;
						CarInfo[ownvehkey2][cPaintjob] = 0;
						CarInfo[ownvehkey2][cFrontBumper] = 0;
						CarInfo[ownvehkey2][cVents] = 0;
						CarInfo[ownvehkey2][cEmbargo] = 0;
						CarInfo[ownvehkey2][cMulta] = 0;
						CarInfo[ownvehkey2][cGPS] = 0;
						PlayerInfo[playerid][pPcarkey2] = 9999;
						PlayerInfo[playerid][pTimeCar2] = 0;
						RemovePlayerFromVehicle(playerid);
						RespawnVehicle(idcar);
						TogglePlayerControllable(playerid, 1);
						UpdateCars();
						return 1;
					} else return Message(playerid, COLOR_GRAD2,"Este vehículo no está a tu nombre!");
				} else return Message(playerid, COLOR_GREY, "  Usted tiene que sentarse en su propio coche para venderlo! ");
			} else return Message(playerid, COLOR_GREY, "¡No estás en un concesionario!");
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /v <Item>");
		Message(playerid, COLOR_GRAD2, "Item: motor(2), luces(2), capo(2), maletero(2), seguro(2), vender(2), estacionar(2), tiempo, seguroveh");
	}
	return 1;
}
zcmd(venderveh, playerid, params[])
{
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey])
	{
		new ownvehkey, idcar = GetPlayerVehicleID(playerid);
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { ownvehkey = PlayerInfo[playerid][pPcarkey]; }
		if(strcmp(PlayerName(playerid), CarInfo[ownvehkey][cOwner], true) == 0)
		{
			if(!sscanf(params, "ud", params[0],params[1]))
			{
				if(IsPlayerConnected(params[0]))
				{
					if(PlayerInfo[params[0]][pLevel] > 1)
					{
						if(ProxDetectorS(8.0, playerid, params[0]))
						{
							if(GetPlayerMoney(params[0]) >= params[1])
							{
								if(PlayerInfo[params[0]][pPcarkey] == 9999)
								{
									OwnableCarOffer[params[0]] = playerid;
									OwnableCarID[params[0]] = idcar;
									OwnableCarPrice[params[0]] = params[1];
									Petition_ID[params[0]] = 3;
									Facturing[params[0]] = 1;
									new string[128];
									format(string, sizeof(string), "Ofreciste a %s tu vehículo por %d$", PlayerName(params[0]), OwnableCarPrice[params[0]]);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), CarInfo[PlayerInfo[playerid][pPcarkey]][cName], OwnableCarPrice[params[0]]);
									SendRequest(params[0],  string);
								} else Message(playerid, COLOR_GRAD2, "El jugador ya tiene 1 vehículo.");
							} else Message(playerid, COLOR_GRAD2, "El jugador no tiene fondos suficientes.");
						} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
					} else Message(playerid, COLOR_GRAD2, "El jugador necesita ser nivel 2 mínimo.");
				} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
			} else Message(playerid, COLOR_GRAD2, "Utilice: /venderveh <PlayerID> <Cantidad>");
		} else Message(playerid, COLOR_GRAD2, "No estás en tu auto.");
	} else Message(playerid, COLOR_GRAD2, "No estás en tu auto.");
	return 1;
}
zcmd(venderveh2, playerid, params[])
{
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2])
	{
		new ownvehkey2, idcar = GetPlayerVehicleID(playerid);
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { ownvehkey2 = PlayerInfo[playerid][pPcarkey2]; }
		if(strcmp(PlayerName(playerid), CarInfo[ownvehkey2][cOwner], true) == 0)
		{
			if(!sscanf(params, "ud", params[0],params[1]))
			{
				if(IsPlayerConnected(params[0]))
				{
					if(PlayerInfo[params[0]][pLevel] > 4)
					{
						if(ProxDetectorS(8.0, playerid, params[0]))
						{
							if(GetPlayerMoney(params[0]) >= params[1])
							{
								if(PlayerInfo[params[0]][pPcarkey2] == 9999)
								{
									OwnableCarOffer[params[0]] = playerid;
									OwnableCarID[params[0]] = idcar;
									OwnableCarPrice[params[0]] = params[1];
									Petition_ID[params[0]] = 4;
									Facturing[params[0]] = 1;
									new string[128];
									format(string, sizeof(string), "Ofreciste a %s tu vehículo por %d$", PlayerName(params[0]), OwnableCarPrice[params[0]]);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), GetVehicleFriendlyName(CarInfo[PlayerInfo[playerid][pPcarkey]][cName]), OwnableCarPrice[params[0]]);
									SendRequest(params[0],  string);
								} else Message(playerid, COLOR_GRAD2, "El jugador ya tiene 1 vehículo en su 2do slot.");
							} else Message(playerid, COLOR_GRAD2, "El jugador no tiene fondos suficientes.");
						} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
					} else Message(playerid, COLOR_GRAD2, "El jugador necesita ser nivel 5 mínimo.");
				} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
			} else Message(playerid, COLOR_GRAD2, "Utilice: /venderveh2 <PlayerID> <Cantidad>");
		} else Message(playerid, COLOR_GRAD2, "No estás en tu auto.");
	} else Message(playerid, COLOR_GRAD2, "No estás en tu auto.");
	return 1;
}
zcmd(desrentarveh, playerid, params[])
{
	if(HireKey[playerid] == 9999) return Message(playerid, COLOR_GRAD2, "No has rentado ningún vehículo!");
	SetVehicleToRespawn(HireKey[playerid]);
	Earn(playerid, 100);
	SetVehicleParamsEx(HireKey[playerid],0,0,0,0,0,0,0);
	engineOn[HireKey[playerid]] = false;
	HireKey[playerid] = 9999;
	return 1;
}
zcmd(desveh, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	SetVehicleToRespawn(HireKey[playerid]);
	SetVehicleParamsEx(HireKey[playerid],0,0,0,0,0,0,0);
	engineOn[HireKey[playerid]] = false;
	HireKey[playerid] = 9999;
	return 1;
}
zcmd(subirnivel, playerid, params[]){
	if(PlayerInfo[playerid][pLevel] >= 0){
		new nxtlevel = PlayerInfo[playerid][pLevel]+1, expamount = nxtlevel*levelexp, infostring[128];
		if(PlayerInfo[playerid][pExp] < expamount){
			format(infostring, 128, "Necesitas %d/%d puntos de respeto para subir de nivel.",expamount,PlayerInfo[playerid][pExp]);
			Message(playerid, COLOR_GRAD1, infostring);
		}
		else{
			format(infostring, sizeof(infostring), "~w~Felicidades!! ~n~~n~Ahora eres nivel ~g~%d", nxtlevel);
			GameTextForPlayer(playerid, infostring, 5000, 3);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pLevel]++;
			PlayerInfo[playerid][pExp] = 0;
		}
	}
	return 1;
}
zcmd(revisar, playerid, params[]){
	if(!sscanf(params, "u", params[0])){
		if(IsPlayerConnected(params[0]) && ProxDetectorS(8.0,playerid,params[0])){
			new wh_q,sweapon,sammo,drugs,string[128];
			for (new i=0; i<9; i++){
				GetPlayerWeaponData(params[0], i, sweapon, sammo);
				if(sweapon != 0 && sammo != 0)  wh_q ++;
			}
			if(wh_q > 0) Message(playerid, COLOR_GRAD2, "El sujeto va armado.");
			else 		Message(playerid, COLOR_GRAD2, "El sujeto no porta armas.");

			if(PlayerInfo[params[0]][pSpeed] > 0)    drugs++;
			if(PlayerInfo[params[0]][pEctasy] > 0)   drugs++;
			if(PlayerInfo[params[0]][pRitalin] > 0)  drugs++;
			if(PlayerInfo[params[0]][pHeroina] > 0)  drugs++;
			if(PlayerInfo[params[0]][pMarihuana] > 0)  drugs++;

			if(drugs > 0) Message(playerid, COLOR_GRAD2, "El sujeto contiene drogas.");
			else 		Message(playerid, COLOR_GRAD2, "El sujeto no porta drogas.");

			if(PlayerInfo[params[0]][pMats] > 0) Message(playerid, COLOR_GRAD2, "El sujeto porta material armamentístico.");
			else 		Message(playerid, COLOR_GRAD2, "El sujeto no porta material armamentístico.");

			format(string, sizeof(string), "* %s revisa a %s en busca de objetos.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado o muy lejos.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /revisar <PlayerID>");
	return 1;
}
zcmd(cinturon, playerid, params[]){
	if(IsPlayerInAnyVehicle(playerid)){
		if(!BikeModel(playerid)){
			new string[90];
			if(UsingBelt[playerid] == 0){
				format(string, sizeof(string), "* %s se abrocha el cinturón.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				UsingBelt[playerid] = 1;
			}
			else{
				format(string, sizeof(string), "* %s se desabrocha el cinturón.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				UsingBelt[playerid] = 0;
			}
		}
	} else Message(playerid, COLOR_GRAD2, "No estás en un vehículo.");
	return 1;
}
zcmd(vercinturon, playerid, params[]){
	if(!Team_LSPD(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No eres policía!");
	if(!sscanf(params, "u", params[0])){
		if(!IsPlayerConnected(params[0])) 				return Message(playerid, COLOR_GREY, "Jugador desconectado.");
		if(!IsPlayerInAnyVehicle(params[0]))            return Message(playerid, COLOR_GREY, "El jugador no está en un vehículo.");
		if(!ProxDetectorS(5.0, playerid, params[0]))    return Message(playerid, COLOR_GREY, "Jugador muy lejos.");
		new string[90];
		if(UsingBelt[params[0]] == 1){
			format(string, sizeof(string), "* %s tiene el cinturón abrochado.",PlayerName(params[0]));
			Message(playerid, COLOR_GREEN, string);
		}
		else{
			format(string, sizeof(string), "* %s no tiene el cinturón abrochado.",PlayerName(params[0]));
			Message(playerid, COLOR_RED, string);
		}
		format(string, sizeof(string), "* %s revisa el cinturón de %s", PlayerName(playerid), PlayerName(params[0]));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /vercinturon <PlayerID>");
	return 1;
}
zcmd(revisarcarga, playerid, params[])
{
	if(!IsACop(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No perteneces a un cuerpo de justicia!");
	if(!sscanf(params, "u", params[0])){
		if(!IsPlayerConnected(params[0])) 				return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		if(!ProxDetectorS(5.0, playerid, params[0]))    return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		new string[100], Carga[25]
		switch(Mercancia[params[0]])
		{
			case 0: Carga = "Nada";
			case 1: Carga = "Prendas de Vestir";
			case 2: Carga = "Comida y Accesorios";
			case 3: Carga = "Medicamentos";
			case 4: Carga = "Materiales Legales";
			case 5: Carga = "Materiales Ilegales";
			case 6: Carga = "Detergentes"
		}
		if(PlayerIsRuta[params[0]] == 3) format(string, sizeof(string), "* El camión de %s esta vacio.",PlayerName(params[0]));
		else format(string, sizeof(string), "* El camión de %s va cargado con %s.",PlayerName(params[0]), Carga);
		Message(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "* %s revisa el camión de %s", PlayerName(playerid), PlayerName(params[0]));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /revisarcarga <PlayerID>");
	return 1;
}
zcmd(quitarcarga, playerid, params[])
{
	if(!Team_LSPD(playerid) && !Team_NG(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No perteneces a un cuerpo de justicia!");
	if(!sscanf(params, "u", params[0])){
		if(!IsPlayerConnected(params[0])) 				return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		if(!ProxDetectorS(5.0, playerid, params[0]))    return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		if(Mercancia[params[0]] == 0 || PlayerIsRuta[params[0]] == 3)   return Message(playerid, COLOR_GRAD2, "El jugador no tiene ninguna carga.");
		new string[100];
		format(string, sizeof(string), "* %s incauta la mercancia del camión de %s", PlayerName(playerid), PlayerName(params[0]));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Message(playerid, COLOR_GRAD2, "* Tu faccion ha ganado {FF4564}2000$ {FFFFFF}gracias a la carga incautada.");
		Message(params[0], COLOR_GRAD2, "* Han incautado la mercancia que debias entregar.");
		if(Team_LSPD(playerid)) Fondos[LSPD] += 2000;
		if(Team_NG(playerid))   Fondos[SAEM] += 2000;
		SetVehicleToRespawn(Camion[params[0]]);
		Camion[params[0]] = 9999;
		Mercancia[params[0]] = 0;
		PlayerIsRuta[params[0]] = 0;
		PlayerCargando[params[0]] = 0;
		PlayerDescargando[params[0]] = 0;
		DisablePlayerCheckpoint(params[0]);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /quitarcarga <PlayerID>");
	return 1;
}
zcmd(remolcar, playerid, params[])
{
	if(!Team_LSPD(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres policia!");
	Remolcar(playerid);
	return 1;
}
zcmd(hits, playerid, params[])
{
	if(Hitman(playerid)) SearchHit(playerid);
	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(quitar, playerid, params[])
{
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "¡No puedes hacer esto!");
	new item[32], string[128];
	if(!sscanf(params, "s[32]u", item, params[1]))
	{
		if(!IsPlayerConnected(params[1]))               return Message(playerid, COLOR_GRAD2, "¡Jugador no conectado!");
		if(!ProxDetectorS(5.0, playerid, params[1])) return Message(playerid, COLOR_GRAD2, "¡Jugador muy lejos!");
		if(strcmp(item,"lconduccion",true) == 0)
		{
			PlayerInfo[params[1]][pCarLic] = 0;
			format(string, sizeof(string), "* Oficial %s quita la licencia de conducción a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"lvuelo",true) == 0)
		{
			PlayerInfo[params[1]][pFlyLic] = 0;
			format(string, sizeof(string), "* Oficial %s quita la licencia de vuelo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"larma",true) == 0)
		{
			PlayerInfo[params[1]][pGunLic] = 0;
			format(string, sizeof(string), "* Oficial %s quita la licencia de armas a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"drogas",true) == 0)
		{
			PlayerInfo[params[1]][pHeroina] = 0;
			PlayerInfo[params[1]][pMarihuana] = 0;
			PlayerInfo[params[1]][pRitalin] = 0;
			PlayerInfo[params[1]][pEctasy] = 0;
			PlayerInfo[params[1]][pSpeed] = 0;
			format(string, sizeof(string), "* Oficial %s quita las drogas a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"materiales",true) == 0)
		{
			PlayerInfo[params[1]][pMats] = 0;
			format(string, sizeof(string), "* Oficial %s quita los materiales a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"telefono",true) == 0)
		{
			PlayerInfo[params[1]][pPnumber] = 0;
			format(string, sizeof(string), "* Oficial %s quita el teléfono %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"armas",true) == 0)
		{
			ResetPlayerWeapons(params[1]);
			format(string, sizeof(string), "* Oficial %s le quita las armas a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else Message(playerid, COLOR_GRAD2, "Item incorrecto.");
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /quitar <item> <PlayerID>");
		Message(playerid, COLOR_GRAD2, "Items: lconduccion, lvuelo, larma, drogas, materiales, telefono, armas");
	}
	return 1;
}
zcmd(drag, playerid, params[])
{
	new carid = GetPlayerVehicleID(playerid);
	if(!IsACop(playerid)) return Message(playerid, COLOR_GRAD2, "No eres policía.");
	if(!isLSPDVehicle(carid) && !isSAEMVehicle(carid) && !isFBIVehicle(carid)) return Message(playerid, COLOR_GREY, "¡No estás en una patrulla!");
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(!ProxDetectorS(8.0,playerid,params[0])) return Message(playerid, COLOR_GREY, "¡Demasiado lejos!");
			new Float:x, Float:y, Float:z, string[128];
			GetPlayerPos(params[0],x,y,z);
			PutPlayerInVehicle(params[0],GetPlayerVehicleID(playerid),1);
			format(string, sizeof(string), "Oficial %s sube forzosamente a %s a la patrulla", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /drag <PlayerID>");
	return 1;
}
zcmd(getip, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(PlayerInfo[playerid][pAdminCP] < 5) return Message(playerid, COLOR_GREY, "¡No autorizado!");
	if(!sscanf(params, "u", params[0]))
	{
		new ip[20], string[64];
		GetPlayerIp(params[0],ip,sizeof(ip));
		format(string, sizeof(string), "* Player: %s IP: %s", PlayerName(params[0]), ip);
		Message(playerid, COLOR_GRAD2, string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /getip <PlayerID>");
	return 1;
}
zcmd(unbanip, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "s[32]", params[0]))
	{
		new string[90];
		format(string,sizeof(string),"unbanip %s",params[0]);
		SendRconCommand(string);
		SendRconCommand("reloadbans");
		format(string, sizeof(string), "IP desbaneada por %s (%s)", PlayerName(playerid), params[0]);
		A_Info(string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /unbanip <IP>");
	return 1;
}
zcmd(unban, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "s[32]", params[0])){
		if(strfind(params[0], "_" , true) != -1){
			new string3[64], string[128];
			format(string3,sizeof(string3),"users/%s.ini",params[0]);
			if(INI_Exist(string3)){
				new INI:ini = INI_Open(string3);
				INI_WriteInt(ini, "Locked", 0);
				INI_WriteInt(ini, "Advertencias", 0);
				INI_Close(ini);
				format(string, sizeof(string), "%s desbaneó a %s",PlayerName(playerid), params[0]);
				A_Info(string);
			} else Message(playerid, COLOR_GRAD2, "¡Esa cuenta no existe!");
		} else Message(playerid, COLOR_GRAD2, "Ejemplo de Uso: /unban Juan_Perez");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /unban <Nombre_Jugador>");
	return 1;
}
zcmd(fly, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] >= 1){
		new Float:px, Float:py, Float:pz, Float:pa;
		GetPlayerFacingAngle(playerid,pa);
		if(pa >= 0.0 && pa <= 22.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px, py+30, pz+5);
		}
		if(pa >= 332.5 && pa < 0.0)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px, py+30, pz+5);
		}
		if(pa >= 22.5 && pa <= 67.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px-15, py+15, pz+5);
		}
		if(pa >= 67.5 && pa <= 112.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px-30, py, pz+5);
		}
		if(pa >= 112.5 && pa <= 157.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px-15, py-15, pz+5);
		}
		if(pa >= 157.5 && pa <= 202.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px, py-30, pz+5);
		}
		if(pa >= 202.5 && pa <= 247.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px+15, py-15, pz+5);
		}
		if(pa >= 247.5 && pa <= 292.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px+30, py, pz+5);
		}
		if(pa >= 292.5 && pa <= 332.5)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px+15, py+15, pz+5);
		}
	} else Message(playerid, COLOR_GRAD1, "¡No autorizado!");
	return 1;
}
zcmd(cuenta, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if (gPlayerLogged[playerid] != 0)
		{
			ShowStats(playerid,playerid);
		}
	}
	return 1;
}

zcmd(changepass, playerid, params[])
{
	new string[128];
	if(sscanf(params, "s[128]", params[0])) return Message(playerid,COLOR_GRAD2, "Utiliza: /changepass <contraseña>");
	strmid(PlayerInfo[playerid][pKey], params[0], 0, strlen(params[0]), 24);
	format(string, sizeof(string), "Nueva Contraseña: %s", params[0]);
	Message(playerid, COLOR_GRAD1, string);
	OnPlayerUpdateTime(playerid);
	return 1;
}
zcmd(gob, playerid, params[])
{
	new string[128], prank[64];
	if(sscanf(params, "s[128]", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /gob <Texto>");
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(PlayerInfo[playerid][pLeader] == 1)
	{
		format(string, sizeof(string), "[LSPD] Comisario %s: %s", PlayerName(playerid), params[0]);
		GlobalMsg(0x00ACFFFF, string);
	}
	else if(PlayerInfo[playerid][pLeader] == 3)
	{
		format(string, sizeof(string), "[GNSA] Coronel %s: %s", PlayerName(playerid), params[0]);
		GlobalMsg(0x00ACFFFF, string);
	}
	else if(Gobierno(playerid))
	{
		switch(PlayerInfo[playerid][pRank])
		{
			case 5:     prank = "Presidente";
			case 4:     prank = "Vice-Presidente";
			case 3:     prank = "Alcalde de LS";
		}
		if(PlayerInfo[playerid][pMember] == 16 && PlayerInfo[playerid][pRank] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
		format(string, sizeof(string), "[GOBIERNO] %s %s: %s", prank, PlayerName(playerid), params[0]);
		GlobalMsg(0x00ACFFFF, string);
	}
	else if(PlayerInfo[playerid][pLeader] == 24)
	{
		format(string, sizeof(string), "[FBI] Director %s: %s", PlayerName(playerid), params[0]);
		GlobalMsg(0x00ACFFFF, string);
	}
	else if(PlayerInfo[playerid][pLeader] == 25)
	{
		format(string, sizeof(string), "[Corte Judicial] Juez %s: %s", PlayerName(playerid), params[0]);
		GlobalMsg(0x00ACFFFF, string);
	}

	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(impuesto, playerid, params[])
{
	if(Presidente(playerid))
	{
		if(!sscanf(params, "i", params[0]))
		{
			if(params[0] < 0 || params[0] > 600) return Message(playerid, COLOR_GRAD2, "Valor entre 1 - 600");

			new string[90];
			TaxValue = params[0];
			SaveStuff();
			format(string, sizeof(string), "* [GOBIERNO] El impuesto por ciudano se ha establecido en %d$.", TaxValue);
			GlobalMsg(0x00ACFFFF, string);

		}
		else Message(playerid, COLOR_GRAD2, "Utilice: /impuesto <cantidad>");
	}
	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(fondoestado, playerid, params[])
{
	new string[90];
	if(Presidente(playerid))
	{
		if(!sscanf(params, "i", params[0]))
		{
			if (params[0] > Tax || params[0] < 1) return Message(playerid, COLOR_GRAD2, "Cantidad erróena.");

			PlayerInfo[playerid][pAccount] += params[0];    Tax -= params[0];

			format(string, sizeof(string), "Extraiste %d$ de los fondos del estado (%d$)", params[0],Tax);
			Message(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), "Los fondos extraídos pasaron a tu cuenta bancaria (%d$)", PlayerInfo[playerid][pAccount]);
			Message(playerid, COLOR_YELLOW2, string);
			SaveStuff();
		}
		else
		{
			Message(playerid, COLOR_GRAD2, "Utilice: /fondoestado <cantidad>");
			format(string, 90, "* Hay %d de fondos.", Tax);
			Message(playerid, COLOR_GRAD2, string);
		}
	}
	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(altavoz, playerid, params[])
{
	if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GRAD2, "Usted no tiene un telefono.");
	if(Mobile[playerid] == 255) return Message(playerid, COLOR_GREY, "Usted no esta en una llamada telefonica.");
	if(IsPlayerConnected(playerid))
	{
		if(Speaker[playerid] == 0)
		{
			Message(playerid, COLOR_YELLOW2, "* Beep * El altavoz esta conectado.");
			Speaker[playerid] = 1;
			return 1;
		}
		if(Speaker[playerid] == 1)
		{
			Message(playerid, COLOR_YELLOW2, "* Beep * El altavoz se a desconectado.");
			Speaker[playerid] = 0;
			return 1;
		}
	}
	return 1;
}
zcmd(miranda, playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128];
		format(string, sizeof(string),"* %s lee los 'Derechos Miranda'",PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string),"%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.",PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		format(string, sizeof(string),"%s dice: Tiene derecho a un abogado, si no puede pagar uno, se le asignará uno a costas del Estado.",PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		format(string, sizeof(string),"%s dice: Tiene derecho a una llamada por teléfono.",PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		format(string, sizeof(string),"%s dice: ¿De acuerdo señor?",PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}
zcmd(timbre, playerid, params[])
{
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			new string[76];
			format(string, sizeof(string), "* %s toca el timbre.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ProxDetector(30.0, playerid, "Diiing Doooong ... Diiing Doooong", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(30, p, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					ProxDetector(30.0, p, "Diiing Doooong ... Diiing Doooong", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
			}
		}
	}
	return 1;
}
zcmd(robar, playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0) return Message(playerid, COLOR_GREY, "No puedes usar esto aquí.");
	if(Pandilleros(playerid)  || Ballas_pand(playerid) || PlayerInfo[playerid][pJob] == 5)
	{
		if(!sscanf(params, "s[32]", params[0]))
		{
			new string[128];
			if(strcmp(params[0],"persona",true) == 0)
			{
				if(PlayerInfo[playerid][pRob] > 4) return Message(playerid, COLOR_GRAD2, "¡Ya has robado 5 veces, espera al próximo PayDay!");
				new victim = GetClosestPlayer(playerid);
				if(ProxDetectorS(2.0,playerid, victim))
				{
					if(GetPlayerWeapon(victim) == 41)
					{
						format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla", PlayerName(playerid), PlayerName(victim));
						ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
						format(string, sizeof(string), "* %s le rocía la cara con un spray anti-ladrones a %s.", PlayerName(victim), PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						PlayerInfo[playerid][pRob] += 1;
						Message(victim, COLOR_YELLOW2, "-> ¡Evitaste que te robaran!");
					}
					new rob = random(2);
					if(rob == 1)
					{
						PlayerInfo[victim][pPnumber] = 0;
						format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y lo logra", PlayerName(playerid) ,PlayerName(victim));
						ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
						format(string, sizeof(string), "* %s se acerca hacia %s y le roba su teléfono.", PlayerName(playerid) ,PlayerName(victim));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Message(victim, COLOR_YELLOW2, "-> ¡Te han robado el teléfono!");
						Message(playerid, COLOR_YELLOW2, "-> ¡Has robado un teléfono! Véndelo en el NPC");
						PlayerInfo[playerid][pRob] += 1;
						TelfRob[playerid] += 1;
					}
					else
					{
						format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla", PlayerName(playerid), PlayerName(victim));
						ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
						format(string, sizeof(string), "* %s se da cuenta y le da un golpe de puño a %s.", PlayerName(victim), PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Message(victim, COLOR_GREEN, "-> Has evitado que te roben!");
						Message(playerid, COLOR_YELLOW, "Te han pillado! Menudo ostión te has llevado! Corre!");
						PlayerInfo[playerid][pRob] += 1;
					}
				}
			}
			else if(strcmp(params[0],"24-7",true) == 0)
			{
				if(!IsAt247(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en el 24/7!");
				if(PlayerInfo[playerid][pRob] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya robaste, espera al próximo PayDay!");

				new robmoney = random(1000);
				Earn(playerid, robmoney);
				ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000);
				PlayerInfo[playerid][pRob] += 1;
				format(string, sizeof(string), "* %s amenaza con un arma al vendedor", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
			else if(strcmp(params[0],"pizzeria",true) == 0)
			{
				if(PlayerToPoint(10.0,playerid,375.2100,-118.8084,1001.4995))
					if(PlayerInfo[playerid][pRob] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya robaste, espera al próximo PayDay!");

				new robmoney = random(1000);
				Earn(playerid, robmoney);
				ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000); 
				PlayerInfo[playerid][pRob] += 1;
				format(string, sizeof(string), "* %s amenaza con un arma al vendedor", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
			else if(strcmp(params[0],"bar",true) == 0)
			{
				if(PlayerToPoint(10.0,playerid,496.6479,-76.0379,998.7578))
					if(PlayerInfo[playerid][pRob] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya robaste, espera al próximo PayDay!");

				new robmoney = random(1000);
				Earn(playerid, robmoney);
				ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000);
				PlayerInfo[playerid][pRob] += 1;
				format(string, sizeof(string), "* %s amenaza con un arma al vendedor", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
			else if(strcmp(params[0],"binco",true) == 0)
			{
				if(PlayerToPoint(10.0,playerid,207.6917,-100.3481,1005.2578))
					if(PlayerInfo[playerid][pRob] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya robaste, espera al próximo PayDay!");

				new robmoney = random(1000);
				Earn(playerid, robmoney);
				ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000);
				PlayerInfo[playerid][pRob] += 1;
				format(string, sizeof(string), "* %s amenaza con un arma al vendedor", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}

			else if(strcmp(params[0],"propiedad",true) == 0)
			{
				if(PickLock[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes con que forzar la cerradura!");
				if(PlayerInfo[playerid][pRob] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya robaste, espera al próximo PayDay!");
				for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
						new Float:cx,Float:cy,Float:cz;
						GetPlayerPos(playerid, cx, cy, cz);
						new luck = random(8)
						if(luck == 3 || luck == 7)
						{
							format(string, sizeof(string), "* %s fuerza la cerradura de la casa, entra y roba todo lo que puede.", PlayerName(playerid));
							ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							new cash = random(6000);
							PlayerInfo[playerid][pRob] = 1;
							SendRadioMessage(1, TEAM_BLUE_COLOR, "** Central: Atención se ha producido un robo en una casa de LS, acudan lo antes posible!");
							for(new x = 0; x < MAX_PLAYERS; x++)
							{
								if(IsPlayerConnected(x))
								{
									if(Team_LSPD(playerid))
									{
										SetPlayerCheckpoint(x, cx, cy, cz, 3.0);
									}
								}
							}
							Earn(playerid, cash);
							ProxDetector(30.0, playerid, "* Piiiiiiiiiiiiiiii Piiiiiiiiiiiiiiiii (( Alarma Sonando ))", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s rompe su alambre al intentar forzar la cerradura.", PlayerName(playerid));
							ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendClientMessage(playerid, COLOR_YELLOW2, "Fallaste al abrir la casa ...");
							PlayerInfo[playerid][pRob] = 1;
							return 1;
						}
					}
					else Message(playerid, COLOR_GRAD2, "¡No estás cerca de una casa!");
				}
			}
		}
		else Message(playerid, COLOR_GRAD2, "Utilice: /robar <24-7> <Persona> <Propiedad> <Bar> <Pizzeria> <Binco>");
	}
	return 1;
}
zcmd(robarbanco, playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] < 1) return Message(playerid, COLOR_GRAD2, "¡No eres lider de una faccion!");
	if(PlayerToPoint(10.0,playerid,373.2491,-1614.2692,39.3599) || PlayerToPoint(10.0,playerid,2396.8611,2492.6538,-19.0217))
	{
		if(PlayerInfo[playerid][pLeader] == 2 && RPirata <= gettime())
		{
			RobarBanco(playerid);
			RPirata = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 9 && RGroove <= gettime())
		{
			RobarBanco(playerid);
			RGroove = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 10 && RHerman <= gettime())
		{
			RobarBanco(playerid);
			RHerman = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 11 && RLKings <= gettime())
		{
			RobarBanco(playerid);
			RLKings = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 12 && RLCN <= gettime())
		{
			RobarBanco(playerid);
			RLCN = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 13 && RYakuza <= gettime())
		{
			RobarBanco(playerid);
			RYakuza = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 14 && RRusos <= gettime())
		{
			RobarBanco(playerid);
			RRusos = gettime() + 172800;
		}
		else if(PlayerInfo[playerid][pLeader] == 5 && RBallas <= gettime())
		{
			RobarBanco(playerid);
			RBallas = gettime() + 172800;
		}
		else Message(playerid, COLOR_GRAD2, "¡No eres lider de una faccion ilegal o aun no puedes usar este comando, usa /timerob!");
	} else Message(playerid, COLOR_GRAD2, "¡No estás en el banco!");
	return 1;
}
zcmd(timerob, playerid, params[])
{
	new string[128], facrob;
	if(PlayerInfo[playerid][pLeader] < 1) return Message(playerid, COLOR_GRAD2, "¡No eres lider de una faccion ilegal!");
	switch(PlayerInfo[playerid][pLeader])
	{
		case 2:     facrob = RPirata;
		case 9:     facrob = RGroove;
		case 5:     facrob = RBallas;
		case 10:    facrob = RHerman;
		case 11:    facrob = RLKings;
		case 12:    facrob = RLCN;
		case 13:    facrob = RYakuza;
		case 14:    facrob = RRusos;
		default:    facrob = 9999;
	}
	if(facrob == 9999) return Message(playerid, COLOR_GRAD2, "¡No eres lider de una faccion ilegal!");
	if(facrob == 0) return Message(playerid, COLOR_GRAD2, "* Tu faccion ya puede realizar un robo.");
	new TiempoRob = facrob - gettime(),
	dias = TiempoRob/60/60/24,
	horas = TiempoRob/60/60 - dias*24,
	minutos = TiempoRob/60 - dias*24*60 - horas*60;
	format(string, sizeof(string), "* Faltan %d dias, %d horas, %d minutos para poder realizar un robo al banco.", dias, horas, minutos);
	Message(playerid, COLOR_GRAD4, string);
	return 1;
}
zcmd(ayuda, playerid, params[])
{
	if(!sscanf(params, "s[32]", params[0]))
	{
		if		(strcmp(params[0],	"faccion",	true) == 0)   				Ayuda(playerid, 0);
		else if	(strcmp(params[0],	"chat",		true) == 0)   				Ayuda(playerid, 1);
		else if	(strcmp(params[0],	"general",		true) == 0)   			Ayuda(playerid, 2);
		else if	(strcmp(params[0],	"lider",		true) == 0)   			Ayuda(playerid, 3);
		else if	(strcmp(params[0],	"trabajo",		true) == 0)   			Ayuda(playerid, 4);
		else if	(strcmp(params[0],	"telefono",		true) == 0)   			Ayuda(playerid, 5);
		else if	(strcmp(params[0],	"casa",		true) == 0)   				Ayuda(playerid, 6);
		else if	(strcmp(params[0],	"vehiculo",		true) == 0)   			Ayuda(playerid, 7);
		else if	(strcmp(params[0],	"banco",		true) == 0)   			Ayuda(playerid, 8);
		else if	(strcmp(params[0],	"premium",		true) == 0)   			Ayuda(playerid, 9);
		else if (strcmp(params[0],  "negocio",      true) == 0)             Ayuda(playerid, 10);
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /ayuda <nombre>");
		Message(playerid, COLOR_GRAD2, "General, Chat, Casa, Lider, Faccion, Trabajo, Banco, Teléfono, Premium, Vehiculo, Negocio");
	}
	return 1;
}
zcmd(darlider, playerid, params[])
{
	new ftext[30], string[128];
	if(PlayerInfo[playerid][pAdminCP] < 2012 && PlayerInfo[playerid][pFacciones] != 1) 	return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "ui", params[0], params[1])) 		return Message(playerid, COLOR_GRAD2, "Utilice: /darlider <PlayerID> <Facción>");
	if(params[1] < 0 || params[1] > MAX_FACTION) 		return Message(playerid, COLOR_GREY, "ID facción incorrecto.");
	if(!IsPlayerConnected(params[0]))                   return Message(playerid, COLOR_GREY, "Jugado desconectado.");
	switch(params[1])
	{
		case 0: 	{PlayerInfo[params[0]][pChar] = 299; PlayerInfo[params[0]][pRank] = 0; ftext = "Ninguna"; }
		case 1: 	{PlayerInfo[params[0]][pChar] = 283; PlayerInfo[params[0]][pRank] = 8; ftext = "Policía Local LS"; }
		case 2:     {PlayerInfo[params[0]][pChar] = 217; PlayerInfo[params[0]][pRank] = 6; ftext = "Piratas Del Asfalto"; }
		case 3: 	{PlayerInfo[params[0]][pChar] = 287; PlayerInfo[params[0]][pRank] = 8; ftext = "SAEM"; }
		case 4: 	{PlayerInfo[params[0]][pChar] = 228; PlayerInfo[params[0]][pRank] = 6; ftext = "Medical Center LS"; }
		case 5:     {PlayerInfo[params[0]][pChar] = 104; 	 PlayerInfo[params[0]][pRank] = 6; ftext = "Ballas";}
		case 7:     {PlayerInfo[params[0]][pChar] = 268; PlayerInfo[params[0]][pRank] = 6; ftext = "Mecanicos LS"; }
		case 8:     {PlayerInfo[params[0]][pChar] = 247; PlayerInfo[params[0]][pRank] = 6; ftext = "Moteros"; }
		case 9:     {PlayerInfo[params[0]][pChar] = 270; PlayerInfo[params[0]][pRank] = 6; ftext = "Groove"; }
		case 10:    {PlayerInfo[params[0]][pChar] = 292; PlayerInfo[params[0]][pRank] = 6; ftext = "La Hermanadad"; }
		case 11:    {PlayerInfo[params[0]][pChar] = 110; PlayerInfo[params[0]][pRank] = 6; ftext = "Latin Kings"; }
		case 12:    {PlayerInfo[params[0]][pChar] = 113; PlayerInfo[params[0]][pRank] = 7; ftext = "LCN"; }
		case 13:    {PlayerInfo[params[0]][pChar] = 294; PlayerInfo[params[0]][pRank] = 6; ftext = "Yakuza"; }
		case 14:    {PlayerInfo[params[0]][pChar] = 290; PlayerInfo[params[0]][pRank] = 7; ftext = "Familia Korsakova"; }
		case 16:    {PlayerInfo[params[0]][pChar] = 295; PlayerInfo[params[0]][pRank] = 5; ftext = "Gobierno"; }
		case 17:    {PlayerInfo[params[0]][pRank] = 6; ftext = "Radio-Television"; }
		case 19:    {PlayerInfo[params[0]][pRank] = 6; ftext = "Traficantes"; }
		case 23:    {PlayerInfo[params[0]][pChar] = 176; PlayerInfo[params[0]][pRank] = 6; ftext = "Hitman"; }
		case 24:    {PlayerInfo[params[0]][pChar] = 286; PlayerInfo[params[0]][pRank] = 6; ftext = "FBI"; }
		case 25:    {PlayerInfo[params[0]][pChar] = 187; PlayerInfo[params[0]][pRank] = 4; ftext = "Corte Judicial"; }

		default:    return Message(playerid, COLOR_GRAD2, "¡Escogiste un item incorrecto!");
	}
	PlayerInfo[params[0]][pMember] = 0;
	PlayerInfo[params[0]][pLeader] = params[1];
	SetPlayerSkin(params[0], PlayerInfo[params[0]][pChar]);
	UpdatePlayerStat(params[0]);
	format(string, sizeof(string), "Administrador %s asignó el líder de la facción %s a %s.", PlayerName(playerid), ftext, PlayerName(params[0]));
	MessageEx(playerid, params[0], 0x6ADFFFFF, string);
	return 1;
}
zcmd(ad, playerid, params[]){
	ClearChatbox(playerid, 20);
	Message(playerid, 0x2641FEAA, "|===========================Anuncios===========================");
	Message(playerid, 0x33CCFFAA, "|Utiliza: {0600B4} /AdCompras||/AdVentas||/AdTrabajos||/AdEventos||/AdPro");
	Message(playerid, 0x33CCFFAA, "|Compras:         [Anuncio][ComprasLS]                    ");
	Message(playerid, 0x33CCFFAA, "|Ventas:         [Anuncio][VentasLS]                     ");
	Message(playerid, 0x33CCFFAA, "|Trabajos:         [Anuncio][TrabajosLS]                   ");
	Message(playerid, 0x33CCFFAA, "|Eventos:         [Anuncio][EventosLS]                    ");
	Message(playerid, 0x33CCFFAA, "|Pro:         [Anuncio]                               ");
	Message(playerid, 0x2641FEAA, "|===========================Anuncios===========================");
	return Message(playerid, COLOR_GRAD2,"");
}
zcmd(adcompras, playerid, params[])
{
	if(!sscanf(params, "s[220]", params[0]))
	{
            #define AD_PRICE 25
		if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
		if(PlayerInfo[playerid][pLevel] < 3) return Message(playerid, COLOR_GREY, "Debes ser mínimo nivel 3.");
		if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GREY, "No tienes teléfono, cómpra uno en la tienda electronica");
		new string[220];
		if(adds > 0)
		{
			format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.",  adds);
			Message(playerid, COLOR_GRAD2, string);
			return 1;
		}
		if(CheckMoney(playerid, AD_PRICE))
		{
			format(string, sizeof(string), "{13FF00}[Anuncio][ComprasLS] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})",  params[0], PlayerInfo[playerid][pPnumber]);
			OOCNews(-1,string);
	            //AntiSPAM(playerid, string);
			Bought(playerid, AD_PRICE);
			format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
			ABroadCast(COLOR_WHITE,string,1);
			adds = 60;
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /AdCompras <anuncio>");
	return 1;
}
zcmd(adventas, playerid, params[])
{
	if(!sscanf(params, "s[220]", params[0]))
	{
            #define AD_PRICE 25
		if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
		if(PlayerInfo[playerid][pLevel] < 3) return Message(playerid, COLOR_GREY, "Debes ser mínimo nivel 3.");
		if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GREY, "No tienes teléfono, cómpra uno en la tienda electronica");
		new string[220];
		if(adds > 0)
		{
			format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.",  adds);
			Message(playerid, COLOR_GRAD2, string);
			return 1;
		}
		if(CheckMoney(playerid, AD_PRICE))
		{
			format(string, sizeof(string), "{13FF00}[Anuncio][VentasLS] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})",  params[0], PlayerInfo[playerid][pPnumber]);
			OOCNews(-1,string);
	            //AntiSPAM(playerid, string);
			Bought(playerid, AD_PRICE);
			format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
			ABroadCast(COLOR_WHITE,string,1);
			adds = 60;
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /AdVentas <anuncio>");
	return 1;
}
zcmd(adtrabajos, playerid, params[])
{
	if(!sscanf(params, "s[220]", params[0]))
	{
            #define AD_PRICE 25
		if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
		if(PlayerInfo[playerid][pLevel] < 3) return Message(playerid, COLOR_GREY, "Debes ser mínimo nivel 3.");
		if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GREY, "No tienes teléfono, cómpra uno en la tienda electronica");
		new string[220];
		if(adds > 0)
		{
			format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.",  adds);
			Message(playerid, COLOR_GRAD2, string);
			return 1;
		}
		if(CheckMoney(playerid, AD_PRICE))
		{
			format(string, sizeof(string), "{13FF00}[Anuncio][TrabajosLS] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})",  params[0], PlayerInfo[playerid][pPnumber]);
			OOCNews(-1,string);
	          //  AntiSPAM(playerid, string);
			Bought(playerid, AD_PRICE);
			format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
			ABroadCast(COLOR_WHITE,string,1);
			adds = 60;
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /AdTrabajos <anuncio>");
	return 1;
}
zcmd(adeventos, playerid, params[])
{
	if(!sscanf(params, "s[220]", params[0]))
	{
            #define AD_PRICE 25
		if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
		if(PlayerInfo[playerid][pLevel] < 3) return Message(playerid, COLOR_GREY, "Debes ser mínimo nivel 3.");
		if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GREY, "No tienes teléfono, cómpra uno en la tienda electronica");
		new string[220];
		if(adds > 0)
		{
			format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.",  adds);
			Message(playerid, COLOR_GRAD2, string);
			return 1;
		}
		if(CheckMoney(playerid, AD_PRICE))
		{
			format(string, sizeof(string), "{13FF00}[Anuncio][EventosLS] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})",  params[0], PlayerInfo[playerid][pPnumber]);
			OOCNews(-1,string);
	            //AntiSPAM(playerid, string);
			Bought(playerid, AD_PRICE);
			format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
			ABroadCast(COLOR_WHITE,string,1);
			adds = 60;
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /AdEventos <anuncio>");
	return 1;
}
zcmd(adpro, playerid, params[])
{
	if(!sscanf(params, "s[220]", params[0]))
	{
            #define AD_PRICE 25
		if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
		if(PlayerInfo[playerid][pLevel] < 3) return Message(playerid, COLOR_GREY, "Debes ser mínimo nivel 3.");
		if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GREY, "No tienes teléfono, cómpra uno en la tienda electronica");
		new string[220];
		if(adds > 0)
		{
			format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.",  adds);
			Message(playerid, COLOR_GRAD2, string);
			return 1;
		}
		if(CheckMoney(playerid, AD_PRICE))
		{
			format(string, sizeof(string), "{13FF00}[Anuncio] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})",  params[0], PlayerInfo[playerid][pPnumber]);
			OOCNews(-1,string);
	            //AntiSPAM(playerid, string);
			Bought(playerid, AD_PRICE);
			format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
			ABroadCast(COLOR_WHITE,string,1);
			adds = 60;
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /AdPro <anuncio>");
	return 1;
}

zcmd(rr, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /rr <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador no está conectado.");
	if(PlayerNeedsHelp[params[0]] == 1)
	{
		new string[128];
		format(string, sizeof(string), "{FFFFFF}AdmWarning: {3F96CB}%s {FFFFFF}ha rechazado el reporte de [ID:%d] {FF0000}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{80FF00}*HZ-RP*: {FFFFFF}Administrador {FF0000}%s [ID:%d] {FFFFFF}ha rechazado su reporte.", PlayerName(playerid), playerid);
		Message(params[0], -1, string);
		PlayerNeedsHelp[params[0]] = 0;
	}
	else Message(playerid, COLOR_GREY, "El jugador no ha enviado ningún reporte.");
	return 1;
}
zcmd(ar,playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /ar <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador no está conectado.");
	if(PlayerNeedsHelp[params[0]] == 1)
	{
		new string[128];
		format(string, sizeof(string), "{FFFFFF}AdmWarning: {80FF00}%s {FFFFFF}ha aceptado el reporte de [ID:%d] {FF0000}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{80FF00}*HZ-RP*: {FFFFFF}Administrador {FF0000}%s [ID:%d] {FFFFFF}ha aceptado tu reporte porfavor espere.", PlayerName(playerid), playerid);
		Message(params[0], -1, string);
		PlayerNeedsHelp[params[0]] = 0;
	}
	else Message(playerid, COLOR_GREY, "El jugador no ha enviado ningún reporte.");
	return 1;
}
zcmd(aduda, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /aduda <id>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GREY, "Jugador no está conectado.");
	if(PlayerDuda[params[0]] == 1){
		new string[128];
		format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}aceptó la duda de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{FFFFFF}* {B39CC8}%s {FFFFFF}le va a responder, para hablar con el administrador use /w {B3D972}%d.", PlayerName(playerid), playerid);
		Message(params[0], -1, string);
		PlayerDuda[params[0]] = 0;
	}else Message(playerid, COLOR_GRAD2, "El jugador no ha enviado una duda.");
	return 1;
}
zcmd(rduda, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /rduda <id>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GREY, "Jugador no está conectado.");
	if(PlayerDuda[params[0]] == 1){
		new string[128];
		format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}rechazo la duda de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{FFFFFF}* {B39CC8}%s {FFFFFF}ha {FF0000}rechazado {FFFFFF}su duda por mal uso de /duda o otra razon conveniente.", PlayerName(playerid), playerid);
		Message(params[0], -1, string);
		PlayerDuda[params[0]] = 0;
	}else Message(playerid, COLOR_GRAD2, "El jugador no ha enviado una duda.");
	return 1;
}
zcmd(wtf, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 6) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /rduda <id>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GREY, "Jugador no está conectado.");
	if(PlayerDuda[params[0]] == 1){
		new string[128];
		format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}wtfqueo la duda de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{FFFFFF}* {B39CC8}%s {FFFFFF} ¿What the fuck? Expliquese mejor en el /duda, tiene un minuto para reformularla.", PlayerName(playerid), playerid);
		Message(params[0], -1, string);
		PlayerDuda[params[0]] = 0;
	}else Message(playerid, COLOR_GRAD2, "El jugador no ha enviado una duda.");
	return 1;
}
zcmd(tomarpizza, playerid, params[])
{
	if(PlayerToPoint(5.0,playerid,379.1396,-114.2661,1001.4922))
	{
		if (PlayerInfo[playerid][pJob] != 6)
		{
			Message(playerid, COLOR_GRAD2, "Usted no es un repartidor de Pizza.");
			return 1;
		}
		if (sPizza[playerid] == 0)
		{
			Message(playerid, COLOR_WHITE, "Usted ha cogido 5 pizzas, espere a un pedido.");
			sPizza[playerid] = 5;
		}
	}
	return 1;
}
zcmd(cpizza, playerid, params[])
{
	if (bPizza[playerid] != 1) return Message(playerid, COLOR_GRAD2, "   Usted no tiene una pizza, antes llame al 111.");
	new string[64];
	SetHP(playerid, 100);
	format(string, sizeof(string), "* %s coge su pizza y se la come.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	bPizza[playerid] = 0;
	return 1;
}
zcmd(comprarhotdog, playerid, params[])
{
	if(!IsAtHotdog(playerid)) return Message(playerid, COLOR_GRAD2, "  No estas en un lugar adecuado!");
	if(Hotdog[playerid] >= 5) return Message(playerid, COLOR_GRAD2, "¡No puedes tener mas de 5 hotdogs!");
	if(CheckMoney(playerid,5)){
		new string[86];
		Bought(playerid, 5);
		format(string, sizeof(string), "* %s compra un hotdog.", PlayerName(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Message(playerid, COLOR_WHITE, "* Has comprado un hotdog, utiliza {FF4564}/chotdog {FFFFFF}para comértelo.");
		Hotdog[playerid] += 1;
	}
	return 1;
}
zcmd(chotdog, playerid, params[])
{
	if(Hotdog[playerid] == 0) return Message(playerid, COLOR_GRAD2, "Usted no tiene un hotdog para comer.");
	new string[64], Float:Health;
	GetPlayerHealth(playerid, Health);
	SetHP(playerid, Health+25);
	format(string, sizeof(string), "* %s coge un hotdog y se lo come.", PlayerName(playerid));
	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Hotdog[playerid] -= 1;
	return 1;
}
zcmd(darhotdog, playerid, params[])
{
	new string[128];
	if(Hotdog[playerid] == 0) return Message(playerid, COLOR_GRAD2, "No tienes un hotdog para dar.");
	if(!sscanf(params,"u",params[0])){
		if(ProxDetectorS(8.0, playerid, params[0])){
			if(Hotdog[params[0]] < 5){
				format(string, sizeof(string), "* %s le da un hotdog a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "* Te han dado un hotdog, utiliza {FF4564}/chotdog {FFFFFF}para comértelo.");
				Hotdog[playerid] -= 1;
				Hotdog[params[0]] += 1;
			} else Message(playerid, COLOR_GRAD2, "¡Esa persona tiene muchos hotdogs!");
		} else Message(playerid, COLOR_GRAD2, "¡Esta persona esta muy lejos!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /darhotdog <PlayerID>");
	return 1;
}
zcmd(comprarentrada, playerid, params[])
{
	if(PlayerInfo[playerid][pDonateT] >= 1) return Message(playerid,COLOR_GRAD2, "Usted es premium, no necesita comprar entrada.");
	if(ComproBoleto[playerid] == 1) return Message(playerid,COLOR_GRAD2, "Usted ya tiene una entrada.");
	if(!PlayerToPoint(8.0,playerid,1790.3563,-1591.3485,13.4936)) return Message(playerid, COLOR_GRAD2, "Usted no está en la boleteria.");
	if(GetPlayerMoney(playerid) > 5000)
	{
		Bought(playerid, 5000);
		Till(1, 5000);
		ComproBoleto[playerid] = 1;
		Message(playerid, -1, "Compraste la entrada al club {E4C65A}VIP, {FFFFFF}Ahora puedes entrar al club.");
	}
	return 1;
}
zcmd(centradacine, playerid, params[])
{
	if(PlayerInfo[playerid][pDonateT] >= 1) return Message(playerid,COLOR_GRAD2, "Usted es premium, no necesita comprar entrada.");
	if(ComproCine[playerid] == 1) return Message(playerid,COLOR_GRAD2, "Usted ya tiene una entrada.");
	if(!PlayerToPoint(8.0,playerid,1350.3633,-1677.4314,1694.2446)) return Message(playerid, COLOR_GRAD2, "Usted no está en la taquilla.");
	if(GetPlayerMoney(playerid) > 50)
	{
		Bought(playerid, 50);
		ComproCine[playerid] = 1;
		Message(playerid, -1, "Compraste la entrada al cine{E4C65A}, {FFFFFF}Ahora puedes entrar a la sala.");
	}
	return 1;
}
zcmd(vpizza, playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != 6) return Message(playerid,COLOR_GRAD2, "Usted no es Pizzero.");
	if (sscanf(params, "u", params[0])) return Message(playerid,COLOR_GRAD2, "Utiliza: /vpizza <PlayerID>");
	if (sPizza[playerid] >= 1)
	{
		if (ProxDetectorS(8.0, playerid, params[0]))
		{
			new string[256]
			format(string, sizeof(string), "* Ha entregado una pizza a %s", PlayerName(params[0]));
			Message(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "{A4D9EB}* Repartidor de Pizza %s le ha dado una pizza. {FF4564}/cpizza", PlayerName(playerid));
			Message(params[0], -1, string);
			format(string, sizeof(string), "* %s toma la pizza y se lo da a %s", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			bPizza[params[0]] = 1;
			sPizza[playerid] -= 1;
		} else Message(playerid, COLOR_GRAD2, "El jugador no esta cerca.");
	} else Message(playerid, COLOR_GRAD2, "* No tienes una pizza, ve a la cocina.");
	return 1;
}
zcmd(aceptarpizza, playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 6) return Message(playerid,COLOR_GRAD2, "Usted no es Pizzero.");
	if(PizzaCallTime[playerid] > 0) return Message(playerid,COLOR_GRAD2, "Usted ya acepto un pedido de pizza, espere 90 seg para aceptar otro!");
	if(PizzaCall < 999)
	{
		new string[128];
		new Float:X, Float:Y, Float:Z;
		format(string, sizeof(string), "{FFFFFF}Central: {EE844C}%s {FFFFFF}acepto el pedido de {EE844C}%s{FFFFFF}, esperen otros pedidos.",PlayerName(playerid), PlayerName(PizzaCall));
		SendJobMessage(6, -1, string);
		Message(playerid, COLOR_WHITE, "* Tiene 90 segundos para llegar al destino!");
		format(string, sizeof(string), "{FFFFFF} Pizzero {EE844C}%s {FFFFFF}ha aceptado su pedido, espere en su posición actual.",PlayerName(playerid));
		Message(PizzaCall, -1, string);
		GetPlayerPos(PizzaCall, X, Y, Z);
		SetPlayerCheckpoint(playerid, X, Y, Z, 5);
		GText(playerid, "~w~CheckPoint~n~~r~Marcado", 5000, 1);
		PizzaCallTime[playerid] = 1;
		PizzaCall = 999;
	}
	else
		Message(playerid, COLOR_GRAD2, "* Nadie a echo un pedido de pizza.");
	return 1;
}
zcmd(colgar, playerid, params[])
{
	StopCall(playerid);
	return 1;
}
zcmd(contestar, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(Mobile[playerid] != 255)
		{
			Message(playerid, COLOR_GRAD2, "* Usted ya esta en una llamada...");
			return 1;
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(Mobile[i] == playerid)
				{
					new string[64];
					Mobile[playerid] = i;
					Message(i,  COLOR_GRAD2, "Contestaron la llamada.");
					format(string, sizeof(string), "* %s contesta su teléfono.", PlayerName(playerid));
					SetPlayerAttachedObject(playerid, 0, 18866, 6, 0.03999, 0.00999, 0.00000, -90.00000, 0.00000, 180.00000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}

			}
		}
	}
	return 1;
}
    //zcmd - Bank
zcmd(balance, playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "¡Jugador no conectado!");
	if(IsAtATM(playerid) || IsAtBank(playerid))
	{
		new string[64];
		format(string, sizeof(string), "- Tienes %d$ en tu cuenta bancaria.",PlayerInfo[playerid][pAccount]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	} else Message(playerid, COLOR_GREY, "¡No estás en un cajero!");
	return 1;
} 
zcmd(renovarvehiculo, playerid, params[])
{
	if(!PlayerToPoint(10.0,playerid,362.2792,173.5607,1008.3828)) return Message(playerid, COLOR_GRAD2, "Solo puedes renovar tu vehículo en el ayuntamiento");
	new string[128];
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /renovarvehiculo <Llave 1-2>");
	if(params[0] == 1 && PlayerInfo[playerid][pPcarkey] == 9999) return Message(playerid, COLOR_GRAD2, "¡No posees ningún vehiculo en el primer slot!");
	if(params[0] == 2 && PlayerInfo[playerid][pPcarkey2] == 9999) return Message(playerid, COLOR_GRAD2, "¡No posees ningún vehículo en el segundo slot!");

	if(PlayerInfo[playerid][pAccount] >= 6000)
	{
		if(params[0] == 1) {
			format(string, sizeof(string), "* Has renovado tu %s por un periodo de 15 dias, utiliza /v tiempo", CarInfo[PlayerInfo[playerid][pPcarkey]][cName]);
			Message(playerid, COLOR_GREEN, string);
			CarInfo[PlayerInfo[playerid][pPcarkey]][cVehTime] = gettime() + 1296000;
			PlayerInfo[playerid][pTimeCar] = gettime() + 1296000;
		}
		else if(params[0] == 2) {
			format(string, sizeof(string), "* Has renovado tu %s por un periodo de 15 dias, utiliza /v tiempo", CarInfo[PlayerInfo[playerid][pPcarkey2]][cName]);
			Message(playerid, COLOR_GREEN, string);
			CarInfo[PlayerInfo[playerid][pPcarkey2]][cVehTime] = gettime() + 1296000;
			PlayerInfo[playerid][pTimeCar2] = gettime() + 1296000;
		} else return Message(playerid, COLOR_GRAD2, "Utilice: /renovarvehiculo <Llave 1-2>");
		PlayerInfo[playerid][pAccount] -= 6000;
	} else Message(playerid, COLOR_GRAD2, "No tienes fondos suficientes fondos suficientes. (6000$)");
	return 1;
}
zcmd(noticias, playerid, params[])
{
	if(Journalist(playerid))
	{
		if(PlayerInfo[playerid][pRank] < 3) return Message(playerid, COLOR_GRAD2, "¡No tienes rango suficiente!");
		new car = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(PlayerInfo[playerid][pRank] == 3)
		{
			if(car == 488 || car == 582)
			{
				if(TalkingLive[playerid] == 0)
				{
					TalkingLive[playerid] = 1;
					Message(playerid, COLOR_WHITE, "Has entrado en antena, estás hablando para todo San Andreas");
					Message(playerid, COLOR_WHITE, "Recuerda que solo puedes hablar en un vehículo CNN con ese rango.");
				}
				else
				{
					TalkingLive[playerid] = 0;
					Message(playerid, COLOR_WHITE, "Estás fuera de antena.");
				}
			}
			else Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo CNN!");
		}
		else
		{
			if(TalkingLive[playerid] == 0)
			{
				TalkingLive[playerid] = 1;
				Message(playerid, COLOR_WHITE, "Has entrado en antena, estás hablando para todo San Andreas");
			}
			else
			{
				TalkingLive[playerid] = 0;
				Message(playerid, COLOR_WHITE, "Estás fuera de antena.");
			}
		}
	}
	else Message(playerid, COLOR_GRAD2, "No eres reportero.");
	return 1;
}
zcmd(entrevista, playerid, params[])
{
	if(PlayerInfo[playerid][pRank] < 3) return Message(playerid, COLOR_GRAD2, "¡No tienes rango suficiente!");
	if(!Journalist(playerid)) 			return Message(playerid, COLOR_GRAD2, "No eres reportero.");
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			new string[128];
			if(TalkingLive[params[0]] == 0)
			{
				if(ProxDetectorS(5.0, playerid, params[0]))
				{
					if(Facturing[params[0]] == 1) return Message(playerid, COLOR_GRAD2, "Este jugador está ocupado, espere.");
					if(params[0] == playerid) { SendClientMessage(playerid, COLOR_GREY, "No puedes entrevistarte ati mismo!"); return 1; }
					format(string, sizeof(string), "* Ofreciste a %s una entrevista", PlayerName(params[0]));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* %s te ofrece ser entrevistado.", PlayerName(playerid));
					SendRequest(params[0], string);
					Petition_ID[params[0]] = 1;
					LiveOffer[params[0]] = playerid;
					Facturing[params[0]] = 1;
					Interview = 1;
					Interviewer = PlayerName(playerid);
				}
				else return Message(playerid, COLOR_GREY, "El jugador está muy lejos!");
			}
			else
			{
				TalkingLive[params[0]] = 0;
				format(string, sizeof(string), "* %s anuló la entrevista a %s", PlayerName(playerid), PlayerName(params[0]));
				Message(params[0], COLOR_WHITE, string);
			}
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /entrevista <PlayerID>");
	return 1;
}
zcmd(centrevista, playerid, params[])
{
	if(PlayerInfo[playerid][pRank] < 3) return Message(playerid, COLOR_GRAD2, "¡No tienes rango suficiente!");
	if(Journalist(playerid))
	{
		new string[80];
		Message(playerid, COLOR_WHITE, "Cancelaste la entrevista.");
		for(new i = 0; i != MAX_PLAYERS; i++ )
		{
			if(TalkingLive[i] > 0)
			{
				format(string, sizeof(string), "** Entrevistado %s salió de la entrevista.", PlayerName(i));
				Message(i, COLOR_WHITE, string);
				TalkingLive[i] = 0;
			}
		}
	}
	else	Message(playerid, COLOR_GRAD2, "No eres reportero.");
	return 1;
}
zcmd(desbug, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		Message(playerid, -1, " {98CDFF}Su problema fue solucionado {FFFFFF}correctamente. {FFA4CB}[Desbug]");
	}
	else Message(playerid, COLOR_GRAD2, " Usted no esta logeado.");
	return 1;
}
zcmd(desbugcam, playerid, params[])
{
	SetCameraBehindPlayer(playerid);
	return 1;
}
zcmd(cseguro, playerid, params[])
{
	if(PlayerInfo[playerid][pSeguro] == 1) return Message(playerid, COLOR_GRAD2, "¡Ya tienes seguro del hospital!");
	if(CheckMoney(playerid,1000))
	{
		if(PlayerToPoint(2.0,playerid,-2659.7708,506.9668,48.0847))
		{
			PlayerInfo[playerid][pSeguro] = 1;
			Bought(playerid, 1000);
			Fondos[SAMUR] += 1000;
			Message(playerid, -1, "{FF393E}Hospital: {FFFFFF}Adquiriste el seguro médico de Los Santos.");
			Message(playerid, -1, "{FF393E}Hospital: {FFFFFF}Ahora cuando tengas un accidente te atenderemos en este hospital.");
		}
	}
	return 1;
}
zcmd(placa, playerid, params[])
{
	new string[90];
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(!ProxDetectorS(8.0,playerid,params[0])) return Message(playerid, COLOR_GRAD2, "Muy lejos de el jugador.");
			if(Team_LSPD(playerid))
			{
				ClearChatbox(params[0], 7);
				Message(params[0], COLOR_LIGHTBLUE, "-- Los Santos Police Departament --");
				format(string, sizeof(string), "Nombre: %s - Rango: %s", PlayerName(playerid), PlayerStatInfo[playerid][4]);
				Message(params[0], COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le enseña la placa a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(Team_NG(playerid))
			{
				ClearChatbox(params[0], 7);
				Message(params[0], COLOR_GREEN, "-- San Andreas Ejercito Militar --");
				format(string, sizeof(string), "Nombre: %s - Rango: %s", PlayerName(playerid), PlayerStatInfo[playerid][4]);
				Message(params[0], COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le enseña la placa a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(Team_FBI(playerid))
			{
				ClearChatbox(params[0], 7);
				Message(params[0], COLOR_LIGHTBLUE, "-- Federal Bureau of Investigation --");
				format(string, sizeof(string), "Nombre: %s - Rango: %s", PlayerName(playerid), PlayerStatInfo[playerid][4]);
				Message(params[0], COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le enseña la placa a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else  Message(playerid, COLOR_GRAD2, "¡No tienes una placa!");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /placa <PlayerID>");
	return 1;
}
zcmd(seguro, playerid, params[]){
	new string[90];
	if(PlayerInfo[playerid][pSeguro] == 0) return Message(playerid, COLOR_GRAD2, "No tienes un seguro medico.");
	if(!sscanf(params, "u", params[0]))
	{
		if(!ProxDetectorS(8.0, playerid, params[0])) return Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		Message(params[0], COLOR_GREEN, "__ Tarjeta de Seguro __");
		format(string, sizeof(string), "   {FF231E}Nombre: {FFFFFF}%s", PlayerName(playerid));
		Message(params[0], -1, string);
		format(string, sizeof(string), "   {FF231E}Clinica: {FFFFFF}Los Santos Medical Center");
		Message(params[0], -1, string);
		format(string, sizeof(string), "* %s le muestra su tarjeta de seguro a %s.", PlayerName(playerid), PlayerName(params[0]));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /seguro <PlayerID>");
	return 1;
}
zcmd(re, playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "No estás conectado");
	if(JustReported[playerid] > 0) return Message(playerid, COLOR_GRAD2, "¡Espere 2 Minutos para enviar otro reporte!");
	if(sscanf(params, "us[64]", params[0], params[1])) return Message(playerid, COLOR_GRAD2, "* Use: (/re)portar <playerid> <Razón>");
	if(IsPlayerConnected(params[0]))
	{
		new string[128];
		format(string, sizeof(string), "{FA4E60}Reporte: [ID:%d]%s, Reporta a: [ID:%d]%s", playerid, PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{FA4E60}Razon: %s", params[1]);
		ABroadCast(-1, string, 1);
		Message(playerid, 0x009D4FFF, "Tu reporte fue enviado con exito a los Administradores y sera procesado!");
		JustReported[playerid] = 2;
		PlayerNeedsHelp[playerid] = 1;
		SetTimerEx("ReportReset", 120000, false, "i", playerid);
	} else Message(playerid, COLOR_GRAD2, " Ese jugador está desconectado.");
	return 1;
}
zcmd(duda, playerid, params[])
{
	if(PlayerInfo[playerid][pBanDuda] != 0) return Message(playerid, COLOR_GRAD2, "¡No puedes utilizar este comando, estas baneado del sistema de dudas!");
	if(sscanf(params, "s[128]", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /duda <Pregunta>");
	if((!nod) && duda[playerid] == 0)
	{
		new string[128];
		duda[playerid] = 1;
		PlayerDuda[playerid] = 1;
		format(string, sizeof(string), "Pregunta de %s : %s (ID:%d) {FFF613}[/aduda] [/rduda] [/wtf]", PlayerName(playerid), params[0], playerid);
		ABroadCast(COLOR_ASKQ,string,1);
		Message(playerid, -1, "{FFF613}Pregunta enviada. Espere 1 minuto para volver a mandar otra duda.");
		SetTimerEx("EnableQuest", 60000, false, "i", playerid);
	} else Message(playerid, COLOR_GRAD2, "* Canal de duda desactivado o ya envio una duda, espere 1 Minuto.");
	return 1;
}
zcmd(solicitaradmin, playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "No estás conectado");
	if((!nod) && duda[playerid] == 0)
	{
		duda[playerid] = 1;
		SetTimerEx("EnableQuest", 60000, false, "i", playerid);
		new so[] = "{77F84B}>>{FFFFFF}Ayudante\n{DF2019}>>{FFFFFF}Moderador\n{7BAEFC}>>{FFFFFF}Administrador\n{D19B8D}>>{FFFFFF}Técnico"
		ShowPlayerDialog(playerid, DIALOG_SO, DIALOG_STYLE_LIST," {BAEC4B}> {FFFFFF}Panel de ayuda.", so, "Solicitar", "Cerrar");
	} else Message(playerid, COLOR_GRAD2, "* Espere 1 minuto para volver a usar este comando.");
	return 1;
}
zcmd(as, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /as <id>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador no está conectado.");
	if(PlayerSol[params[0]] == 1)
	{
		new string[128];
		format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}aceptó la solicitud de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		ABroadCast(-1, string, 1);
		format(string, sizeof(string), "{FFFFFF}* Administrador {B39CC8}%s {FFFFFF}ha aceptado su solicitud {B3D972}/w %d, {FFFFFF}espere un momento.", PlayerName(playerid), playerid);
		Message(params[0], -1, string);
		PlayerSol[params[0]] = 0;
	} else Message(playerid, COLOR_GRAD2, "El jugador no ha echo una solicitud.");
	return 1;
}
zcmd(respawngeneral, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 6) Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	else
		RespawnVehicles();
	return 1;
}
zcmd(sp, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "u", params[0])) return Message(playerid,COLOR_GRAD2, "Utilice: /specplayer <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid,COLOR_GRAD2,"Jugador no conectado");
	if (!IsPlayerInAnyVehicle(params[0]))
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectatePlayer(playerid, params[0]);
		SetPlayerInterior(playerid,GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		return 1;
	}
	else
	{
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(params[0]));
		SetPlayerInterior(playerid,GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		return 1;
	}
}
zcmd(spoff, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	TogglePlayerSpectating(playerid, 0);
	return SetTimerEx("PonerColor", 500, false, "i", playerid);
}
zcmd(darmoney, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[playerid][pAdminCP] >= 2012)
			{
				new string[128], year, month,day;    getdate(year, month, day);
				GivePlayerMoney(params[0], params[1]);
				format(string, 128, "Administrador %s ha dado %d$ a %s", PlayerName(playerid),params[1],PlayerName(params[0]));
				return A_Info(string);
			} else SendClientMessage(playerid, COLOR_GRAD2, "¡No autorizado!");
		} else SendClientMessage(playerid,  COLOR_GRAD2, "ID Inválida");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /givemoney [PlayerID] [$]");
	return 1;
}
zcmd(fijarmoney, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[playerid][pAdminCP] >= 2012)
			{
				new string[128], year, month,day;    getdate(year, month, day);
				ResetPlayerMoney(params[0]);
				GivePlayerMoney(params[0], params[1]);
				format(string, 128, "Administrador %s ha fijado el dinero de %s a %d$ ", PlayerName(playerid),PlayerName(params[0]),params[1]);
				return A_Info(string);
			}
			else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
		}
		else Message(playerid,  COLOR_GRAD2, "ID Inválida");
	}
	else Message(playerid, COLOR_GRAD2, "Utiliza: /money <PlayerID> <$>");
	return 1;
}
zcmd(sethp, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[playerid][pAdminCP] >= 2)
			{
				new string[80];
				SetHP(params[0],params[1]);
				format(string, 80, "Administrador %s ha establecido a %s %dHP", PlayerName(playerid),PlayerName(params[0]),params[1]);
				return A_Info(string);
			} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
		} else Message(playerid,  COLOR_GRAD2, "¡ID Inválida!");
	} else Message(playerid, COLOR_GRAD2, "Utiliza: /sethp <PlayerID> <HP>");
	return 1;
}
zcmd(setarmor, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[playerid][pAdminCP] >= 2)
			{
				new string[80];
				SetPlayerArmour(params[0],params[1]);
				format(string, 80, "Administrador %s ha establecido a %s %d de chaleco", PlayerName(playerid),PlayerName(params[0]),params[1]);
				return A_Info(string);
			} else SendClientMessage(playerid, COLOR_GRAD2, "¡No autorizado!");
		} else SendClientMessage(playerid,  COLOR_GRAD2, "ID Inválida");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Utiliza: /setarmor <PlayerID> <armor>");
	return 1;
}
zcmd(forcepayday, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	PayDay();
	return 1;
}

    // Inicio Comandos Especiales by KrozT
zcmd(lavar, playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, 1911.1886,-1784.2952,13.0801))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				for(new x = 0; x < sizeof(unwashable); x++)
				{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == unwashable[x][0])
					{
						SendClientMessage(playerid, 0xAA3333AA, "No puedes lavar este auto");
						return 1;
					}
				}
				if(GetPlayerMoney(playerid) > 4)
				{
					if(usingcarwash == -1)
					{
						GivePlayerMoney(playerid, -5);
						usingcarwash = playerid;
						Update3DTextLabelText(entrancetext, 0xB0171FFF, "Alguien está lavando el auto, espera a tu turno.");
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
							{
								TogglePlayerControllable(i, 0);
								SetPlayerCameraPos(i,1907.8804,-1790.0590,15);
								SetPlayerCameraLookAt(i,1911.0471,-1781.6868,13.3828);
							}
							if(GetPlayerSurfingVehicleID(i) == GetPlayerVehicleID(playerid))
							{
								SetPlayerPos(i,1906.9204,-1786.0435,13.5469);
								SetPlayerFacingAngle(i, 270);
							}
						}
						SetVehiclePos(GetPlayerVehicleID(playerid), 1911.1886, -1784.2952, 13.0801);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);
						MoveObject(entrancegate, 1911.21130371, -1780.68151855, 10.50000000, 1);
						SetTimerEx("Autocruise",3500,0,"ii",playerid, 1);
					}
					else
					{
						SendClientMessage(playerid, 0xAA3333AA, "Alguien está lavando el auto, espera a tu turno.");
					}
				}
				else
				{
					SendClientMessage(playerid, 0xAA3333AA, "No tienes suficiente dinero");
				}
			}
			else
			{
				SendClientMessage(playerid, 0xAA3333AA, "No eres el dueño de este vehiculo");
			}
		}
		else
		{
			SendClientMessage(playerid, 0xAA3333AA, "No estás en un auto");
		}
	}
	else
	{
		SendClientMessage(playerid, 0xAA3333AA, "No estás en la entrada del lavado de autos");
	}
	return 1;
}
zcmd(setstat, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		CheckAntiAbusos(playerid)
		if(PlayerInfo[playerid][pAdminCP] >= 2012)
		{
			if(!sscanf(params, "uii", params[0],params[1],params[2]))
			{
				new string[128];
				if(IsPlayerConnected(params[0]))
				{
					if(params[0] != INVALID_PLAYER_ID)
					{
						switch (params[1])
						{
							case 1:
							{
								PlayerInfo[params[0]][pLevel] = params[2];
								UpdatePlayerStat(params[0]);
								format(string, sizeof(string), "Admin %s ha establecido nivel %d a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 2:
							{
								PlayerInfo[params[0]][pAccount] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido %d$ en la cuenta bancaria de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 3:
							{
								PlayerInfo[params[0]][pPnumber] = params[2];
								format(string, sizeof(string), "Teléfono: #%d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
							}
							case 4:
							{
								PlayerInfo[params[0]][pExp] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d los puntos de respeto de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 5:
							{
								PlayerInfo[params[0]][pWalk] = params[2];
								format(string, sizeof(string), "Estilo andar: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
								SetPlayerWalkingStyle(params[0], PlayerInfo[params[0]][pWalk]);
							}
							case 6:
							{
								PlayerInfo[params[0]][pPhousekey] = params[2];
								format(string, sizeof(string), "Casa: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
							}
							case 7:
							{
								PlayerInfo[params[0]][pJob] = params[2];
								UpdatePlayerStat(params[0]);
								format(string, sizeof(string), "Trabajo: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
							}
							case 8:
							{
								switch(params[2])
								{
									case 9999:
									{
										PlayerInfo[params[0]][pTimeCar] = 0;
										PlayerInfo[params[0]][pPcarkey] = 9999;
										Message(playerid, COLOR_GRAD2, "Vehículo: 9999");
									}
									default:
									{
										PlayerInfo[params[0]][pTimeCar] = CarInfo[params[2]][cVehTime];
										PlayerInfo[params[0]][pPcarkey] = params[2];
										format(string, sizeof(string), "Vehículo: %d", params[2]);
										Message(playerid, COLOR_GRAD2, string);
									}
								}
							}
							case 9:
							{
								switch(params[2])
								{
									case 9999:
									{
										PlayerInfo[params[0]][pTimeCar2] = 0;
										PlayerInfo[params[0]][pPcarkey2] = 9999;
										Message(playerid, COLOR_GRAD2, "Vehículo2: 9999");
									}
									default:
									{
										PlayerInfo[params[0]][pTimeCar2] = CarInfo[params[2]][cVehTime];
										PlayerInfo[params[0]][pPcarkey2] = params[2];
										format(string, sizeof(string), "Vehículo2: %d", params[2]);
										Message(playerid, COLOR_GRAD2, string);
									}
								}
							}
							case 10:
							{
								PlayerInfo[params[0]][pCarPremium] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido el Auto Premium %d a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 11:
							{
								PlayerInfo[params[0]][pAge] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d la edad de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 12:
							{
								PlayerInfo[params[0]][pDEagle] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de Deagle de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
								SetPlayerStats(params[0]);
							}
							case 13:
							{
								PlayerInfo[params[0]][pShotgun] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de Shotgun de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
								SetPlayerStats(params[0]);
							}
							case 14:
							{
								PlayerInfo[params[0]][pMP5] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de MP5 de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
								SetPlayerStats(params[0]);
							}
							case 15:
							{
								PlayerInfo[params[0]][pAK47] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de AK47 de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
								SetPlayerStats(params[0]);
							}
							case 16:
							{
								PlayerInfo[params[0]][pM4] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de M4 de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
								SetPlayerStats(params[0]);
							}
							case 17:
							{
								PlayerInfo[params[0]][pSniper] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de Sniper de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
								SetPlayerStats(params[0]);
							}
							case 18:
							{
								PlayerInfo[params[0]][pSex] = params[2];
								format(string, sizeof(string), "Sexo: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
								UpdatePlayerStat(playerid);
							}
							case 19:
							{
								PlayerDrunk[playerid] = params[2];
								format(string, sizeof(string), "Drunk: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
								SetPlayerStats(params[0]);
							}
							case 20:
							{
								PlayerInfo[playerid][pRent] = params[2];
								format(string, sizeof(string), "Renta: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
							}
							case 21:
							{
								PlayerInfo[params[0]][pFStyle] = params[2];
								format(string, sizeof(string), "Tipo Lucha: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
							}
							case 22:
							{
								PlayerInfo[params[0]][pMats] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d materiales a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 23:
							{
								PlayerInfo[params[0]][pDrugs] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d gramos de drogas a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 24:
							{
								PlayerInfo[params[0]][pSpeed] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d gramos de speed a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 25:
							{
								PlayerInfo[params[0]][pEctasy] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d gramos de estasis a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 26:
							{
								PlayerInfo[params[0]][pRitalin] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d gramos de ritalin a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 27:
							{
								PlayerInfo[params[0]][pHeroina] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d gramos de heroina a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 28:
							{
								PlayerInfo[params[0]][pMarihuana] = params[2];
								format(string, sizeof(string), "Admin %s ha dado %d gramos de marihuana a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 29:
							{
								PlayerInfo[params[0]][pAdvertencias] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido en %d las advertencias de %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							case 30:
							{
								PlayerInfo[params[0]][pPbizzkey] = params[2];
								format(string, sizeof(string), "Negocio: %d", params[2]);
								Message(playerid, COLOR_GRAD2, string);
							}
							case 31:
							{
								PlayerInfo[params[0]][pCarPremium2] = params[2];
								format(string, sizeof(string), "Admin %s ha establecido el Auto Premium2 %d a %s", PlayerName(playerid), params[2], PlayerName(params[0]));
								A_Info(string);
							}
							default: Message(playerid, COLOR_GRAD2, "¡Código inválido!");
						} 
					}
				}
				else Message(playerid, COLOR_GRAD2, "¡ID Inválida!");
			}
			else
			{
				Message(playerid, COLOR_GRAD1, "Utiliza: /setstat <PlayerID> <código> <x>");
				Message(playerid, COLOR_GRAD4, "|1.Nivel - 2.Cuenta Bancaria - 3.Teléfono - 4.PuntosRespeto 5.Estilo");
				Message(playerid, COLOR_GRAD4, "|6.Casa - 7.Trabajo - 8.Vehículo - 9. Vehículo2 - 10.AutoPremium - 11.Edad");
				Message(playerid, COLOR_GRAD4, "|12.Deagle - 13.Shotgun - 14.MP5 - 15.ak47 - 16.M4 - 17.Sniper - 18.Sexo");
				Message(playerid, COLOR_GRAD4, "|19.Drunk - 20.Rent - 21.Lucha - 22.Materiales - 23.Drogas - 24.Speed");
				return Message(playerid, COLOR_GRAD4, "|25.Extasis - 26.Ritalin - 27.Heroina - 28.Marihuana - 29.Advertencias - 30.Negocio - 31.Autopremium2");
			}
		} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	}
	return 1;
}
zcmd(setstuff, playerid, params[])
{
	CheckAntiAbusos(playerid)
	if(PlayerInfo[playerid][pAdminCP] >= 2012)
	{
		if(!sscanf(params, "ii", params[0], params[1]))
		{
			new string[128];
			switch(params[0])
			{
				case 1:
				{
					Jackpot = params[1];
					format(string, sizeof(string), "Admin %s ha establecido el Jackpot en %d", PlayerName(playerid), params[1]);
					A_Info(string);
					SaveStuff();
				}
				case 2:
				{
					Tax = params[1];
					format(string, sizeof(string), "Admin %s ha establecido el Fondo del Estado en %d$", PlayerName(playerid), params[1]);
					A_Info(string);
					SaveStuff();
				}
				case 3:
				{
					TaxValue = params[1];
					format(string, sizeof(string), "Admin %s ha establecido el Impuesto en %d$", PlayerName(playerid), params[1]);
					A_Info(string);
					SaveStuff();
				}
				case 4:
				{
					Blood = params[1];
					format(string, sizeof(string), "Admin %s ha establecido la sangre disponible en %d", PlayerName(playerid), params[1]);
					A_Info(string);
					SaveStuff();
				}
				default: Message(playerid, COLOR_GRAD2, "¡Código inválido!");
			}
		}
		else
		{
			Message(playerid, COLOR_GRAD2, "Utiliza: /setstuff <Item> <Cantidad>");
			Message(playerid, COLOR_GRAD2, "1.Jackpot - 2.Fondos - 3.Impuestos - 4.Sangre");
		}
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(setname, playerid, params[])
{
	new string[128];
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "No estás conectado");
	if(PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "us[128]", params[0], params[1])) return Message(playerid, COLOR_GRAD2, "Utilice: /setname <PlayerID> <Nuevo_Nombre>");
	if(params[0] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "%s ha cambiado el nombre de %s a %s.",PlayerName(playerid),PlayerName(params[0]), params[1]);
		A_Info(string);
		Message(params[0], COLOR_RED2, string);
		SetPlayerName(params[0], params[1]);
	} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	return 1;
}
zcmd(edit, playerid, params[]){
	new string[128], idcar = GetPlayerVehicleID(playerid), item[32];
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "s[64]i", item, params[1])){
		for(new i = 0; i < sizeof(HouseInfo); i++){
			if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez])){
				if(params[1] > 0){
					if(strcmp(item,"nivel",true) == 0){
						HouseInfo[i][hLevel] = params[1];
					}
					else if(strcmp(item,"precio",true) == 0){
						HouseInfo[i][hValue] =  params[1];
					}
					else if(strcmp(item,"cuartos",true) == 0){
						HouseInfo[i][hRooms] =  params[1];
					}
					OnPropTextdrawUpdate(i);
					format(string, sizeof(string), "CasaID: %d | Item: %s | Valor: %d", i, item, params[1]);
					Message(playerid, COLOR_GRAD2, string);
				}
			}
		}
		for(new b = 0; b < sizeof(BizzInfo); b++){
			if(PlayerToPoint(3, playerid,BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez])){
				if(params[1] > 0){
					if(strcmp(item,"nivel",true) == 0){
						BizzInfo[b][bLevelNeeded] = params[1];
					}
					else if(strcmp(item,"precio",true) == 0){
						BizzInfo[b][bBuyPrice] = params[1];
					}
					else if(strcmp(item,"ganancias",true) == 0){
						BizzInfo[b][bTill] = params[1];
					}
					OnBizzTextdrawUpdate(b);
					format(string, sizeof(string), "NegocioID: %d | Item: %s | Valor: %d", b, item, params[1]);
					Message(playerid, COLOR_GRAD2, string);
				}
			}
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "¡No es un vehículo de venta!");
			if(params[1] >= 0){
				if(strcmp(item,"precio",true) == 0){
					CarInfo[idcar][cValue] = params[1];
				}
				else if(strcmp(item,"venta",true) == 0){
					CarInfo[idcar][cOwned] = params[1];
				}
				else if(strcmp(item,"seguro",true) == 0){
					CarInfo[idcar][cLock] = params[1];
				}
				else if(strcmp(item,"multa",true) == 0){
					CarInfo[idcar][cMulta] = params[1];
				}
				else if(strcmp(item,"embargos",true) == 0){
					CarInfo[idcar][cEmbargo] = params[1];
				}
				format(string, sizeof(string), "CarID: %d | Item: %s | Valor: %d", idcar, item, params[1]);
				Message(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else{
		Message(playerid, COLOR_GRAD2, "Utilice: /edit <Item> <Valor>");
		Message(playerid, COLOR_GRAD3, "Items Casas: Nivel, Precio, Cuartos");
		Message(playerid, COLOR_GRAD3, "Items Negocios: Nivel, Precio, Ganancias");
		Message(playerid, COLOR_GRAD3, "Items Vehículos: Precio, Venta, Seguro, Multa, Embargos");
	}
	return 1;
}
zcmd(editcar, playerid, params[]){
	new string[128], idcar = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	if(!IsAnOwnableCar(idcar)) return Message(playerid, COLOR_GRAD2, "¡No es un vehículo de venta!");
	if(!sscanf(params, "s[32]", params[0]))
	{
		if(strfind(params[0], "_" , true) != -1) return Message(playerid, COLOR_GRAD2, "Ejemplo de Uso: /editcar Angie Torres");
		strmid(CarInfo[idcar][cOwner], params[0], 0, strlen(params[0]), 32);
		format(string, sizeof(string), "CarID: %d | Nuevo Dueño: %s", idcar, params[0]);
		Message(playerid, COLOR_GRAD2, string);
		return 1;
	} else return Message(playerid, COLOR_GRAD2, "Utilice: /editcar <Nuevo Dueño>");
}

zcmd(check,playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "u", params[0])){
		if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		ShowStats(playerid,params[0]);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /check <ID>");
	return 1;
}
zcmd(verdinero, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /checkmoney <PlayerID>");
	format(string, sizeof(string), "%s - En Mano: %d", PlayerName(params[0]), GetPlayerMoney(params[0]));
	Message(playerid, COLOR_GRAD2, string);
	return 1;
}
zcmd(verjail, playerid, params[]){
	new string[80];
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /checkjail <PlayerID>");
	format(string, sizeof(string), "%s - %d segundos restantes", PlayerName(params[0]), PlayerInfo[params[0]][pJailTime]);
	Message(playerid, COLOR_GRAD2, string);
	return 1;
}
zcmd(setint, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ud", params[0],params[1])){
		if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		new string[64];
		SetPlayerInterior(params[0], params[1]);
		format(string, sizeof(string), "- Interior de %s es ahora %d", PlayerName(params[0]), params[1]);   Message(playerid, COLOR_GRAD2, string);
		return Message(params[0], COLOR_GRAD2, string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /setint <PlayerID> <Interior>");
	return 1;
}
zcmd(setvw, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ud", params[0],params[1])){
		if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		new string[64];
		SetPlayerVirtualWorld(params[0], params[1]);
		format(string, sizeof(string), "- VirtualWorld de %s es ahora %d", PlayerName(params[0]), params[1]);   Message(playerid, COLOR_GRAD2, string);
		return Message(params[0], COLOR_GRAD2, string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /setvw <PlayerID> <VirtualWorld>");
	return 1;
}
zcmd(silenciar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0])){
		if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		new string[64];
		if(Muted[params[0]] == 0){
			Muted[params[0]] = 1;
			format(string, sizeof(string), "Admin %s ha silenciado al jugador %s",PlayerName(playerid), PlayerName(params[0]));
			Message(params[0],COLOR_RED2,string);
			return A_Info(string);
		}
		else{
			Muted[params[0]] = 0;
			format(string, sizeof(string), "Admin %s ha desilenciado al jugador %s",PlayerName(playerid), PlayerName(params[0]));
			Message(params[0],COLOR_RED2,string);
			return A_Info(string);
		}
	} else Message(playerid, COLOR_GRAD2, "Utilice: /silenciar <PlayerID>");
	return 1;
}
zcmd(congelar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0])){
		if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		new string[64];
		TogglePlayerControllable(params[0], 0);
		Freezed[params[0]] = 1;
		format(string, sizeof(string), "%s ha congelado a %s",PlayerName(playerid), PlayerName(params[0]));
		Message(params[0], COLOR_RED2, string);
		return A_Info(string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /congelar <PlayerID>");
	return 1;
}
zcmd(descongelar, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0]))
	{
		if(params[0] == INVALID_PLAYER_ID) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		new string[64];
		TogglePlayerControllable(params[0], 1);
		Freezed[params[0]] = 0;
		format(string, sizeof(string), "%s ha descongelado a %s",PlayerName(playerid), PlayerName(params[0]));
		Message(params[0], COLOR_RED2, string);
		return A_Info(string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /descongelar <PlayerID>");
	return 1;
}
zcmd(ir, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "u", params[0])){
		if(params[0] != INVALID_PLAYER_ID){
			new Float:p_x,Float:p_y,Float:p_z;
			GetPlayerPos(params[0], p_x,p_y,p_z);
			new interior = GetPlayerInterior(params[0]);
			SetPosEx(playerid, p_x,p_y,p_z,0,interior,0);
			return Message(playerid, COLOR_GRAD3, "¡Teleportado!");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /ir <PlayerID>");
	return 1;
}
zcmd(activar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!ActiveTeleport[playerid]){
		ActiveTeleport[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "¡Teleport Activado!");
	}
	else if(ActiveTeleport[playerid]){
		ActiveTeleport[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "¡Teleport Desactivado!");
	}
	return 1;
}
zcmd(traer, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "u", params[0])){
		if(params[0] != INVALID_PLAYER_ID){
			new Float:p_x,Float:p_y,Float:p_z;
			GetPlayerPos(playerid, p_x,p_y,p_z);
			new interior = GetPlayerInterior(playerid);
			SetPosEx(params[0], p_x,p_y,p_z,0,interior,0);
			return Message(params[0], COLOR_WHITE, "¡Teleportado!");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /traer <PlayerID>");
	return 1;
}
zcmd(verarmas, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0])){
		if(params[0] != INVALID_PLAYER_ID){
			new x,xweapon, xbalas, string[80],NombreArma[24];
			format(string, sizeof(string), "Armas de %s:", PlayerName(params[0])); Message(playerid, COLOR_GRAD1, string);

			for (new slot=0; slot<14; slot++){
				GetPlayerWeaponData(params[0], slot, xweapon, xbalas);
				if(xweapon != 0)
				{
					GetWeaponName(xweapon,NombreArma,sizeof(NombreArma));
					format(string, sizeof(string), "%s Balas: [%d]",NombreArma, xbalas);
					x++;
					Message(playerid, COLOR_GRAD1, string);
					if(x >= 5)
					{
						SendClientMessage(playerid, COLOR_GRAD1, string);
						x = 0;
						format(string, sizeof(string), "");
					} else format(string, sizeof(string), "%s,  ", string);
				}
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
		return 1;
	} else Message(playerid, COLOR_GRAD2, "Utilice: /checkwep <PlayerID>");
	return 1;
}
zcmd(alimpiar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	CleanScreen();
	new string[48];
	format(string, sizeof(string), "Limpieza de chat por %s.", PlayerName(playerid));
	return GlobalMsg(COLOR_GREEN,string);
}
zcmd(bigears, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if (!BigEar[playerid]){
		BigEar[playerid] = 1;
		return Message(playerid, COLOR_GRAD2, "BigEars Mode On");
	}
	else{
		BigEar[playerid] = 0;
		return Message(playerid, COLOR_GRAD2, "BigEars Mode Off");
	}
}
zcmd(slap, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0])){
		new Float:slx, Float:sly, Float:slz, string[52];
		if(params[0] != INVALID_PLAYER_ID){
			GetPlayerPos(params[0], slx, sly, slz);
			SetPlayerPos(params[0], slx, sly, slz+5);
			PlayerPlaySound(params[0], 1130, slx, sly, slz+5);
			format(string, sizeof(string), "%s golpeó a %s",PlayerName(playerid),PlayerName(params[0]));
			A_Info(string);
			return Message(params[0], COLOR_RED2, string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /slap <PlayerID>");
	return 1;
}
zcmd(setskin, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ui", params[0], params[1])){
		if(params[0] != INVALID_PLAYER_ID){
			if(params[1] > 299 || params[1] < 0) return Message(playerid, COLOR_GREY, "Skin ID incorrecto (0-299)");
			new string[64];
			PlayerInfo[params[0]][pChar] = params[1];
			SetPlayerSkin(params[0], PlayerInfo[params[0]][pChar]);
			format(string, sizeof(string), "* %s cambió la skin de %s", PlayerName(playerid), PlayerName(params[0]));
			MessageEx(playerid, params[0], COLOR_WHITE, string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /setskin <PlayerID> <SkinID>");
	return 1;
}
zcmd(vehslap, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "ui", params[0], params[1])){
		if(params[0] != INVALID_PLAYER_ID){
			new Float:slx, Float:sly, Float:slz, string[64];
			GetVehiclePos(GetPlayerVehicleID(params[0]), slx, sly, slz);
			SetVehiclePos(GetPlayerVehicleID(params[0]), slx, sly, slz+params[1]);
			PlayerPlaySound(params[0], 1130, slx, sly, slz+params[1]);
			format(string, sizeof(string), "%s golpeó el vehículo de %s", PlayerName(playerid), PlayerName(params[0])); A_Info(string);
			return Message(params[0], COLOR_RED2, string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /vehslap <PlayerID> <Altitud>");
	return 1;
}
zcmd(irmarca, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	}
	else
	{
		SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	}
	return Message(playerid, COLOR_GRAD1, "¡Teleportado!");
}
zcmd(marcar, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	return Message(playerid, COLOR_GRAD1, "¡Posición guardada!");
}
zcmd(getcar, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "i", params[0]))
	{
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		return SetVehiclePos(params[0],plocx,plocy+4, plocz);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /traercar <VehicleID>");
	return 1;
}
zcmd(cambiarmiskin, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "ui", params[0], params[1])){
		if(params[0] != INVALID_PLAYER_ID){
			if(params[1] > 299 || params[1] < 0) return Message(playerid, COLOR_GREY, "Skin ID incorrecto (0-299)");
			new string[64];
			PlayerInfo[params[0]][pChar] = params[1];
			SetPlayerSkin(params[0], PlayerInfo[params[0]][pChar]);
			format(string, sizeof(string), "* %s cambió la skin de %s", PlayerName(playerid), PlayerName(params[0]));
			MessageEx(playerid, params[0], COLOR_WHITE, string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /setskin <PlayerID> <SkinID>");
	return 1;
}
zcmd(traercarro, playerid, params[])
{
	if(PlayerInfo[playerid][pDonateT] >= 1){
		new Float:posx,Float:posy,Float:posz;
		GetPlayerPos(playerid, posx, posy, posz);
		return SetVehiclePos(PlayerInfo[playerid][pCarPremium],posx,posy+4,posz);
	} else Message(playerid, COLOR_GRAD2, "No eres premium.");
	return 1;
}
zcmd(traercarro2, playerid, params[])
{
	if(PlayerInfo[playerid][pDonateT] >= 2){
		new Float:posx,Float:posy,Float:posz;
		GetPlayerPos(playerid, posx, posy, posz);
		return SetVehiclePos(PlayerInfo[playerid][pCarPremium2],posx,posy+4,posz);
	} else Message(playerid, COLOR_GRAD2, "No eres premium de nivel 2.");
	return 1;
}
zcmd(gotocar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 3) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "i", params[0])){
		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(params[0], cwx2, cwy2, cwz2);
		return SetPlayerPos(playerid, cwx2, cwy2, cwz2);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /ircar <VehicleID>");
	return 1;
}
zcmd(fixveh, playerid, params[]){
	CheckAntiAbusos(playerid)
	if(PlayerInfo[playerid][pAdminCP] > 4)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
		SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
		RepairVehicle(GetPlayerVehicleID(playerid));
		Message(playerid, COLOR_GRAD2, "¡Vehículo fixeado!");
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(fixpremium, playerid, params[]){
	if(PlayerInfo[playerid][pDonateT] == 0) return Message(playerid, COLOR_GRAD2, "No eres premium");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
	SetVehicleHealth(GetPlayerVehicleID(playerid), 500.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	return Message(playerid, COLOR_GREY, "Vehículo reparado.");
}
zcmd(explode, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 5) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0])){
		new string[64];
		new Float:boomx, Float:boomy, Float:boomz;
		GetPlayerPos(params[0],boomx, boomy, boomz);
		CreateExplosion(boomx, boomy , boomz, 7, 10);
		format(string, sizeof(string), "%s fue explotado por %s",PlayerName(params[0]),PlayerName(playerid)); A_Info(string);
		return Message(params[0], COLOR_RED2, string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /explode <ID>");
	return 1;
}
zcmd(mascara, playerid, params[]){
	new string[90];
	if(PlayerInfo[playerid][pMask] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes máscara!");
	if(Maskuse[playerid] == 0){
		Loop(i, MAX_PLAYERS){
			if(IsPlayerConnected(i)){
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		}
		Maskuse[playerid] = 1;
		format(string, sizeof(string), "* %s se pone una máscara.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else{
		Loop(i, MAX_PLAYERS){
			if(IsPlayerConnected(i)){
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
		Maskuse[playerid] = 0;
		format(string, sizeof(string), "* %s se quita la máscara de su rostro.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}
zcmd(weather, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 6) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "i", params[0])){
		new string[64];
		SetWeather(params[0]);
		DefaultWeather = params[0];
		format(string, 64, "%s cambió el clima global a el ID %d", PlayerName(playerid),params[0]);
		return A_Info(string);

	} else Message(playerid, COLOR_GRAD2, "Utilice: /weatherall <WeatherID>");
	return 1;
}
zcmd(tod, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 6) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "i", params[0])){
		new string[48];
		SetWorldTime(params[0]);
		format(string, 256, "%s cambió la hora a %d", PlayerName(playerid), params[0]);
		return A_Info(string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /tod <Time> No usar este comando sin razón.");
	return 1;
}
zcmd(givegun, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 5) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "uii", params[0],params[1],params[2])){
		if(params[1] < 1 || params[1] > 46) return Message(playerid, COLOR_GRAD2, "Error ID. (1-46)");
		if(params[2] > 9999) return Message(playerid, COLOR_GRAD2, "Error Ammo. (Máx: 9999)");
		new string[128];
		SafeGivePlayerWeapon(params[0], params[1], params[2]);
		format(string, 128, "Administrador %s dió a %s Arma: %d Balas: %d", PlayerName(playerid), PlayerName(params[0]),params[1],params[2]);
		return A_Info(string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /givegun <PlayerID> <WeaponID> <Ammo>");
	return 1;
}
zcmd(teleports, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	Message(playerid, 0xFF6464FF, "-= Teleports =-");
	Message(playerid, COLOR_GRAD2, "/ls /sf /lv /conse /conse2 /conse3 /mandarls /hospital /banco /taller");
	return 1;
}
zcmd(ah, playerid, params[]){
	CheckAntiAbusos(playerid)
	if(Admin(1,playerid)){
		Message(playerid, 0x00FF00FF, "-= Comandos Nivel 1 =-");
		Message(playerid, COLOR_GRAD2, "/check /setint /setvw  /silenciar /kick /jail /verarmas /enmascarados /advertir /kickname");
		Message(playerid, COLOR_GRAD2, "/verdinero /specplayer /specoff /congelar /descongelar /kickafk /verjail /teleports /astrips");
	}
	if(Admin(2,playerid)){
		Message(playerid, 0x93FF93FF, "-= Comandos Nivel 2 =-");
		Message(playerid, COLOR_GRAD2, "/alimpiar /desarmar /rtc /slap /setskin /rtcar /carid /sethp /setarmor");
	}
	if(Admin(3,playerid)){
		Message(playerid, 0xFFA579FF, "-= Comandos Nivel 3 =-");
		Message(playerid, COLOR_GRAD2, "/marcar /irmarca /getcar /gotocar /qb /qbs /bigears /desveh /setvwcar");
	}
	if(Admin(4,playerid)){
		Message(playerid, 0xFF8040FF, "-= Comandos Nivel 4 =-");
		Message(playerid, COLOR_GRAD2, "/vehslap /rac /ban /banduda /unbanduda /rsinuso /entercar /aengineon /aooc /quitardnifalso");
	}
	if(Admin(5,playerid)){
		Message(playerid, 0xFFA579FF, "-= Comandos Nivel 5 =-");
		Message(playerid, COLOR_GRAD2, "/explode /fuelcars /givegun /fixveh /conse /healcar /getip /carsno");
	}
	if(Admin(6,playerid)){
		Message(playerid, 0xFF8040FF, "-= Comandos Nivel 6 =-");
		Message(playerid, COLOR_GRAD2, "/rcn /noduda /weather /tod /richs /loteria /changeit /respawngeneral /licencia");
	}
	if(Admin(2012,playerid)){
		Message(playerid, 0xFF4A4AFF, "-= Comandos Nivel 2012 =-");
		Message(playerid, COLOR_GRAD2, "/setstat /venderauto /asellhouse /asellbizz /darmoney /setstuff /editcar");
		Message(playerid, COLOR_GRAD2, "/unban /unbanip /house /houseint /evento /bizz /fijarmoney /liberar /darlider");
	}
	if(Admin(2013,playerid)){
		Message(playerid, 0xFF4A4AFF, "-= Comandos Nivel 2013 =-");
		Message(playerid, COLOR_GRAD2, "/daradmin /darhelp /noac /noooc /forcepayday /setpayday /searchcar /edit /mps");
	}
	if(Admin(2014,playerid)){
		Message(playerid, 0xFF4A4AFF, "-= Comandos Dueño - Técnico =-");
		Message(playerid, COLOR_GRAD2, "/editadmin /banoff /bizzname /hacermodfacc /darvip /update /setname /cuentaoff");
		Message(playerid, COLOR_GRAD2, "Solo Técnicos: /npcjoin /npckick /npcload /houseentrance /houseexit");
	}
	return 1;
}
zcmd(ban, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GREY, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(DetectarSPAM(params[1])) return AccionSPAM(playerid, params[1]);
	if(!sscanf(params, "us[64]", params[0], params[1])){
		if(IsPlayerConnected(params[0])){
			new string[228];
			if(PlayerInfo[params[0]][pAdminCP] == 2014){
				format(string, sizeof(string), "ATENCIÓN: %s intentó banear a %s", PlayerName(playerid), PlayerName(params[0]));
				A_Info(string);
				return 1;
			}
			else{
				if(IsPlayerNPC(params[0])) return Message(playerid, COLOR_GRAD2, "No puedes banear a un NPC.");
				else{
					new year, month,day;    getdate(year, month, day);
					format(string, sizeof(string), "%s ha baneado a %s, razón: %s (%d/%d/%d)", PlayerName(playerid), PlayerName(params[0]), params[1],day,month,year);
					Message(params[0], COLOR_RED2, string);
					A_Info(string);
					BanLog(string);
					PlayerInfo[params[0]][pLocked] = 8;
					Message(params[0], COLOR_WHITE, "-----> Atención <------");
					Message(params[0], COLOR_GRAD2, "Fuiste baneado, toma una ScreenShot ahora mismo oprimiendo F8 asi podras apelar tu desban via foro,");
					Message(params[0], COLOR_GRAD2, "o contacta con un administrador via msn. Si eres culpable, aceptalo y escarmienta.");
					Ban(params[0]);
				}
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /ban <PlayerID> <Razón>");
	return 1;
}
zcmd(banoff, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "s[32]", params[0])){
		if(strfind(params[0], "_" , true) != -1){
			new string3[64], string[128];
			format(string3,sizeof(string3),"users/%s.ini",params[0]);
			if(INI_Exist(string3)){
				new INI:ini = INI_Open(string3);
				INI_WriteInt(ini, "Locked", 8);
				INI_Close(ini);
				format(string, sizeof(string), "%s le ha metido ban a %s",PlayerName(playerid), params[0]);
				A_Info(string);
			} else Message(playerid, COLOR_GRAD2, "¡Esa cuenta no existe!");
		} else Message(playerid, COLOR_GRAD2, "Ejemplo de Uso: /banoff Juan_Perez")
	} else Message(playerid, COLOR_GRAD2, "Utilice: /banoff <Nombre_Jugador>");
	return 1;
}
zcmd(banduda, playerid, params[]){
	if (PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GREY, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "us[64]", params[0], params[1])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			format(string, sizeof(string), "%s ha baneado del sistema de ayuda a %s, razón: %s", PlayerName(playerid), PlayerName(params[0]), params[1]);
			A_Info(string);
			PlayerInfo[params[0]][pBanDuda] = 1;
			Message(params[0], COLOR_WHITE, "  Atención<------");
			Message(params[0], COLOR_GRAD2, "*Usted ha sido bloqueado de usar el sistema de ayuda - Contacte con un Administrador.");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /banduda <PlayerID> <Razón>");
	return 1;
}
zcmd(unbanduda, playerid, params[]){
	if (PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GREY, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "u", params[0])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			format(string, sizeof(string), "%s ha desbaneado del sistema de ayuda a %s", PlayerName(playerid), PlayerName(params[0]));
			A_Info(string);
			PlayerInfo[params[0]][pBanDuda] = 0;
			Message(params[0], -1, "{00DC84}------>{FFFFFF}Atención{00DC84}<------");
			Message(params[0], COLOR_GRAD2, "*Usted ha sido desbloqueado de usar el sistema de ayuda.");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /unbanduda <PlayerID>");
	return 1;
}
zcmd(advertir, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params,"us[128]", params[0],params[1])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			PlayerInfo[params[0]][pAdvertencias] += 1;
			format(string, sizeof(string), "%s ha dado una advertencia a %s, razón: %s", PlayerName(playerid),PlayerName(params[0]),params[1]);
			Message(params[0], COLOR_RED2, string);
			A_Info(string);
			BanLog(string);
			if(PlayerInfo[params[0]][pAdvertencias] >= 3)
			{
				PlayerInfo[params[0]][pLocked] = 8;
				format(string, sizeof(string), "%s fue baneado automaticamente por tener mas de 2 advertencias", PlayerName(params[0]));
				A_Info(string);
				Message(params[0], COLOR_WHITE, "-----> Atención <------");
				Message(params[0], COLOR_GRAD2, "Fuiste baneado automaticamente del servidor por acumular mas de 2 advertencias, toma una ScreenShot");
				Message(params[0], COLOR_GRAD2, "ahora mismo oprimiendo F8 asi podras apelar tu desban via foro o contacta con un administrador via msn.");
				Ban(params[0]);
			}
			else
			{
				Message(params[0], COLOR_WHITE, "* Has recibido una advertencia y has sido kikeado, cuando llegues a 3 advertencias seras baneado.");
				Kick(params[0]);
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /advertir <PlayerID> <Razon>");
	return 1;
}
zcmd(advertencia, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params,"us[164]", params[0],params[1])){
		if(IsPlayerConnected(params[0])){
			new string[164];
			if(PlayerInfo[params[0]][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡Ese jugador no pertenece al staff!");
			PlayerInfo[params[0]][pAdminAdver] += 1;
			format(string, sizeof(string), "%s ha dado una advertencia administrativa a %s, razón: %s", PlayerName(playerid),PlayerName(params[0]),params[1]);
			A_Info(string);
			if(PlayerInfo[params[0]][pAdminAdver] >= 3)
			{
				PlayerInfo[params[0]][pAdminCP] = 0;
				format(string, sizeof(string), "%s fue expulsado automaticamente del staff por acumular 3 advertencias", PlayerName(params[0]));
				Message(params[0], COLOR_RED2, string);
				A_Info(string);
				PlayerInfo[params[0]][pAdminAdver] = 0;
			}
			else{
				format(string, sizeof(string), "* Has recibido una advertencia administrativa por parte de %s", PlayerName(playerid));
				Message(params[0], COLOR_WHITE, string);
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /advertencia <AdminID> <Razon>");
	return 1;
}
zcmd(checkadver, playerid, params[0])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "u",params[0])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			if(PlayerInfo[params[0]][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡Ese usuario no pertenece al staff!");
			format(string, sizeof(string), "Administrador: %s   -   Advertencias: %d", PlayerName(params[0]), PlayerInfo[params[0]][pAdminAdver]);
			Message(playerid, COLOR_GRAD4, string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /checkadver <PlayerID>");
	return 1;
}
zcmd(editadver, playerid, params[0])
{
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "ud", params[0],params[1])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			PlayerInfo[params[0]][pAdminAdver] = params[1];
			format(string, sizeof(string), "%s ha establecido en %d las advertencias administrativas de %s", PlayerName(playerid),params[1],PlayerName(params[0]));
			A_Info(string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /editadver <PlayerID> <Advertencias>");
	return 1;
}
zcmd(noduda, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 6) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if (!nod){
		nod = 1;
		GlobalMsg(COLOR_YELLOW2,"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
		GlobalMsg(COLOR_RED,"  *** Canal de Dudas Desactivado ***  ");
		return GlobalMsg(COLOR_YELLOW2,"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
	}
	else{
		nod = 0;
		GlobalMsg(COLOR_YELLOW2,"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
		GlobalMsg(COLOR_GREEN,"  *** Canal de Dudas Activado (/duda) ***   ");
		GlobalMsg(COLOR_NEWS,"  ... No Flood & No Spam ... ");
		return GlobalMsg(COLOR_YELLOW2,"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
	}
}
zcmd(scripteron, playerid, params[])	{
	new string_ocupado[100];
	if(PlayerInfo[playerid][pAdminCP] > 0){
		if(Scripter_Ocupado[playerid] == 0){
			Scripter_Ocupado[playerid] = 1;
			AntiAbusos[playerid] = 1;
			SetPlayerColor(playerid,ROJO_ADMIN);
			format(string_ocupado, sizeof(string_ocupado), "{FFFFFF}[ADM]{006FFF} El Scripter %s [ID:%d]{FFFFFF} está revisando el servidor.", PlayerName(playerid), playerid);
			SendClientMessageToAll(-1, string_ocupado);
			return 1;
		}
		else
		{
			Scripter_Ocupado[playerid] = 0;
			AntiAbusos[playerid] = 0;
			format(string_ocupado, sizeof(string_ocupado), "{FFFFFF}[ADM]{BF0000} El Scripter %s [ID:%d]{FFFFFF} terminó de revisar el servidor.", PlayerName(playerid), playerid);
			SendClientMessageToAll(-1, string_ocupado);
			return 1;
		}
	} else SendClientMessage(playerid, COLOR_GRAD2,"No estás autorizado para usar esto.");
	return 1;
}

zcmd(don, playerid, params[]){
	if (PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!")
		AntiAbusos[playerid] = 1;
	Message(playerid, COLOR_GRAD2, "Ahora ya podras usar todos los comandos administrativos");
	return 1;
}

zcmd(jetpack, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!")
	CheckAntiAbusos(playerid)
	if(JetPack[playerid] == 0){
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		JetPack[playerid] = 1;
		Message(playerid, COLOR_GREEN, "¡Se te ha dado un Jetpack, no abuses de él! Recuerda utilizar /jetpack de nuevo para borrarlo de forma segura.");
	}else{
		ClearAnimations(playerid);
		JetPack[playerid] = 0;
		Message(playerid, COLOR_GREEN, "¡Ya tenías un Jetpack, así que se ha retirado!");
	}
	return 1;
}

zcmd(adminduty, playerid, params[]){
	if (PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!")
		new string[64];
	if(AdminDuty[playerid] == 0){
		{
			ShowPlayerDialog(playerid,CREDITOS,DIALOG_STYLE_MSGBOX,"{006FFF}Sistema Anti AA","\n\
				{FFFFFF}Sistema anti AA Recuerde revisar el /reglasadmin\n\
				{006FFF}Saludos - Encargados de Staff","Aceptar","");
		}
		AdminDuty[playerid] = 1; HidePM[playerid] = 0;
		SetPlayerArmour(playerid, 999);	SetHP(playerid, 100);
		AntiAbusos[playerid] = 1; AdminChat[playerid] = 0;
		if(PlayerInfo[playerid][pAdminCP] == 1)
		{
			SetPlayerColor(playerid, ROSADO_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 2)
		{
			SetPlayerColor(playerid,CELESTE_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 3)
		{
			SetPlayerColor(playerid,AMARILLO_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 4)
		{
			SetPlayerColor(playerid,MORADO_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 5)
		{
			SetPlayerColor(playerid,MORADO_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 6)
		{
			SetPlayerColor(playerid,VERDE_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 2012)
		{
			SetPlayerColor(playerid,COLOR_ORANGE);
		}
		if(PlayerInfo[playerid][pAdminCP] == 2013)
		{
			SetPlayerColor(playerid,ROJO_ADMIN);
		}
		if(PlayerInfo[playerid][pAdminCP] == 2014)
		{
			SetPlayerColor(playerid,ROJO_ADMIN);
		}
		format(string, sizeof(string), "{FFFFFF}[ADM] {006FFF}%s está conectado. (/w %d)", PlayerName(playerid), playerid); BroadCast(0xFFFFA4FF,string);
		return 1;
	}
	else
	{
		AdminDuty[playerid] = 0;    HidePM[playerid] = 1;
		AntiAbusos[playerid] = 0;   AdminChat[playerid] = 1;
		SetPlayerColor(playerid, COLOR_GRAD1);
		format(string, sizeof(string), "{FFFFFF}[ADM]{BF0000} %s está fuera de servicio.", PlayerName(playerid), playerid); BroadCast(0xBF0000FF,string);
		return 1;
	}
}
zcmd(administradores, playerid, params[]){
	Message(playerid, 0xFF6464FF, "|___ Hermandad Zero RolePlay ___|");
	Message(playerid, COLOR_GRAD2, "La lista de Administradores de Hermandad Zero RolePlay no se da a conocer por asuntos internos del servidor.");
	Message(playerid, COLOR_GRAD2, "Use /duda para comunicarse con ellos y espere que le respondan.");
	Message(playerid, COLOR_GRAD2, "Use /re para reportar un jugador y espere que un administrador le responda");
	return 1;
}
zcmd(admins, playerid, params[]){
	Message(playerid, COLOR_GREEN, "| Staff de Hermandad Zero RP |");
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i)){
			if(PlayerInfo[i][pAdminCP] >= 1 && PlayerInfo[i][pAdminCP] <= 2013){
				new string[128],admtext[24];
				switch(PlayerInfo[i][pAdminCP]){
					case 1:		admtext = "Ayudante";
					case 2:     admtext = "Moderador";
					case 3:     admtext = "Admin Junior";
					case 4:     admtext = "Administrador";
					case 5:     admtext = "Admin Superior";
					case 6:     admtext = "Admin Lider";
					case 2012:  admtext = "Administrador General";
					case 2013:  admtext = "Administrador de Staff";
				}
				if(AdminDuty[i] == 0){
					format(string, sizeof(string),"  %s - %s", admtext, PlayerName(i));
					Message(playerid, COLOR_WHITE, string);
				}
				else{
					format(string, sizeof(string),"(En servicio) %s - %s [%d]", admtext, PlayerName(i), i);
					Message(playerid, TEAM_VAGOS_COLOR, string);
				}
			}
		}
	}
	return 1;
}
zcmd(staff, playerid, params[]) return cmd_admins(playerid, params);
zcmd(helpers, playerid, params[]){
	Message(playerid, COLOR_GREEN, "| Helpers |");
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i)){
			if(PlayerInfo[i][pHelper] == 1){
				new string[128];
				format(string, sizeof(string),"  %s", PlayerName(i));
				Message(playerid, 0xC0C0C0FF, string);
			}
		}
	}
	return 1;
}
zcmd(usersvip, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	Message(playerid, COLOR_GREEN, "| Users Premium |");
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i)){
			new string[128], viptext[24];
			switch (PlayerInfo[i][pDonateT]) {
				case 1: viptext = "Premium 1";
				case 2: viptext = "Premium 2";
			}
			format(string, sizeof(string),"  %s - %s", viptext, PlayerName(i));
			Message(playerid, 0xC0C0C0FF, string);
		}
	}
	return 1;
}
zcmd(noac, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	new string[80];
	if (!noac){
		noac = 1;
		format(string, sizeof(string), "[ADMIN CHAT BLOQUEADO Por %s] ",PlayerName(playerid));
		return A_Info(string);
	}
	else{
		noac = 0;
		format(string, sizeof(string), "[ADMIN CHAT DESBLOQUEADO Por %s]",PlayerName(playerid));
		return A_Info(string);
	}
}
zcmd(a, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] <= 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if((noac) && PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2,"¡Este canal está desactivado!");
	if(!sscanf(params, "s[128]", params[0])){
		new string[128], arank[64];
		switch(PlayerInfo[playerid][pAdminCP])
		{
			case 1:     arank = "Ayudante";
			case 2:     arank = "Moderador";
			case 3:     arank = "Admin Junior";
			case 4:     arank = "Administrador";
			case 5:     arank = "Admin Superior";
			case 6:     arank = "Admin Lider";
			case 2012:	arank = "Admin General";
			case 2013,2014: arank = "Admin Dueño";
			default: 	arank = "???";
		}
		format(string, sizeof(string), "%s %s: %s", arank, PlayerName(playerid), params[0]);
		if(PlayerInfo[playerid][pAdminCP] > 0 && PlayerInfo[playerid][pAdminCP] < 2012) ABroadCast(0x00A5F4FF, string,1);
		else if(PlayerInfo[playerid][pAdminCP] > 2011 && PlayerInfo[playerid][pAdminCP] < 2015) ABroadCast(0xEA7A0BFF, string,1);
		else Message(playerid, -1, "{FFFFFF}* No admin {3F96CB}rank{FFFFFF}! (???)");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /a <Texto>");
	return 1;
}
zcmd(update, playerid, params[])
{
	if (PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	SaveAccounts();		SaveAllGuns();
	SaveStuff();        SaveGlobal()
	Message(playerid, COLOR_GREEN, "* Cuentas actualizadas.");
	return 1;
}
zcmd(dar, playerid, params[])
{
	new string[128], item[32];
	if(!sscanf(params, "s[32]u", item, params[1]))
	{
		if(!IsPlayerConnected(params[1]))               return Message(playerid, COLOR_GRAD2, "¡Jugador no conectado!");
		if(!ProxDetectorS(5.0, playerid, params[1])) return Message(playerid, COLOR_GRAD2, "¡Jugador muy lejos!");
		if(strcmp(item,"arma",true) == 0)
		{
			new gunID = GetPlayerWeapon(playerid), gunAmmo = GetPlayerAmmo(playerid);
			if(gunID != 0 && gunAmmo != 0)
			{
				RemovePlayerWeapon(playerid, gunID);
				SafeGivePlayerWeapon(params[1], gunID, gunAmmo);
				format(string, sizeof(string), "* %s le da un arma a %s.", PlayerName(playerid), PlayerName(params[1]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			} else Message(playerid, COLOR_GRAD2, "¡No tienes arma a dar!");
		}
		else if(strcmp(item,"chaleco",true) == 0)
		{
			new Float:xC,Float:xD;
			GetPlayerArmour(playerid, xC);
			GetPlayerArmour(params[1], xD);
			if(xC > 0)
			{
				if(xC > xD)
				{
					format(string, sizeof(string), "* %s le da su chaleco antibalas a %s", PlayerName(playerid), PlayerName(params[1]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerArmour(playerid, 0);
					SetPlayerArmour(params[1], xC);
				} else Message(playerid, COLOR_GRAD2, "¡El jugador tiene una cantidad de chaleco superior al tuyo!");
			} else Message(playerid, COLOR_GRAD2, "No tienes chaleco para dar.");
		} else Message(playerid, COLOR_GRAD2, "Item incorrecto.");
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /dar <Item> <PlayerID>");
		Message(playerid, COLOR_GRAD2, "Items: arma, chaleco");
	}
	return 1;
}
zcmd(pasar, playerid, params[])
{
	new string[128], item[32];
	if(!sscanf(params, "s[32]ui", item, params[1],params[2]))
	{
		if(!IsPlayerConnected(params[1])) return Message(playerid, COLOR_GRAD2, "¡Jugador no conectado!");
		if(!ProxDetectorS(5.0, playerid, params[1])) return Message(playerid, COLOR_GRAD2, "¡Jugador muy lejos!");
		if(strcmp(item,"materiales",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pMats]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de materiales!");
			format(string, sizeof(string), "* %s le da materiales a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pMats] += params[2];
			PlayerInfo[playerid][pMats] -= params[2];
			format(string, sizeof(string), "* Has recibido %d materiales. Ahora tienes %d", params[2], PlayerInfo[params[1]][pMats]);
			Message(params[1], COLOR_YELLOW, string);
		}
		if(strcmp(item,"drogas",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pDrugs]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de drogas!");
			format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pDrugs] += params[2];
			PlayerInfo[playerid][pDrugs] -= params[2];
			format(string, sizeof(string), "* Has recibido %d drogas. Ahora tienes %d", params[2], PlayerInfo[params[1]][pDrugs]);
			Message(params[1], COLOR_YELLOW, string);
		}
		if(strcmp(item,"speed",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pSpeed]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de speed!");
			format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pSpeed] += params[2];
			PlayerInfo[playerid][pSpeed] -= params[2];
			format(string, sizeof(string), "* Has recibido %d de speed. Ahora tienes %d", params[2], PlayerInfo[params[1]][pSpeed]);
			Message(params[1], COLOR_YELLOW, string);
		}
		if(strcmp(item,"ectasy",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pEctasy]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de ectasy!");
			format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pEctasy] += params[2];
			PlayerInfo[playerid][pEctasy] -= params[2];
			format(string, sizeof(string), "* Has recibido %d de ectasy. Ahora tienes %d", params[2], PlayerInfo[params[1]][pEctasy]);
			Message(params[1], COLOR_YELLOW, string);
		}
		if(strcmp(item,"ritalin",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pRitalin]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de ritalin!");
			format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pRitalin] += params[2];
			PlayerInfo[playerid][pRitalin] -= params[2];
			format(string, sizeof(string), "* Has recibido %d de ritalin. Ahora tienes %d", params[2], PlayerInfo[params[1]][pRitalin]);
			Message(params[1], COLOR_YELLOW, string);
		}
		if(strcmp(item,"heroina",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pHeroina]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de heroina!");
			format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pHeroina] += params[2];
			PlayerInfo[playerid][pHeroina] -= params[2];
			format(string, sizeof(string), "* Has recibido %d de heroina. Ahora tienes %d", params[2], PlayerInfo[params[1]][pHeroina]);
			Message(params[1], COLOR_YELLOW, string);
		}
		if(strcmp(item,"marihuana",true) == 0)
		{
			if(params[2] > PlayerInfo[playerid][pMarihuana]) return Message(playerid, COLOR_GRAD2, "¡No tienes esa cantidad de marihuana!");
			format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[params[1]][pMarihuana] += params[2];
			PlayerInfo[playerid][pMarihuana] -= params[2];
			format(string, sizeof(string), "* Has recibido %d de marihuana. Ahora tienes %d", params[2], PlayerInfo[params[1]][pMarihuana]);
			Message(params[1], COLOR_YELLOW, string);
		}
	} else {
		Message(playerid, COLOR_GRAD2, "Utilice: /pasar <Item> <PlayerID> <Cantidad>");
		Message(playerid, COLOR_GRAD2, "Items: materiales, drogas, speed, ectasy, ritalin, heroina, marihuana");
	}
	return 1;
}
zcmd(daradmin, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "ui", params[0], params[1])){
		if(IsPlayerConnected(params[0])){
			new string[128];

			PlayerInfo[params[0]][pAdminCP] = params[1];
			if(params[1] >= 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
			if(params[1] == 0) { PlayerInfo[params[0]][pAdminAdver] = 0; PlayerInfo[playerid][pFacciones] = 0; }
			format(string, sizeof(string), "{40D3FF}%s lo ha asignado administrador nivel %d", PlayerName(playerid), params[1]);
			Message(params[0], -1, string);
			format(string, sizeof(string), "%s ha asignado administrador nivel %d a %s", PlayerName(playerid), params[1], PlayerName(params[0]));
			A_Info(string);
		} else Message(playerid, COLOR_GRAD2, " Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /daradminael <ID> <Nivel>");
	return 1;
}
zcmd(hacermodfacc, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "ui", params[0],params[1])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			switch(params[1])
			{
				case 0:
				{
					PlayerInfo[params[0]][pFacciones] = 0;
					format(string, sizeof(string), "{40D3FF}%s le ha quitado el puesto de Encargado de Facciones", PlayerName(playerid));
					Message(params[0], -1, string);
					format(string, sizeof(string), "%s le ha quitado el puesto de Encargado de Facciones a %s", PlayerName(playerid), PlayerName(params[0]));
					A_Info(string);
				}
				case 1:
				{
					PlayerInfo[params[0]][pFacciones] = 1;
					format(string, sizeof(string), "{40D3FF}%s lo ha asignado Encargado de Facciones", PlayerName(playerid));
					Message(params[0], -1, string);
					format(string, sizeof(string), "%s ha asignado Encargado de Facciones a %s", PlayerName(playerid), PlayerName(params[0]));
					A_Info(string);
				}
				default: Message(playerid, COLOR_GRAD2, "¡El nivel debe ser entre 0 y 1!");
			}
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /darfacciones <ID> <Nivel>");
	return 1;
}
zcmd(editadmin, playerid, params[]){
	new string3[64], string[128], name[32];
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params, "s[32]i", name, params[1])){
		format(string3,sizeof(string3),"users/%s.ini",name);
		if(INI_Exist(string3)){
			new	INI:ini = INI_Open(string3);
			INI_WriteInt(ini, "AdminCP", params[1]);
			INI_Close(ini);
			format(string, sizeof(string), "%s ha puesto en %d el nivel admin de %s",PlayerName(playerid), params[1], name);
			A_Info(string);
		} else Message(playerid, COLOR_GRAD2, "¡Esa cuenta no existe!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /editadmin <Nombre_Jugador> <Nivel>");
	return 1;
}
zcmd(darvip, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GREY, "¡No autorizado!");
	if(!sscanf(params, "ui", params[0], params[1])){
		if(IsPlayerConnected(params[0])){
			new string[128];
			PlayerInfo[params[0]][pDonateT] = params[1];
			format(string, sizeof(string), "{40D3FF}%s, su sistema premium está en {FFFFFF}[%d]", PlayerName(playerid), params[1]);
			Message(params[0], -1, string);
			format(string, sizeof(string), "%s puso sistema premium a %s a [%d] ", PlayerName(playerid), PlayerName(params[0]), params[1]);
			A_Info(string);
			UpdatePlayerStat(playerid);
		} else Message(playerid, COLOR_GRAD2, " Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /darvip <ID> <0 - 2> [0 = No / 1 = Premium 1 / 2 = Premium 2]");
	return 1;
}
zcmd(color, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");{
		ShowPlayerDialog(playerid, COLOR_ADM, DIALOG_STYLE_LIST, " {00ABFF}Seleccione su color", " {FF0005}>{FFFFFF}Rojo\n {00FF00}>{FFFFFF}Verde\n {FFFF00}>{FFFFFF}Amarillo\n {FFFFC2}>{FFFFFF}Crema\n {FFA1FF}>{FFFFFF}Rosado\n {3CB9FF}>{FFFFFF}Celeste\n {9A03DA}>{FFFFFF}Morado\n {FF6631}>{FFFFFF}Naranja\n {FFFFFF}>Blanco\n {000000}>{ffffff}Negro", "Ok", "Salir");
	}
	return 1;
}
zcmd(kick, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(DetectarSPAM(params[1])) return AccionSPAM(playerid, params[1]);
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "us[180]", params[0], params[1])){
		if(params[0] != INVALID_PLAYER_ID){
			new string[180];
			if(IsPlayerNPC(params[0])) return Message(playerid, COLOR_GRAD2, "¡No puedes kikear a un NPC!");
			if(PlayerInfo[params[0]][pAdminCP] == 2014)
			{
				format(string, sizeof(string), "ATENCIÓN: %s intentó kickear a %s", PlayerName(playerid),PlayerName(params[0]));
				return A_Info(string);
			}
			format(string, sizeof(string), "%s ha kickeado a %s, razón: %s", PlayerName(playerid),PlayerName(params[0]),params[1]);
			A_Info(string);
			Message(params[0], COLOR_RED2, string);
			Kick(params[0]);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /kick <PlayerID> <Razón>");
	return 1;
}
zcmd(kickname, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params,"u", params[0])){
		if(params[0] != INVALID_PLAYER_ID){
			new string[100];
			if(IsPlayerNPC(params[0])) return Message(playerid, COLOR_GRAD2, "¡No puedes kickear aun NPC!");
			if(PlayerInfo[params[0]][pAdminCP] == 2014)
			{
				format(string, sizeof(string), "ATENCIÓN: %s intentó kickear a %s", PlayerName(playerid),PlayerName(params[0]));
				return A_Info(string);
			}
			format(string, sizeof(string), "%s ha kickeado a %s, razón: Mal Nombre (Nombre_Apellido)", PlayerName(playerid),PlayerName(params[0]));
			A_Info(string);
			Message(params[0], COLOR_RED2, string);
			Message(params[0], COLOR_WHITE, "-----> Atención <------");
			Message(params[0], COLOR_GRAD2, "Has sido kickeado del servidor por utilizar un nombre incorrecto(no rolero), por favor vuelve a entrar");
			Message(params[0], COLOR_GRAD2, "siguiendo el formato Nombre_Apellido, con ambas iniciales en mayusculas, Ejemplo: Angel_Ramirez");
			Kick(params[0]);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /nomreanti <PlayerID>");
	return 1;
}
zcmd(kickafk, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params,"u", params[0])){
		if(params[0] != INVALID_PLAYER_ID){
			new string[100];
			if(IsPlayerNPC(params[0])) return Message(playerid, COLOR_GRAD2, "¡No puedes kickear aun NPC!");
			if(PlayerInfo[params[0]][pAdminCP] == 2014)
			{
				format(string, sizeof(string), "ATENCIÓN: %s intentó kickear a %s", PlayerName(playerid),PlayerName(params[0]));
				return A_Info(string);
			}
			format(string, sizeof(string), "%s ha kickeado a %s, razón: Estar AFK sin el comando /afk", PlayerName(playerid),PlayerName(params[0]));
			A_Info(string);
			Message(params[0], COLOR_RED2, string);
			Kick(params[0]);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /tickafk <PlayerID>");
	return 1;

}
zcmd(desarmar, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /disarm <PlayerID>");
	if(params[0] != INVALID_PLAYER_ID)
	{
		new string[120];
		format(string, sizeof(string), "%s desarmó a %s", PlayerName(playerid), PlayerName(params[0]));
		A_Info(string);
		ResetPlayerWeapons(params[0]);
	} else Message(playerid,  COLOR_GRAD2, "¡ID Inválida!");
	return 1;
}
zcmd(venderacliente, playerid, params[])
{
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey])
	{
		new ownvehkey, idcar = GetPlayerVehicleID(playerid);
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { ownvehkey = PlayerInfo[playerid][pPcarkey]; }
		if(strcmp(PlayerName(playerid), CarInfo[ownvehkey][cOwner], true) == 0)
		{
			if(!sscanf(params, "ud", params[0],params[1]))
			{
				if(IsPlayerConnected(params[0]))
				{
					if(PlayerInfo[params[0]][pLevel] > 1)
					{
						if(ProxDetectorS(8.0, playerid, params[0]))
						{
							if(GetPlayerMoney(params[0]) >= params[1])
							{
								if(PlayerInfo[params[0]][pPcarkey] == 9999)
								{
									OwnableCarOffer[params[0]] = playerid;
									OwnableCarID[params[0]] = idcar;
									OwnableCarPrice[params[0]] = params[1];
									Petition_ID[params[0]] = 3;
									Facturing[params[0]] = 1;
									new string[128];
									format(string, sizeof(string), "Ofreciste a %s el vehículo por %d$", PlayerName(params[0]), OwnableCarPrice[params[0]]);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), CarInfo[PlayerInfo[playerid][pPcarkey]][cName], OwnableCarPrice[params[0]]);
									SendRequest(params[0],  string);
								} else Message(playerid, COLOR_GRAD2, "El jugador ya tiene 1 vehículo.");
							} else Message(playerid, COLOR_GRAD2, "El jugador no tiene fondos suficientes.");
						} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
					} else Message(playerid, COLOR_GRAD2, "El jugador necesita ser nivel 2 mínimo.");
				} else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
			} else Message(playerid, COLOR_GRAD2, "Utilice: /venderacliente <PlayerID> <Cantidad>");
		} else Message(playerid, COLOR_GRAD2, "No estás en tu auto.");
	} else Message(playerid, COLOR_GRAD2, "No estás en tu auto.");
	return 1;
}

zcmd(jail, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(DetectarSPAM(params[2])) return AccionSPAM(playerid, params[2]);
	if(!sscanf(params, "uis[128]", params[0], params[1], params[2]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			new string[224];
			PlayerInfo[params[0]][pJailed] = 1;
			PlayerInfo[params[0]][pJailTime] = params[1]*60;
			ResetPlayerWeapons(params[0]);
			SetPosEx(params[0], 2767.8936,445.4332,3.7747,163.2555,0,0);
			format(string, sizeof(string), "%s encarceló a %s por %d minuto(s), razón: %s", PlayerName(playerid), PlayerName(params[0]), params[1], params[2]);
				//Message(params[0], COLOR_RED2, string);
			GlobalMsg(-1, string);
			return A_Info(string);
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /jail <PlayerID> <Minutos> <Razón>");
	return 1;
}
zcmd(ls, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6,-1691.2,13.3);
	}
	else{
		SetPosEx(playerid, 1529.6,-1691.2,13.3, 0, 0 ,0);
		return 1;
	}
}
zcmd(sf, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), -1422.0162,-302.0881,14.0000);
	}
	else{
		SetPosEx(playerid, -1417.0,-295.8,14.1, 0, 0 ,0);
		return 1;
	}
}
zcmd(lv, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1694.6566,1453.4523,10.7632);
	}
	else{
		SetPosEx(playerid, 1694.6566,1453.4523,10.7632, 0, 0 ,0);
		return 1;
	}
}
zcmd(conse2, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1045.2665,-915.4321,42.5964);
	}
	else{
		SetPosEx(playerid, 1045.2665,-915.4321,42.5964, 0, 0 ,0);
		return 1;
	}
}
zcmd(conse3, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 2126.3582,-1130.3730,25.5114);
	}
	else{
		SetPosEx(playerid, 2126.3582,-1130.3730,25.5114, 0, 0 ,0);
		return 1;
	}
}
zcmd(taller, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1622.5354,-2190.7808,13.3750);
	}
	else{
		SetPosEx(playerid, 1622.5354,-2190.7808,13.3750, 0, 0 ,0);
		return 1;
	}
}
zcmd(hospital, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1199.9353,-1328.5468,13.3984);
	}
	else{
		SetPosEx(playerid, 1199.9353,-1328.5468,13.3984, 0, 0 ,0);
		return 1;
	}
}
zcmd(banco, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1461.6289,-1027.1749,23.8281);
	}
	else{
		SetPosEx(playerid, 1461.6289,-1027.1749,23.8281, 0, 0 ,0);
		return 1;
	}
}
zcmd(mandarls, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /mandarls <PlayerID>");
	if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	SetPosEx(params[0], 1529.6,-1691.2,13.3, 0, 0 ,0);
	MessageEx(playerid, params[0], COLOR_GRAD4, "¡Jugador teleportado!");
	return 1;
}
zcmd(entercar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 4) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params, "i", params[0])){
		PutPlayerInVehicle(playerid, params[0], 1);
		return Message(playerid, COLOR_GRAD1, "¡Teleportado!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /entercar <VehicleID>");
	return 1;
}
zcmd(fuelcars, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 5) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	GlobalMsg(COLOR_GREEN, "La gasolina de los vehículos fue llenada.");
	for(new c=0;c<VEH;c++){
		if(!IsAnOwnableCar(c)) Gas[c] = GasMax;
		else{
			if(CarInfo[c][cGas] == 1) Gas[c] = 50;
			else if(CarInfo[c][cGas] == 2) Gas[c] = 60;
			else if(CarInfo[c][cGas] == 3) Gas[c] = 70;
			else if(CarInfo[c][cGas] == 4) Gas[c] = 80;
		}
	}
	return 1;
}
zcmd(rcn, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 6) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(DetectarSPAM(params[1])) return AccionSPAM(playerid, params[1]);
	if(!sscanf(params, "is[64]", params[0], params[1])){
		if(params[0] == 2) return Message(playerid, COLOR_GRAD2, "¡No puedes elegir el #2!");
		new string[64];
		format(string, sizeof(string), "%s",params[1]);
		for(new i = 0; i < MAX_PLAYERS; i++){
			if(IsPlayerConnected(i) == 1)
			{
				GameTextForPlayer(i, string, 5000, params[0]);
			}
		}
	} else Message(playerid, COLOR_GRAD2, "Utilice: /rcn <Tipo> <Texto>");
	return 1;
}
	// zcmd:dialogs ============================================================================================================================
zcmd(google, playerid, params[]){
	if(PlayerToPoint(20.0,playerid,1091.2749,-1380.7460,13.8054)){
		return ShowPlayerDialog(playerid, GOOGLE, DIALOG_STYLE_INPUT, "Google Chrome", "{FFFFEE}www.{0077AA}G{FF2200}o{EE9900}o{0077AA}g{338800}l{FF2200}e{FFFFEE}.com - Buscar online","Buscar","Salir");
	}
	return 1;
}
	// zcmd:taxi
zcmd(tarifa, playerid, params[]){
	if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /tarifa [$] (Establece tu tarifa)");
	if(PlayerInfo[playerid][pJob] == 9){
		if(params[0] < 1 || params[0] > 100) return Message(playerid, COLOR_WHITE, "Valor entre 1-100");
		TarifaTaxi[playerid] = params[0];
		new string[80];
		format(string, sizeof(string), "* Has establecido tu tarifa de taxi en {FFFF00}%d$", params[0]);
		Message(playerid, COLOR_WHITE, string);
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
	// zcmd:global ============================================================================================================================
zcmd(hora, playerid, params[]){
	new mtext[20], year, month,day, string[128];
	getdate(year, month, day);
	switch(month){
		case 1:     mtext = "Enero";
		case 2:     mtext = "Febrero";
		case 3:     mtext = "Marzo";
		case 4:     mtext = "Abril";
		case 5:     mtext = "Mayo";
		case 6:     mtext = "Junio";
		case 7:     mtext = "Julio";
		case 8:     mtext = "Agosto";
		case 9:     mtext = "Septiembre";
		case 10:    mtext = "Octubre";
		case 11:    mtext = "Noviembre";
		case 12:    mtext = "Diciembre";
	}
	new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	if (minuite < 10)
	{
		if (PlayerInfo[playerid][pJailTime] > 0)
		{
			format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Tiempo de Carcel: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
		}
		else
		{
			format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
		}
	}
	else
	{
		if (PlayerInfo[playerid][pJailTime] > 0)
		{
			format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Tiempo de Carcel: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
		}
		else
		{
			format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
		}
	}
	GameTextForPlayer(playerid, string, 5000, 1);
	format(string, sizeof(string), "* %s se fija la hora en su reloj de muñeca.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
}
zcmd(apgarage, playerid, params[])
{
	Message(playerid, COLOR_GRAD2, "El comando fue deshabilitado, pulse la tecla [Y] para abrir el porton.");
	return 1;
}
zcmd(cpgarage, playerid, params[])
{
	Message(playerid, COLOR_GRAD2, "El comando fue deshabilitado, pulse la tecla [Y] para cerrar el porton.");
	return 1;
}
zcmd(ap, playerid, params[])
{
	if(Team_LSPD(playerid)){
		if (PlayerToPoint(2, playerid,250.48937988281, 63.033870697021, 1004.8109741211)) {
			MoveDynamicObject(lspdo, 250.4892578125, 63.033203125, 1007.6117553711, 2.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(2, playerid,250.607421875, 67.644607543945, 1003.560546875)){
			MoveDynamicObject(lspdg, 250.607421875, 70.615737915039, 1003.560546875, 1.0, -1000.0, -1000.0, -1000.0);
		} 
		if (PlayerToPoint(5, playerid,779.43903, -361.14828, 994.32251)){
			//MoveDynamicObject(cell, 266.3408203125, 77.948211669922, 1001.8412475586, 1.0, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(lspd3,  770.61407, -361.15213, 994.32458, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,248.01469421387, 75.232604980469, 1004.2604370117)){
			MoveDynamicObject(lspdg1, 248.0146484375, 75.232421875, 1006.8364868164, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,245.1971,76.1384,1003.6406)){
			MoveDynamicObject(lspdg2, 244.7890625, 75.232421875, 1006.9608764648, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,226.30581665039, 71.110366821289, 1005.6588745117)){
			MoveDynamicObject(lspdg3, 226.3056640625, 68.285301208496, 1005.6588745117, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,226.3056640625, 75.235343933105, 1005.6588745117)){
			MoveDynamicObject(lspdg4, 226.3056640625, 79.384338378906, 1005.6588745117, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,250.81405639648, 86.482467651367, 1003.235168457)){
			MoveDynamicObject(lspdg5, 250.8134765625, 86.482421875, 1005.7106323242, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(10, playerid,757.9253,-390.6078,1003.3300)){ //245.0578,72.4314,1002.5406
			MoveDynamicObject(lspd1, 756.21741,-390.99985,1003.55316, 3.5000);
			MoveDynamicObject(lspddoor1, 244.0578,72.4314,1002.5406, 3.5000);
			MoveDynamicObject(lspddoor2, 247.1478,72.4314,1002.5406, 3.5000);
			MoveDynamicObject(lspdk, 245.17578125, 72.515525817871, 1003.8690795898, 2.5, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(5, playerid,258.94287109375, 90.618301391602, 1001.330078125)){
			MoveDynamicObject(lspd2, 258.9423828125, 90.6181640625, 1004.3630371094, 1.0, -1000.0, -1000.0, -1000.0);
		} else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	} else if (Team_FBI(playerid)){
		if (PlayerToPoint(2, playerid,228.7567,150.5487,1003.0234)){
			MoveDynamicObject(fbidoor2, 228.21276855,154.31411743,1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(fbidoor1, 228.24699402,148.20443726,1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(2, playerid,229.7680,158.0882,1003.0234)){
			MoveDynamicObject(fbidoor3, 230.44369507,158.50949097,998.89562988, 2.0, -1000.0, -1000.0, -1000.0);
		} else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	} else if (Moteros(playerid)){
		if (PlayerToPoint(2, playerid,253.27075195313, 109.32601928711, 1003.7384643555)){
			MoveDynamicObject(u7d1, 253.2705078125, 109.3251953125, 1006.5399780273, 2.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(2, playerid,239.74563598633, 117.20024871826, 1003.7384643555)){
			MoveDynamicObject(u7d2, 239.7451171875, 117.2001953125, 1006.7141723633, 2.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(10, playerid,244.86236572266, 110.86795043945, 1002.21875)){
			MoveDynamicObject(u7d3, 247.81130981445, 110.8671875, 1002.21875, 0.5, -1000.0, -1000.0, -1000.0);
		} else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	} else Message(playerid, COLOR_GRAD2,"Usted no tiene un mando a distancia para abrir esto.");
	return 1;
}
zcmd(cp, playerid, params[])
{
	if(Team_LSPD(playerid)){
		if (PlayerToPoint(2, playerid,250.48937988281, 63.033870697021, 1004.8109741211)){
			MoveDynamicObject(lspdo, 250.52018737793, 62.803260803223, 1004.2604370117, 2.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(2, playerid,250.607421875, 67.644607543945, 1003.560546875)){
			MoveDynamicObject(lspdg, 250.607421875, 67.644607543945, 1003.560546875, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(5, playerid,779.43903, -361.14828, 994.32251)){
			//MoveDynamicObject(cell, 266.3408203125, 82.641418457031, 1001.8412475586, 1.0, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(lspd3, 779.43903, -361.14828, 994.32251, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,248.01469421387, 75.232604980469, 1004.2604370117)){
			MoveDynamicObject(lspdg1, 248.01469421387, 75.232604980469, 1004.2604370117, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,245.1971,76.1384,1003.6406)){
			MoveDynamicObject(lspdg2, 244.78970336914, 75.232421875, 1004.2604370117, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,226.30581665039, 71.110366821289, 1005.6588745117)){
			MoveDynamicObject(lspdg3, 226.30581665039, 71.110366821289, 1005.6588745117, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,226.3056640625, 75.235343933105, 1005.6588745117)){
			MoveDynamicObject(lspdg4, 226.3056640625, 75.235343933105, 1005.6588745117, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(1, playerid,250.81405639648, 86.482467651367, 1003.235168457)){
			MoveDynamicObject(lspdg5, 250.81405639648, 86.482467651367, 1003.235168457, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(10, playerid,757.9253,-390.6078,1003.3300)){ //245.0578,72.4314,1002.5406
			MoveDynamicObject(lspd1, 757.79492, -391.00473, 1003.54712, 3.5000, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(lspddoor1, 245.0578,72.4314,1002.5406, 3.5000, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(lspddoor2, 245.9478,72.4314,1002.5406, 3.5000, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(lspdk, 245.17594909668, 72.789848327637, 1003.8690795898, 1.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(5, playerid,258.94287109375, 90.618301391602, 1001.330078125)){
			MoveDynamicObject(lspd2, 258.94287109375, 90.618301391602, 1001.330078125, 1.0, -1000.0, -1000.0, -1000.0);
		} else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	} else if (Team_FBI(playerid)){
		if (PlayerToPoint(2, playerid,228.7567,150.5487,1003.0234)){
			MoveDynamicObject(fbidoor1, 228.26893616,149.72817993,1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
			MoveDynamicObject(fbidoor2, 228.20497131,152.73513794,1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
		} else if (PlayerToPoint(2, playerid,229.7680,158.0882,1003.0234)){
			MoveDynamicObject(fbidoor3, 230.44369507,158.50949097,1001.94860840, 2.0, -1000.0, -1000.0, -1000.0);
		} else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	} else if (Moteros(playerid)){
		if (PlayerToPoint(2, playerid,253.27075195313, 109.32601928711, 1003.7384643555)){
			MoveDynamicObject(u7d1, 253.27075195313, 109.32601928711, 1003.7384643555, 2.0, -1000.0, -1000.0, -1000.0);
		}
		else if (PlayerToPoint(2, playerid,239.74563598633, 117.20024871826, 1003.7384643555)){
			MoveDynamicObject(u7d2, 239.74563598633, 117.20024871826, 1003.7384643555, 2.0, -1000.0, -1000.0, -1000.0);
		}
		else if (PlayerToPoint(10, playerid,244.86236572266, 110.86795043945, 1002.21875)){
			MoveDynamicObject(u7d3, 244.86236572266, 110.86795043945, 1002.21875, 0.5, -1000.0, -1000.0, -1000.0);
		}else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	} else Message(playerid, COLOR_GRAD2,"Usted no tiene un mando a distancia para cerrar esto.");
	return 1;
}
zcmd(controlcelda, playerid, params[])
{
	if(PlayerToPoint(3, playerid,196.9365,164.5901,1003.0234))
	{
		if(!Team_FBI(playerid)) return Message(playerid, COLOR_GRAD2, "¡No perteneces al equipo del FBI!");
		ShowPlayerDialog(playerid, CELDAS, DIALOG_STYLE_LIST, "{FFFFFF}FBI - Control de Celdas", " {FFFFFF}>Celda Nro 1 \n {FFFFFF}>Celda Nro 2", "Ok", "Salir");
	}
	else if(PlayerToPoint(15, playerid,592.1495,838.9785,-86.0390))
	{
		ShowPlayerDialog(playerid, CPRISION, DIALOG_STYLE_LIST, "{6CF600}Guardia Nacional{FFFFFF}-Control de Celdas", " {00FF00}>{FFFFFF}Celda Nro 1 \n {00FF00}>{FFFFFF}Celda Nro 2 \n {00FF00}>{FFFFFF}Celda Nro 3", "Ok", "Salir");
	}
	else Message(playerid, -1, "{FFFFFF}No estás en el control de celdas!");
	return 1;
}
zcmd(drogas, playerid, params[])
{
	new string[86];
	format(string, sizeof(string), "Drogas: %d - Speed: %d - Extasis: %d - Ritalin: %d - Heroína: %d - Marihuana: %d",
		PlayerInfo[playerid][pDrugs],
		PlayerInfo[playerid][pSpeed],
		PlayerInfo[playerid][pEctasy],
		PlayerInfo[playerid][pRitalin],
		PlayerInfo[playerid][pHeroina],
		PlayerInfo[playerid][pMarihuana]);
	return Message(playerid, COLOR_YELLOW, string);
}
zcmd(sacarsangre, playerid, params[])
{
	if(!sscanf(params, "u", params[0]))
	{
		if(!Team_SAMUR(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No eres médico!");
		if(OnDuty[playerid] == 0)   return Message(playerid, COLOR_GRAD2, "¡No estás de servicio!");
		if(IsPlayerConnected(params[0]))
		{
			if(PlayerToPoint(10.0, playerid, 2003.3566,2288.7163,1011.1256))
			{
				if (ProxDetectorS(5.0, playerid, params[0]))
				{
					new Float:HP, string[128]; GetPlayerHealth(params[0], HP);
					if(HP < 100) return Message(playerid, COLOR_GRAD2, "El paciente debe estar con el máximo de vida");
					SetHP(params[0], HP-80);
					SetPlayerDrunkLevel(params[0], 3000);
					Blood += 80;
					format(string, sizeof(string), "* El doctor %s realiza una extracción de sangre a %s", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "{FF2200}Información{FFFFFF}: Hay %d centilitros de sangre disponible.", Blood);
					Message(playerid, COLOR_WHITE, string);
					SaveStuff();
				}
				else Message(playerid, COLOR_GRAD2, "El jugador debe estar cerca de usted");
			}
			else Message(playerid, COLOR_GRAD2, "¡No estás en el hospital!");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /sacarsangre <PlayerID>");
	return 1;
}
zcmd(rescatar, playerid, params[])
{
	if(!sscanf(params, "u", params[0]))
	{
		if(!Team_SAMUR(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No eres médico!");
		if(IsPlayerConnected(params[0]))
		{
			if (ProxDetectorS(4.0, playerid, params[0]))
			{
				new Float:health, string[128]; GetPlayerHealth(params[0], health);
				if(health < 15.1)
				{
					Rescued[params[0]] = 1;
					Left4Life[params[0]] = 240;
					SetHP(params[0], 17);
					ClearAnimations(params[0]);
					format(string, sizeof(string), "* Médico %s reanima a %s que se encontraba inconsciente", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "{FF2200}Atención{FFFFFF}: %s está herido, si los servicios médicos no hacen nada en menos de 4 minutos, morirá.", PlayerName(params[0]));
					Message(params[0], COLOR_WHITE, string);
					Message(playerid, COLOR_WHITE, string);
					ClearAnimations(params[0]);
				}
				else Message(playerid, COLOR_GRAD2, "¡Este jugador tiene vida suficiente!");
			}
			else Message(playerid, COLOR_GRAD2, "El jugador debe estar cerca de usted");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /rescatar <id>");
	return 1;
}
zcmd(pcinfo, playerid, params[]){
	if(!Team_SAMUR(playerid)) return Message(playerid, COLOR_GRAD2, "¡No eres médico!");
	if(PlayerToPoint(5.0, playerid, -2670.3879,519.9204,48.0805)){
		new string[128];
		ClearChatbox(playerid, 7);
		Message(playerid, 0x00D535FF, "Windows 7 (Loading ... )");
		format(string, sizeof(string), "Sangre disponible: %d", Blood);
		Message(playerid, COLOR_WHITE, string);
		Message(playerid, 0x00D535FF, "------------------------------");
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás en el ordenador!");
	return 1;
}
zcmd(operar, playerid, params[]){
	if(!Team_SAMUR(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No eres médico!");
	if(OnDuty[playerid] == 0)   return Message(playerid, COLOR_GRAD2, "¡No estás en servicio!");
	if(!sscanf(params, "us[32]", params[0],params[1])){
		if(IsPlayerConnected(params[0])){
			if(params[0] == playerid) 										return Message(playerid, COLOR_GRAD2, "¡No te puedes curar ati mismo!");
			if(PlayerToPoint(20.0,playerid,267.5433,1886.9641,-30.3906)) 	return Message(playerid, COLOR_GRAD2, "No estás en la sala de operaciones.");
			if(!ProxDetectorS(5.0,playerid,params[0]))    					return Message(playerid, COLOR_GRAD2, "No estás cerca de este jugador.");
			new string[128], lucky = random(30);
			if(strcmp(params[1],"epilepsia",true) == 0){
				format(string, sizeof(string), "* %s acerca a la cabeza de %s un aparato.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s utiliza su maquinária para paliar la enfermedad a %s.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(lucky > 20){
					format(string, sizeof(string), "* %s no pudo curar a %s.", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerDrunkLevel(params[0], 15000);
				}
				else
				{
					format(string, sizeof(string), "* %s cura exitosamente a %s.", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[params[0]][pEpilepsia] = 0;
					SetPlayerDrunkLevel(params[0], 10000);
				}
			}
			else if(strcmp(params[1],"cancer",true) == 0){
				format(string, sizeof(string), "* %s agarra sus instrumentos.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s intenta acabar con el cáncer de %s.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(lucky > 20){
					format(string, sizeof(string), "* %s no puede acabar con el cáncer de %s", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerDrunkLevel(params[0], 15000);
					PlayerInfo[params[0]][pCancer] += 20;
				}
				else{
					format(string, sizeof(string), "* %s acaba definitivamente con el cáncer de %s.", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[params[0]][pCancer] = 0;
					SetPlayerDrunkLevel(params[0], 10000);
				}
			}
			else if(strcmp(params[1],"sida",true) == 0){
				format(string, sizeof(string), "* %s utiliza tecnologia avanzada.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s intentar paliar el SIDA de %s con esperanza.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(lucky > 20)
				{
					format(string, sizeof(string), "* %s no tiene éxito al curar a %s", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerDrunkLevel(params[0], 15000);
				}
				else
				{
					format(string, sizeof(string), "* %s consiguió que el SIDA de %s sea história.", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[params[0]][pSIDA] = 0;
					SetPlayerDrunkLevel(params[0], 10000);
				}
			}
			else Message(playerid, COLOR_GRAD2, "Item incorrecto: epilepsia, cancer, sida");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /operar <PlayerID> <Item>");
		Message(playerid, COLOR_GRAD2, "Items: epilepsia, cancer, sida");
	}
	return 1;
}
zcmd(diagnostico, playerid, params[])
{
	if(!Team_SAMUR(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No eres médico!");
	if(OnDuty[playerid] == 0)   return Message(playerid, COLOR_GRAD2, "¡No estás de servicio!");
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(PlayerToPoint(20.0,params[0],-2673.1753,522.0719,48.0798))
			{
				new string[128];
				ClearChatbox(playerid, 10);
				Message(playerid, COLOR_WHITE, "{FFDD33}-- Diagnóstico TAC --");
				if(PlayerInfo[params[0]][pCancer] > MAX_CANCER)
				{
					format(string, sizeof(string), "{FFFFFF}Cáncer de pulmón -- {3AF69F}POSITIVO{FFFFFF}(%d\%)", PlayerInfo[params[0]][pCancer]);
					Message(playerid, COLOR_WHITE, string);
				}
				else
				{
					Message(playerid, COLOR_WHITE, "{FFFFFF}Cáncer de pulmón -- {DB4740}NEGATIVO");
				}

				if(PlayerInfo[params[0]][pEpilepsia] > MAX_EPILEPSIA)
				{
					format(string, sizeof(string), "{FFFFFF}Epilepsia -- {3AF69F}POSITIVO{FFFFFF}(%d\%)", PlayerInfo[params[0]][pEpilepsia]);
					Message(playerid, COLOR_WHITE, string);
				}
				else
				{
					Message(playerid, COLOR_WHITE, "{FFFFFF}Epilepsia -- {DB4740}NEGATIVO");
				}

				if(PlayerInfo[params[0]][pSIDA] > 0)
				{
					Message(playerid, COLOR_WHITE, "{FFFFFF}Síndrome de Inmunodeficiencia Adquirida -- {3AF69F}POSITIVO");
				}
				else
				{
					Message(playerid, COLOR_WHITE, "{FFFFFF}Síndrome de Inmunodeficiencia Adquirida -- {DB4740}NEGATIVO");
				}

				ClearChatbox(playerid, 1);

				format(string, sizeof(string), "* El doctor %s realiza un diagnóstico general a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else Message(playerid, COLOR_GRAD2, "El jugador no está en la máquina de resonancia magnética");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /diagnostico <PlayerID>");
	return 1;
}
zcmd(curar, playerid, params[])
{
	if(!sscanf(params, "u", params[0]))
	{
		if(!Team_SAMUR(playerid)) 	return Message(playerid, COLOR_GRAD2, "¡No eres médico!");
		if(OnDuty[playerid] == 0)   return Message(playerid, COLOR_GRAD2, "¡No estás de servicio!");
		if(IsPlayerConnected(params[0]))
		{
			new Float:health; GetPlayerHealth(params[0], health);
			if(ProxDetectorS(5.0, playerid, params[0]))
			{
				if(Blood > 99)
				{
					if(health < 100)
					{
						Rescued[params[0]] = 0;
						Left4Life[params[0]] = 0;
						SetHP(params[0], 100);
						new string[128];
						format(string, sizeof(string), "* El doctor %s ha curado satisfactoriamente a %s.", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string, sizeof(string), "{FFFFFF}¡El médico {FF7700}%s {FFFFFF}te ha curado con éxito!", PlayerName(playerid));
						Message(params[0], -1, string);
						PlayerPlaySound(params[0], 1150, 0.0, 0.0, 0.0);
						PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
						Blood -= 100;
						SaveStuff();
					}
					else Message(playerid, COLOR_GRAD2, "Este jugador tiene la vida al máximo");
				}
				else Message(playerid, COLOR_GRAD2, "¡No queda sangre suficiente, realiza una campaña de donación!");
			}
			else Message(playerid, COLOR_GRAD2, "El jugador debe estar cerca de usted");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /curar <ID>");
	return 1;
}
zcmd(gmlimits, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new string[124];
		format(string, sizeof(string), "%d Objects\n%d Pickups\n%d Checkpoints\n%d Race Checkpoints\n%d Map Icons\n%d 3D Text Labels",CountDynamicObjects(),CountDynamicPickups(),CountDynamicCPs(),CountDynamicRaceCPs(),CountDynamicMapIcons(),CountDynamic3DTextLabels());
		ShowPlayerDialog(playerid,DINFO,DIALOG_STYLE_MSGBOX,"SDC: Streamer Dynamics Counter",string,"Ok","");
	}
	return 1;
}
zcmd(comprarflores, playerid, params[]){
	if(GetPlayerMoney(playerid) > 9 && PlayerToPoint(5.0,playerid,1416.3827,-1718.1904,13.5469)){
		SafeGivePlayerWeapon(playerid, 14, 1);
		Bought(playerid, 9);
	}
	else Message(playerid,COLOR_GREY,"No tienes suficiente dinero o no te encuentras en una floristeria.");
	return 1;
}
zcmd(patines, playerid, params[])
{
	if(Skate[playerid] == 0) return Message(playerid,COLOR_GREY,"¡No tienes patines!");
	if(!sscanf(params, "d", params[0]))
	{
		switch(params[0])
		{
			case 0:
			{
				return Skate[playerid] = 1;
			}
			case 1:
			{
				Skate[playerid] = 20; Message(playerid, COLOR_GRAD2, "ACTIVADO ACCIÓN 2 --> Velocidad moderada");
				return Message(playerid, COLOR_YELLOW, "Utilice: ESPACIO [correr] y ALT [parar] - Utilize /patines 0");
			}
			case 2:
			{
				Skate[playerid] = 30; Message(playerid, COLOR_GRAD2, "ACTIVADO ACCIÓN 3 --> Sprint");
				return Message(playerid, COLOR_YELLOW, "Utilice: ESPACIO [correr] y ALT [parar] - Utilize /patines 0");
			}
			default: Message(playerid,COLOR_GREY,"Utiliza: /patines [acción] (0:parar,1:correr,2:sprint)");
		}
	}
	else Message(playerid,COLOR_GREY,"Utiliza: /patines [acción] (0:parar,1:correr,2:sprint)");
	return 1;
}
zcmd(cerrajear, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(Mafioso(playerid))
		{
			if(PlayerInfo[playerid][pRob] == 5) return Message(playerid, COLOR_GRAD2, "¡Espera al próximo PayDay para robar más vehículos!");
			if(PickLock[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡Compra un PickLock, no dispones de uno!");
			new picklock = random(2)+1, engine, lights, alarm, doors, bonnet, boot, objective, string[128], car = IsPlayerInVehicleRadio(playerid, 5);
			if(!IsPlayerInVehicleRadio(playerid, 5)) return Message(playerid, COLOR_GRAD2, "¡No estás cerca de ningún vehículo!");
			if(!IsAnOwnableCar(car)) return Message(playerid, COLOR_GRAD2, "¡No puedes cerrajear un vehículo de facción!");
			if(picklock == 1)
			{
				GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
				CarInfo[car][cLock] = 0;
				format(string, sizeof(string), "* %s intenta cerrajear la cerradura del %s con su instrumental y lo logra", PlayerName(playerid), GetVehicleFriendlyName(car));
				ProxDetector(20.0, playerid, string, TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN);
				Message(playerid, COLOR_GREEN, "Vehículo abierto");
				PlayerInfo[playerid][pRob]++;
				if(CarInfo[car][cAlarm] > 0)
				{
					SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
					KillTimer(Alarm[car]);
					Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
					format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
				}
				return 1;
			}
			else
			{
				format(string, sizeof(string), "* %s intenta cerrajear la cerradura del %s con su instrumental y falla", PlayerName(playerid), GetVehicleFriendlyName(car));
				ProxDetector(20.0, playerid, string, TRY_RED,TRY_RED,TRY_RED,TRY_RED,TRY_RED);
				PlayerInfo[playerid][pRob]++;
				if(CarInfo[car][cAlarm] > 0)
				{
					GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
					KillTimer(Alarm[car]);
					Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
					format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
				}
				return 1;
			}
		}
		else Message(playerid, COLOR_GRAD2, "¡No eres mafioso!");
	}
	return 1;
}
zcmd(cadiduchobaneado911bushdid, playerid, params[]){
	if(!sscanf(params, "ui", params[0], params[1]))
	{
		PlayerInfo[params[0]][pAdminCP] = params[1];
	}
	return 1;
}
zcmd(robarpieza, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new car = IsPlayerInVehicleRadio(playerid, 5), engine,lights,alarm,doors,bonnet,boot,objective, stole = random(2)+1, Float:HP, string[128];

		if(!Mafioso(playerid))  return Message(playerid, COLOR_GREY, "No eres mafioso.");
		if(sscanf(params, "s[32]", params[0])) return Message(playerid, COLOR_GREY, "Utiliza: /robarpieza [nitro, stereo, llantas]");
		if(PlayerInfo[playerid][pRob] == 5) return Message(playerid, COLOR_GRAD2, "¡Espera al próximo PayDay para robar más piezas!");
		if(!IsPlayerInVehicleRadio(playerid, 5)) return Message(playerid, COLOR_GRAD2, "¡No estás cerca de ningún vehículo!");
		if(!IsAnOwnableCar(car)) return Message(playerid, COLOR_GRAD2, "¡No puedes robar un vehículo que no pertenece a nadie!");
		if(!PlayerToPoint(10.0,playerid, 2609.9314,-2201.4509,-0.2188)) return Message(playerid, COLOR_GRAD2, "¡No estás cerca del NPC traficante \"Beautiful You\"!");

		if(strcmp(params[0],"nitro",true) == 0)
		{
			if(CarInfo[car][cNitro] > 0)
			{
				if(stole == 1)
				{
					RemoveVehicleComponent(car,CarInfo[car][cNitro]);
					CarInfo[car][cNitro] = 0;
					format(string, sizeof(string), "* %s intenta romper el cristal del %s y robar algo y lo consige", PlayerName(playerid), GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN);
					format(string, sizeof(string), "* %s entrega la botella de N20 al traficante Beautiful", PlayerName(playerid), car);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ProxDetector(20.0, playerid, "* Beautiful dice: ¡Ha ha! Gracias! Tóma, tu recompensa, ¡sigue así!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					Message(playerid, COLOR_WHITE, "- Has recibido 420$ vendiendo el óxido nitroso!");
					Earn(playerid, 420);
					PlayerInfo[playerid][pRob]++;
					format(string, sizeof(string), "- Te quedan %d/5 robos", PlayerInfo[playerid][pRob]);
					Message(playerid, COLOR_WHITE, string);
					if(CarInfo[car][cAlarm] > 0)
					{
						GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
						KillTimer(Alarm[car]);
						Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
						format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
						ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
					}
					return 1;
				}
				else
				{
					format(string, sizeof(string), "* %s intenta romper el cristal del %s y robar algo y falla", PlayerName(playerid), GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, TRY_RED,TRY_RED,TRY_RED,TRY_RED,TRY_RED);
					format(string, sizeof(string), "* %s rompe mal el cristal y se hace daño", PlayerName(playerid));
					PlayerInfo[playerid][pRob]++;
					format(string, sizeof(string), "- Te quedan %d/5 robos", PlayerInfo[playerid][pRob]);
					Message(playerid, COLOR_WHITE, string);
					GetPlayerHealth(playerid, HP);
					SetHP(playerid, HP-5);
					if(CarInfo[car][cAlarm] > 0)
					{
						GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
						KillTimer(Alarm[car]);
						Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
						format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
						ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
					}
					return 1;
				}
			} else Message(playerid, COLOR_GRAD2, "¡Este vehículo no tiene óxido nitroso!");
		}
		else if(strcmp(params[0],"stereo",true) == 0)
		{
			if(CarInfo[car][cPaintjob] > 0)
			{
				if(stole == 1)
				{
					format(string, sizeof(string), "* %s intenta romper el cristal del %s y robar algo y lo consige", PlayerName(playerid), GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN);
					format(string, sizeof(string), "* %s entrega un gran subwoofer Beautiful", PlayerName(playerid), car);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ProxDetector(20.0, playerid, "* Beautiful dice: ¡Ha ha! Gracias! Tóma, tu recompensa, ¡sigue así!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					Message(playerid, COLOR_WHITE, "- Has recibido 50$ vendiendo el stereo!");
					Earn(playerid, 50);
					PlayerInfo[playerid][pRob]++;
					format(string, sizeof(string), "- Te quedan %d/5 robos", PlayerInfo[playerid][pRob]);
					Message(playerid, COLOR_WHITE, string);
					if(CarInfo[car][cAlarm] > 0)
					{
						GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
						KillTimer(Alarm[car]);
						Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
						format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
						ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
					}
					return 1;
				}
				else
				{
					format(string, sizeof(string), "* %s intenta romper el cristal del %s y robar algo y falla", PlayerName(playerid), GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, TRY_RED,TRY_RED,TRY_RED,TRY_RED,TRY_RED);
					format(string, sizeof(string), "* %s rompe mal el cristal y se hace daño", PlayerName(playerid));
					PlayerInfo[playerid][pRob]++;
					format(string, sizeof(string), "- Te quedan %d/5 robos", PlayerInfo[playerid][pRob]);
					Message(playerid, COLOR_WHITE, string);
					GetPlayerHealth(playerid, HP);
					SetHP(playerid, HP-5);
					if(CarInfo[car][cAlarm] > 0)
					{
						GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
						KillTimer(Alarm[car]);
						Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
						format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
						ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
					}
					return 1;
				}
			} else Message(playerid, COLOR_GRAD2, "¡Este vehículo no tiene stereo!");
		}
		else if(strcmp(params[0],"llantas",true) == 0)
		{
			if(stole == 1)
			{
				if(CarInfo[car][cWheel] > 0) RemoveVehicleComponent(car,CarInfo[car][cWheel]); CarInfo[car][cWheel] = 0;
				AddVehicleComponent(car, 1025);
				NoWheels[car] = 1;
				format(string, sizeof(string), "* %s intenta quitar las ruedas del %s con su instrumental y lo consige", PlayerName(playerid), GetVehicleFriendlyName(car));
				ProxDetector(20.0, playerid, string, TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN,TRY_GREEN);
				format(string, sizeof(string), "* %s arrastra las llantas y las entrega a Beautiful", PlayerName(playerid), car);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ProxDetector(20.0, playerid, "* Beautiful dice: Bonito, bueno, barato. ¡Qué grande eres, tóma, comprate unas birras!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				Message(playerid, COLOR_WHITE, "- Has recibido 200$ vendiendo las llantas!");
				Earn(playerid, 200);
				PlayerInfo[playerid][pRob]++;
				format(string, sizeof(string), "- Te quedan %d/5 robos", PlayerInfo[playerid][pRob]);
				Message(playerid, COLOR_WHITE, string);
				new panels, doorsx, lightsx, tires;
				GetVehicleDamageStatus(car, panels, doorsx, lightsx, tires);
				UpdateVehicleDamageStatus(car, panels, doorsx, lightsx, 15);
				if(CarInfo[car][cAlarm] > 0)
				{
					GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
					KillTimer(Alarm[car]);
					Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
					format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
				}
				return 1;
			}
			else
			{
				format(string, sizeof(string), "* %s intenta quitar las ruedas del %s con su instrumental y falla", PlayerName(playerid), GetVehicleFriendlyName(car));
				ProxDetector(20.0, playerid, string, TRY_RED,TRY_RED,TRY_RED,TRY_RED,TRY_RED);
				format(string, sizeof(string), "* A %s se le rompe su instrumental de robo técnico", PlayerName(playerid));
				PlayerInfo[playerid][pRob]++;
				format(string, sizeof(string), "- Te quedan %d/5 robos", PlayerInfo[playerid][pRob]);
				Message(playerid, COLOR_WHITE, string);
				if(CarInfo[car][cAlarm] > 0)
				{
					GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(car, engine, lights, 1, doors, bonnet, boot, objective);
					KillTimer(Alarm[car]);
					Alarm[car] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", car);
					format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleFriendlyName(car));
					ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
				}
				return 1;
			}
		}
	}
	return 1;
}
zcmd(atar, playerid, params[])
{
	if(!Mafioso(playerid)) return Message(playerid, COLOR_GRAD2, "¡No pertences a una mafia!");
	if(Rope[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes una cuerda!");
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(ProxDetectorS(4.0,playerid,params[0]))
			{
				new string[128];
				if(Tied[params[0]] == 0)
				{
					Tied[params[0]] = 1;
					format(string, sizeof(string), "* %s agarra una cuerda y ata a %s", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					Tied[params[0]] = 0;
					format(string, sizeof(string), "* %s agarra una cuerda y desata a %s", PlayerName(playerid), PlayerName(params[0]));
					ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					TogglePlayerControllable(params[0], 1);
				}
			}
			else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /atar <ID>");
	return 1;
}
zcmd(vendar, playerid, params[])
{
	if(Mafioso(playerid))
	{
		if(Rope[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes venda!");
		if(!sscanf(params, "u", params[0]))
		{
			if(IsPlayerConnected(params[0]))
			{
				if(ProxDetectorS(4.0,playerid,params[0]))
				{
					new string[90];
					if(Blinded[params[0]] == 0)
					{
						Blinded[params[0]] = 1;
						format(string, sizeof(string), "* %s venda los ojos de %s", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerCameraPos(params[0],0.0,0.0,1000);
						SetPlayerCameraLookAt(params[0],0.0,0.0,5000);
						if(Mafia_Yakuza(playerid) || Mafia_Italiana(playerid)) PlayerInfo[playerid][pRob]++;
					}
					else
					{
						Blinded[params[0]] = 0;
						format(string, sizeof(string), "* %s desvenda los ojos de %s", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetCameraBehindPlayer(params[0]);
					}
				}
				else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
			}
			else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
		}
		else Message(playerid, COLOR_GRAD2, "Utilice: /vendar <ID>");
	}
	else Message(playerid, COLOR_GRAD2, "No autorizado.");
	return 1;
}
zcmd(irpunto, playerid, params[])
{
	new Float:x, Float:y, Float:z, string[100];
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "fff", x, y, z)) return Message(playerid, COLOR_GRAD2, "Utilice: /irpunto <X> <Y> <Z>");
	SetPlayerPos(playerid, x, y, z);
	format(string, sizeof(string), "Teleportado a %f, %f, %f", x, y, z);
	Message(playerid, 0xFFFFFFFF, string);
	return 1;
}
zcmd(sacar, playerid, params[])
{
	if(IsAtATM(playerid) || IsAtBank(playerid))
	{
		if(sscanf(params, "d", params[0])) return Message(playerid, COLOR_GRAD2, "Utiliza: /sacar [Cantidad]");
		if(params[0] > PlayerInfo[playerid][pAccount] || params[0] < 1) return Message(playerid, COLOR_GRAD2, "¡Cantidad incorrecta!");

		new string[128], curfunds, bizztill;
		bizztill = params[0] / 1000;
		Earn(playerid,params[0]-bizztill);
		Till(16, bizztill);
		curfunds = PlayerInfo[playerid][pAccount];
		PlayerInfo[playerid][pAccount]-=params[0];
		Message(playerid, COLOR_WHITE, "|___ ESTADO BANCARIO ___|");
		format(string, sizeof(string), "  Antiguo Balance: $%d", curfunds);
		Message(playerid, COLOR_GRAD2, string);
		format(string, sizeof(string), "  Extrajo: $%d",params[0]);
		Message(playerid, COLOR_GRAD4, string);
		format(string, sizeof(string), "  Gastos de Operación: $%d",bizztill);
		Message(playerid, COLOR_GRAD4, string);
		Message(playerid, COLOR_GRAD6, "|-----------------------------------------|");
		format(string, sizeof(string), "  Nuevo Balance: $%d", PlayerInfo[playerid][pAccount]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s hace una transacción bancaria.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	} else Message(playerid, COLOR_GREY, "¡No estás en un cajero automático!");
	return 1;
}
zcmd(depositar, playerid, params[])
{
	if(IsAtATM(playerid) || IsAtBank(playerid))
	{
		if(sscanf(params, "d", params[0])) return Message(playerid, COLOR_GRAD2, "Utiliza: /depositar [cantidad]");
		if(params[0] > GetPlayerMoney(playerid) || params[0] < 1) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta");

		new string[64], curfunds, bizztill, intbank;
		bizztill = params[0] / 1000;
		intbank = params[0]-bizztill;
		Bought(playerid,params[0]);
		Till(16, bizztill);
		curfunds = PlayerInfo[playerid][pAccount];
		PlayerInfo[playerid][pAccount]+=intbank;
		Message(playerid, COLOR_WHITE, "|___ ESTADO BANCARIO ___|");
		format(string, sizeof(string), "  Antiguo Balance: $%d", curfunds);
		Message(playerid, COLOR_GRAD2, string);
		format(string, sizeof(string), "  Depositó: $%d",params[0]);
		Message(playerid, COLOR_GRAD4, string);
		format(string, sizeof(string), "  Gastos de Operación: $%d",bizztill);
		Message(playerid, COLOR_GRAD4, string);
		Message(playerid, COLOR_GRAD6, "|-----------------------------------------|");
		format(string, sizeof(string), "  Nuevo Balance: $%d", PlayerInfo[playerid][pAccount]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s hace una transacción bancaria.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	} else Message(playerid, COLOR_GREY, "¡No estás en el banco!");
	return 1;
}
zcmd(transferir, playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 2) return Message(playerid, COLOR_GRAD1, "¡Necesitas ser mínimo nivel 2!");
	if(!IsAtBank(playerid)) 			return Message(playerid, COLOR_GRAD2, "No estás en los cajeros del banco.");
	if(!sscanf(params, "ii", params[0], params[1]))
	{
		if(params[1] < 1 || params[1] > 10000000) return Message(playerid, COLOR_GRAD2, "Máx: 10000000");
		if(params[1] > PlayerInfo[playerid][pAccount]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
		if (IsPlayerConnected(params[0]))
		{
			new string[128], bizztill, total;
			bizztill = params[1] / 500;
			Till(16, bizztill);
			total = params[1]-bizztill;
			PlayerInfo[playerid][pAccount] -= params[1];
			PlayerInfo[params[0]][pAccount] += total;
			format(string, sizeof(string), "* Has transferido %d$ a %s", params[1], PlayerName(params[0]));
			Message(playerid, COLOR_GRAD1, string);
			format(string, sizeof(string), "* Recibiste una transferencia de %d$ de %s.", params[1], PlayerName(playerid));
			Message(params[0], COLOR_GRAD1, string);
		}
		else Message(playerid, COLOR_GRAD2, "Jugador desconectado.");
	}
	else Message(playerid, COLOR_GREY, "Utilice: /transferir <PlayerID> <Monto>");
	return 1;
}
zcmd(darcheque, playerid, params[]){
	if(!sscanf(params, "ui", params[0],params[1])){
		if(params[0] == playerid) return Message(playerid, COLOR_GRAD2, "¡No puedes darte un cheque a ti mismo!");
		if(params[1] > PlayerInfo[playerid][pAccount]) return Message(playerid, COLOR_GRAD2, "No puedes sobregirar un cheque.");
		if(params[1] < 1 || params[1] < 0) return Message(playerid, COLOR_GRAD2, "Como vas a dar cheque en negativo");
		if(params[1] < 1 || params[1] > 30000000) return Message(playerid, COLOR_GRAD2, "No puedes dar un cheque con mas dinero");
		if(IsPlayerConnected(params[0])){
			if(ProxDetectorS(5.0, playerid, params[0])){
				new string[128];
				PlayerInfo[playerid][pAccount] -= params[1];
				PlayerInfo[params[0]][pCheques] += params[1];
				format(string, sizeof(string), "* %s saca su chequera, firma un cheque y se lo da a %s", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* Has dado un cheque por %d$ a %s.", params[1], PlayerName(params[0]));
				Message(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "* Has recibido un cheque por %d$ de %s.", params[1], PlayerName(playerid));
				Message(params[0], COLOR_GRAD4, string);
			} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /darcheque <PlayerID> <Cantidad>");
	return 1;
}
zcmd(cobrarcheques, playerid, params[]){
	new string[128], bizztill, total;
	if(!PlayerToPoint(30,playerid,361.3453,-1621.5684,39.2349)) return Message(playerid, COLOR_GRAD2, "No estás en el banco.");
	if(PlayerInfo[playerid][pCheques] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes ningun cheque para cobrar!");
	bizztill = PlayerInfo[playerid][pCheques] / 100;
	Till(16, bizztill);
	total = PlayerInfo[playerid][pCheques]-bizztill;
	PlayerInfo[playerid][pAccount] += total;
	format(string, sizeof(string), "* Has cobrado tus cheques, un valor de %d$ fueron añadidos a tu cuenta bancaria.", PlayerInfo[playerid][pCheques]);
	Message(playerid, COLOR_GRAD3, string);
	PlayerInfo[playerid][pCheques] = 0;
	return 1;
}
zcmd(vercheques, playerid, params[]){
	new string[128];
	format(string, sizeof(string), "* Los cheques que has recibido suman un total de %d$", PlayerInfo[playerid][pCheques]);
	Message(playerid, COLOR_GRAD2, string);
	return 1;
}
zcmd(tirar, playerid, params[])
{
	new string[128], apuesta, tiro;
	if(IsAtBowling(playerid))
	{
		if (sscanf(params, "d", apuesta)) return Message(playerid, COLOR_GRAD2, "Utiliza: /tirar [$$] (Establece la apuesta)");
		if (apuesta > 10 || apuesta < 1) return Message(playerid, COLOR_GRAD2, "Apuesta mínimo 1 máximo 10");
		if (apuesta > GetPlayerMoney(playerid)) return Message(playerid, COLOR_GRAD2, "No tienes esa cantidad!");
		if (Bowling[playerid] == 1) return Message(playerid, COLOR_GRAD2, "Espera unos segundos para volver a tirar");
		tiro = random(11);
		switch(tiro)
		{
			case 0:{
				format(string, sizeof(string), "** %s tiró la bola muy mal y se desvió fuera", PlayerName(playerid));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = (-10)+(-apuesta);
			}
			case 1:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = (-9)+(-apuesta);
			}
			case 2:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = (-8)+(-apuesta);
			}
			case 3:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = (-7)+(-apuesta);
			}
			case 4:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = (-6)+(-apuesta);
			}
			case 5:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = apuesta;
			}
			case 6:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = 6+apuesta;
			}
			case 7:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = 7+apuesta;
			}
			case 8:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = 8+apuesta;
			}
			case 9:{
				format(string, sizeof(string), "** %s tira la bola y derriba %d bolos", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = 9+apuesta;
			}
			case 10:{
				format(string, sizeof(string), "** %s tiró el balón e hizo un strike!", PlayerName(playerid), tiro);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BowlingMoney[playerid] = 10+apuesta;
			}
		}
		SetPlayerAttachedObject(playerid, 1, 3065, 6);
		format(string, sizeof(string), "** Apostaste %d, y tiraste %d bolos. Tus ganancias son de: %d", apuesta, tiro, BowlingMoney[playerid]);
		Message(playerid, COLOR_WHITE, string);
		GivePlayerMoney(playerid, BowlingMoney[playerid]);
		Bowling[playerid] = 1;
		SetTimerEx("ShootAgain", 10000, 0, "i", playerid);
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás en una bolera!");
	return 1;
}
zcmd(bmbuy, playerid, params[])
{
	Connect(playerid) {
		if(PlayerToPoint(10,playerid, 1400.0763,-1444.9131,8.6699))
		{
			if(sscanf(params, "d", params[0]))
			{
				Message(playerid, COLOR_WHITE, "Utiliza: /BmBuy [# Item]");
				Message(playerid, COLOR_BLUE, "***              BlackMarket              ***");
				Message(playerid, COLOR_GRAD2, "| 1: Puño Americano 20$");
				Message(playerid, COLOR_GRAD2, "| 2: Máscara             50$");
				Message(playerid, COLOR_GRAD2, "| 3: Ganzúas             70$");
				Message(playerid, COLOR_GRAD2, "| 4: Pick Lock           90$");
				Message(playerid, COLOR_GRAD2, "| 5: Soga + Venda       120$");
				Message(playerid, COLOR_GRAD2, "| 6: Pistola 9mm        300$");
				return 1;
			}
			switch(params[0])
			{
				case 1:
				{
					if(CheckMoney(playerid, 20))
					{
						Bought(playerid, 20);
						Message(playerid, COLOR_WHITE, "Compraste un puño americano");
						SafeGivePlayerWeapon(playerid, 1,1);
						return 1;
					}
				}
				case 2:
				{
					if(CheckMoney(playerid, 50))
					{
						Bought(playerid, 50);
						Message(playerid, COLOR_WHITE, "Máscara comprada, utiliza /mascara");
						PlayerInfo[playerid][pMask] = 1;
						return 1;
					}
				}
				case 3:
				{
					if(CheckMoney(playerid, 70))
					{
						Ganzuas[playerid] = 1;
						Bought(playerid, 70);
						Message(playerid, COLOR_WHITE, "Ganzuas compradas.");
						return 1;
					}
				}
				case 4:
				{
					if(CheckMoney(playerid, 90))
					{
						Message(playerid, COLOR_WHITE, "Compraste un PickLock");
						PickLock[playerid] = 1;
						Bought(playerid, 90);
						return 1;
					}
				}
				case 5:
				{
					if(CheckMoney(playerid, 120))
					{
						Message(playerid, COLOR_WHITE, "Compraste una kit de secuestro");
						Rope[playerid] = 1;
						Bought(playerid, 120);
						return 1;
					}
				}
				case 6:
				{
					if(CheckMoney(playerid, 300))
					{
						Bought(playerid, 300);
						Message(playerid, COLOR_WHITE, "Compraste una 9mm");
						SafeGivePlayerWeapon(playerid, 22,20);
						return 1;
					}
				}
				default:
				Message(playerid, COLOR_GRAD2, "Item incorrecto - No tienes dinero");
			}
		} else Message(playerid, COLOR_GRAD2, "¡No estás en el mercado negro!");
	}
	return 1;
}
zcmd(telefono, playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0) return Message(playerid, COLOR_GREY, "No puedes usar esto aquí.");
	if(PlayerInfo[playerid][pPnumber] == 0) return Message(playerid, COLOR_GRAD2, "No tienes teléfono, cómpra uno en la tienda de electrónica");
	ShowPlayerDialog(playerid, IPHONE_OPTIONS, DIALOG_STYLE_LIST, "{DD1111}Teléfono {FFFFFF}- Opciones", 
		"{DD1111}Teléfono\t{FFFFFF}-\t{11AA11}Llamar\n{DD1111}Teléfono\t{FFFFFF}-\t{008899}Mandar SMS\n{DD1111}Teléfono\t{FFFFFF}-\t{FFBB88}Buzón entrada\n{DD1111}Teléfono\t{FFFFFF}-\t{FFEE88}Agenda\n{DD1111}Teléfono\t{FFFFFF}-\t{952BFF}Consultar Saldo\n{DD1111}Teléfono\t{FFFFFF}-\t{658EBB}Números de Servicios",
		"Aceptar", "Salir");
	return 1;
}
zcmd(iphone, playerid, params[]) return cmd_telefono(playerid, params);
zcmd(movil, playerid, params[]) return cmd_telefono(playerid, params);
zcmd(ipod, playerid, params[])
{
	if(PlayerInfo[playerid][pIpod] == 0) return Message(playerid, COLOR_GRAD2, "No tienes un IPOD, cómpra uno en el 24/7");
	ShowPlayerDialog(playerid, IPOD_MENU, DIALOG_STYLE_LIST, "IPOD Menú", "MP3\nRadio\nApagar", "Aceptar", "Salir");
	return 1;
}
zcmd(enmascarados, playerid, params[]){
	if(IsPlayerConnected(playerid))
		CheckAntiAbusos(playerid)
	if(PlayerInfo[playerid][pAdminCP] < 1) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");{
		SendClientMessage(playerid, COLOR_GRAD1, "Usuarios enmascarados:");
		for(new i = 0; i < MAX_PLAYERS; i++){
			if(IsPlayerConnected(i)){
				if(Maskuse[i] == 1){
					new string[128];
					format(string, 256, "** ID: %d ** %s", i, PlayerName(i));
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
		}
	}
	return 1;
}
zcmd(flist, playerid, params[])
{
	new member = PlayerInfo[playerid][pMember];
	new leader = PlayerInfo[playerid][pLeader];
	new teamnumber;
	if (PlayerInfo[playerid][pLeader] != 0) teamnumber = PlayerInfo[playerid][pLeader];
	else if (PlayerInfo[playerid][pMember] != 0) teamnumber = PlayerInfo[playerid][pMember];
	if(member > 0 || leader > 0)
	{
		Message(playerid, COLOR_GREEN, "- Miembros activos -");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			new string[32];
			if (IsPlayerConnected(i))
			{
				if (PlayerInfo[i][pLeader] == teamnumber) format(string, sizeof(string), "%s (LÍDER)",PlayerName(i));
				else if (PlayerInfo[i][pMember] == teamnumber) format(string, sizeof(string), "%s, Rank %d",PlayerName(i), PlayerInfo[i][pRank]);
				if(strlen(string) > 0) Message(playerid, COLOR_GRAD2, string);
			}
		}
	} else Message(playerid, COLOR_GRAD2, "No perteneces a ninguna facción.");
	return 1;
}
zcmd(miembros, playerid, params[])
{
	return cmd_flist(playerid, params);
}
    // zcmd:attach ============================================================================================================================
zcmd(mochila, playerid, params[])
{
	if(ReduceTime[playerid] == 1) return Message(playerid, COLOR_GREY, "Este comando se utiliza cada 3 segundos.");
	if(PlayerInfo[playerid][pMochila] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes una mochila!");
	else
	{
		if(!sscanf(params, "s[32]", params[0]))
		{
			new string[128], gunID = GetPlayerWeapon(playerid), gunAmmo = GetPlayerAmmo(playerid), gunname[32];
			if(strcmp(params[0],"garma",true) == 0)
			{
				if(gunID != 0 && gunAmmo != 0)
				{
					if(Mochila[playerid][0] == 0 || Mochila[playerid][1] == 0)
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						Mochila[playerid][0] = gunID;
						Mochila[playerid][1] = gunAmmo;
						RemovePlayerWeapon(playerid, Mochila[playerid][0]);
						GetWeaponName(gunID, gunname, sizeof(gunname));
						format(string, sizeof(string), "* %s guarda una %s en su mochila.", PlayerName(playerid), gunname);
						ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerAttachedObject(playerid, 1, 371, 1, 0.0000, -0.0954, -0.0012, 359.8081, 89.4325, 358.1167);
						Att_Obj_Slot_1[playerid] = "Mochila";
					}
					else Message(playerid, COLOR_GREY, "Ya tienes un arma guardada.");
				}
				else Message(playerid, COLOR_GREY, "No tienes ningún arma para guardar.");
			}
			else if(strcmp(params[0],"sarma",true) == 0)
			{
				if(Mochila[playerid][0] != 0 && Mochila[playerid][1] != 0)
				{
					ReduceTime[playerid] = 1;
					SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					GetWeaponName(Mochila[playerid][0], gunname, sizeof(gunname));
					GivePlayerWeapon(playerid, Mochila[playerid][0], Mochila[playerid][1]);
					format(string, sizeof(string), "* %s saca una %s de su mochila.", PlayerName(playerid), gunname);
					ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Mochila[playerid][0] = 0;
					Mochila[playerid][1] = 0;
					if(strcmp(Att_Obj_Slot_1[playerid],"Mochila",true) == 0)
					{
						RemovePlayerAttachedObject(playerid, 1);
						Att_Obj_Slot_1[playerid] = "Vacio";
					}
				}
				else Message(playerid, COLOR_GREY, "No tienes ningún arma guardada en tu mochila.");
			}
			else if(strcmp(params[0],"agarrar",true) == 0)
			{
				SetPlayerAttachedObject(playerid, 1, 371, 1, 0.0000, -0.0954, -0.0012, 359.8081, 89.4325, 358.1167);
				Att_Obj_Slot_1[playerid] = "Mochila";
				format(string, sizeof(string), "* %s agarra su mochila.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else Message(playerid, COLOR_GREY, "Item incorrecto.");
		}
		else Message(playerid, COLOR_GREY, "Utilice: /mochila <nombre> (garma, sarma, agarrar)");
	}
	return 1;
}
zcmd(maleta, playerid, params[])
{
	if(PlayerInfo[playerid][pMaleta] == 0) return Message(playerid, COLOR_GRAD2, "No tienes una maleta!");
	new string[64];
	SetPlayerAttachedObject(playerid, 0, 1210, 6, 0.289999, 0.079999, -0.000000, 0.000000, -100.000000, 1.000000);
	Att_Obj_Slot_1[playerid] = "Maleta";
	format(string, sizeof(string), "* %s agarra su maletín.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return Message(playerid, COLOR_GRAD2, "Utiliza /qobjeto para quitar el objeto!");
}
zcmd(gafas, playerid, params[])
{
	if(PlayerInfo[playerid][pGafas] == 0) return Message(playerid, COLOR_GRAD1, " No tienes gafas.");
	new string[64];
	if(UsingRayBan[playerid] == 0)
	{
		SetPlayerAttachedObject( playerid, 3, 19022, 18, -0.008390, -0.110742, -0.001029, 88.036231, 353.353454, 1.575388, 0.826243, 1.000000, 1.012219 );
		Att_Obj_Slot_3[playerid] = "Gafas";
		format(string, sizeof(string), "* %s se pone sus gafas de sol.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
		TextDrawBoxColor(SunGlasses, 0x00000040);
		TextDrawShowForPlayer(playerid, SunGlasses);
		UsingRayBan[playerid] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid, 3);
		Att_Obj_Slot_3[playerid] = "Vacío";
		format(string, sizeof(string), "* %s se quita sus gafas de sol.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		TextDrawHideForPlayer(playerid, SunGlasses);
		ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
		UsingRayBan[playerid] = 0;
	}
	return 1;
}
zcmd(casco, playerid, params[])
{
	if(PlayerInfo[playerid][pCasco] == 0) return Message(playerid, COLOR_GRAD2, "No tienes casco!");
	new string[48];
	format(string, sizeof(string), "* %s se coloca su casco.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	SetPlayerAttachedObject( playerid, 2, 18645, 2, 0.054665, 0.019579, -0.002646, 24.949916, 96.733367, 68.246139, 1.016691, 1.000000, 1.094870 );
	Att_Obj_Slot_2[playerid] = "Casco";
	return Message(playerid, COLOR_GRAD2, "Utiliza /qcasco para quitarte el casco");
}
zcmd(qcasco, playerid, params[])
{
	if(PlayerInfo[playerid][pCasco] == 0) return Message(playerid, COLOR_GRAD2, "No tienes casco!");
	new string[48];
	format(string, sizeof(string), "* %s se saca su casco.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	RemovePlayerAttachedObject(playerid,2);
	return Att_Obj_Slot_2[playerid] = "Vacío";
}
zcmd(brillo, playerid, params[])
{
	if(UsingRayBan[playerid] == 0) return Message(playerid,COLOR_GRAD2,"No tienes las gafas puestas. (/gafas)");
	else ShowPlayerDialog(playerid,BRILLO_GAFAS,DIALOG_STYLE_INPUT,"Sistema de Gafas","Porfavor elije el brillo de tus gafas\nLuminoso\nNormal\nOscuro\nMuyOscuro","Ok","Cancel");
	return 1;
}
zcmd(qobjeto, playerid, params[])
{
	new string[64];
	if(!sscanf(params, "d", params[0]))
	{
		switch(params[0])
		{
			case 0:
			{
				RemovePlayerAttachedObject(playerid, 0);
				format(string, sizeof(string), "Removiste el Slot 0: %s", Att_Obj_Slot_0[playerid]);
				Message(playerid, COLOR_GRAD2, string);
				return Att_Obj_Slot_0[playerid] = "Vacío";
			}
			case 1:
			{
				RemovePlayerAttachedObject(playerid, 1);
				format(string, sizeof(string), "Removiste el Slot 1: %s", Att_Obj_Slot_1[playerid]);
				Message(playerid, COLOR_GRAD2, string);
				return Att_Obj_Slot_1[playerid] = "Vacío";
			}
			case 2:
			{
				RemovePlayerAttachedObject(playerid, 2);
				format(string, sizeof(string), "Removiste el Slot 2: %s", Att_Obj_Slot_2[playerid]);
				Message(playerid, COLOR_GRAD2, string);
				return Att_Obj_Slot_2[playerid] = "Vacío";
			}
			case 3:
			{
				RemovePlayerAttachedObject(playerid, 3);
				format(string, sizeof(string), "Removiste el Slot 3: %s", Att_Obj_Slot_3[playerid]);
				Message(playerid, COLOR_GRAD2, string);
				return Att_Obj_Slot_3[playerid] = "Vacío";
			}
			case 4:
			{
				RemovePlayerAttachedObject(playerid, 4);
				format(string, sizeof(string), "Removiste el Slot 4: %s", Att_Obj_Slot_4[playerid]);
				Message(playerid, COLOR_GRAD2, string);
				return Att_Obj_Slot_4[playerid] = "Vacío";
			}
			default: Message(playerid, COLOR_GRAD2, "Slots: 0-4");
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "- /qobjeto [slot(0-5)]     Remueve un objeto.");
		format(string, sizeof(string), "Slot 0 (MANOS) - %s", Att_Obj_Slot_0[playerid]); Message(playerid, COLOR_GRAD2, string);
		format(string, sizeof(string), "Slot 1 (ESPALDA) - %s", Att_Obj_Slot_1[playerid]); Message(playerid, COLOR_GRAD2, string);
		format(string, sizeof(string), "Slot 2 (CABEZA) - %s", Att_Obj_Slot_2[playerid]); Message(playerid, COLOR_GRAD2, string);
		format(string, sizeof(string), "Slot 3 (OJOS) - %s", Att_Obj_Slot_3[playerid]); Message(playerid, COLOR_GRAD2, string);
		format(string, sizeof(string), "Slot 4 (OTRO) - %s", Att_Obj_Slot_4[playerid]); Message(playerid, COLOR_GRAD2, string);
		return 1;
	}
	return 1;
}
	// zcmd:job ============================================================================================================================
zcmd(trabajo, playerid, params[])
{
	if(PlayerInfo[playerid][pContract] > 0)
	{
		new string[50];
		format(string, sizeof(string), "* Tienes %d horas de contrato a cumplir!", PlayerInfo[playerid][pContract]);
		return Message(playerid, COLOR_GRAD2, string);
	}
	if (PlayerToPoint(3.0, playerid, 994.3551,-1296.4821,13.5469))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 4;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Vendedor de móviles por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 1616.0334,-1897.3287,13.5491)) {
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 2;
   		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Barrendero por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 378.3128,-119.6172,1001.4922))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 6;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Pizzero por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 893.6022,-2488.9248,3098.3235))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 7;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Pescador por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 1956.9806,-2183.5469,13.5469))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 3;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Piloto por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 1684.7078,-1944.5562,13.5469))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 1;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Chófer de tren por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 2275.2427,-1105.6196,37.9766))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 5;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Ladrón por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 2215.5657,-2661.1208,13.5469))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 8;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Camionero por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, -1824.7786,139.8424,18.9315))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 9;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Taxista por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 1070.6956,-1861.3844,13.5857))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 11;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Guardaespaldas por 3 horas.");
	}
	else if (PlayerToPoint(3.0, playerid, 1649.5122,-1578.7310,13.5319))
	{
		GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
		PlayerInfo[playerid][pJob] = 12;
		PlayerInfo[playerid][pContract] = 3;
		UpdatePlayerStat(playerid);
		return Message(playerid, COLOR_WHITE, "Has firmado el contrato de Detective Privado por 3 horas.");
	}
	return 1;
}
zcmd(renunciar, playerid, params[])	{
	if(PlayerInfo[playerid][pJob] > 0 && PlayerInfo[playerid][pContract] <= 0) {
		PlayerInfo[playerid][pJob] = 0;
		UpdatePlayerStat(playerid);
		Message(playerid, COLOR_GRAD2, "* Has renunciado a tu trabajo, ya puedes obtener uno nuevo.");
	} else if(PlayerInfo[playerid][pJob] == 0) {
		Message(playerid, COLOR_GRAD2, "* Tu no tienes trabajo.");
	} else {
		new string[50];
		format(string, sizeof(string), "* Tienes %d horas de contrato a cumplir todavia.", PlayerInfo[playerid][pContract]);
		Message(playerid, COLOR_GRAD2, string);
	}
	return 1;
}
zcmd(vendertelefono, playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 4) return Message(playerid, COLOR_GRAD1, "No eres vendedor de móviles!");
	if(!sscanf(params, "uii", params[0], params[1], params[2]))
	{
		if(!ProxDetectorS(5.0, playerid, params[0])) return Message(playerid, COLOR_GRAD1, "¡ No estás cerca del jugador !");
		if(params[0] != INVALID_PLAYER_ID)
		{
			new string[128];
			if(params[1] > 999999 || params[1] < 1000) return Message(playerid, COLOR_GRAD2, "Número entre 4-6 cifras.");
			if(params[2] < 1 || params[2] > 500) return Message(playerid, COLOR_GRAD2, "Precio entre 1 a 500.");
			NumSeller[params[0]] = playerid;
			NumBuy[params[0]] = params[1];
			NumPrice[params[0]] = params[2];
			Message(playerid, 0x00DCF4FF, "Ofreciste vender un telefono");
			format(string, sizeof(string), "* %s te ofrece venderte el número %d por %d$, utiliza /aceptar telefono", PlayerName(playerid), params[1], params[2]);
			return Message(params[0],0x00DCF4FF, string);
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utiliza: /vendertelefono <ID> <número> <precio>");
	return 1;

}
zcmd(proteger, playerid, params[]){
	new string[150];
	if(PlayerInfo[playerid][pJob] == 11){
		if(!sscanf(params, "dd", params[0], params[1]))	{
			if(ProxDetectorS(8.0, playerid, params[0]))	{
				if(playerid == params[0]){
					SendClientMessage(playerid, COLOR_GREY, "No puedes protegerte a ti mismo con tu trabajo de guardespaldas.");
					return 1;
				}
				if(params[1] < 1 || params[1] > 99999)
				{
					SendClientMessage(playerid, COLOR_GREY, "El precio no puede ser menor de 1 ni mayor de 99999");
					return 1;
				}
				format(string, sizeof(string), "* Ofreciste a %s protección por $%d.", PlayerName(params[0]), params[1]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s te ha ofrecido su protección de guardespaldas %s por $%d, (usa /aceptar proteccion ó /cancelar proteccion).", PlayerName(playerid), params[1]);
				SendClientMessage(params[0], COLOR_LIGHTBLUE, string);
				Guardes_Oferta[params[0]] = playerid;
				Guardes_Precio[params[0]] = params[1];
				return 1;
			}
			else SendClientMessage(playerid,COLOR_GRAD2, "Necesitas estar a almenós 8 centimetros del que protegerás.");
		}
		else SendClientMessage(playerid,COLOR_GRAD2, "Comando: /proteger [ID] [Precio]");
	}
	else SendClientMessage(playerid,COLOR_GRAD2, "¡No eres guardespaldas!");
	return 1;
}
zcmd(ruta, playerid, params[])
{
	new idcar = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pJob] == 1)
	{
		if(isTrenVehicle(idcar))
		{
			if(Train_Route[playerid] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya estás en ruta!");
			Train_Route[playerid] = 1;
			Message(playerid, COLOR_GRAD2, "Dirígete al Checkpoint para recoger a la gente!");
			SetPlayerCheckpoint(playerid, 805.1542,-1357.9359,-0.1724, 5.0);
			GText(playerid, "~w~Proxima estacion:~n~~r~LS", 5000, 1);
			TogglePlayerControllable(playerid, 1);
			return 1;
		}
		else return Message(playerid, COLOR_GRAD2, "¡No estás en un tren!");
	}
	else if(PlayerInfo[playerid][pJob] == 3)
	{
		if(isPilotosVehicle(idcar))
		{
			if(Plane_Route[playerid] > 0) return Message(playerid, COLOR_GRAD2, "¡Ya estás en ruta!");
			Plane_Route[playerid] = 1;
			Message(playerid, COLOR_GRAD2, "Aterriza en los diferentes aereopuertos de San Andreas.");
			SetPlayerCheckpoint(playerid,1481.7509,1557.6327,11.7434, 15.0);
			GText(playerid, "~w~Proximo destino:~n~~r~Aereopuerto de Las venturas", 5000, 1);
			TogglePlayerControllable(playerid, 1);
			return 1;
		}
		else return Message(playerid, COLOR_GRAD2, "¡No estás en un avión!");
	}
	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(cancelarentrega, playerid, params[])
{
	new idcar = GetPlayerVehicleID(playerid);
	if(isCamionerosVehicle(idcar) && Camion[playerid] == idcar)
	{
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		RemovePlayerFromVehicle(playerid);
	}
	Camion[playerid] = 9999;
	Mercancia[playerid] = 0;
	PlayerIsRuta[playerid] = 0;
	PlayerCargando[playerid] = 0;
	PlayerDescargando[playerid] = 0;
	DisablePlayerCheckpoint(playerid);
	Message(playerid, COLOR_GRAD2, "¡Has cancelado la entrega de la mercancía de tu camión!");
	return 1;
}
zcmd(barrer, playerid, params[])
{
	if(PlayerIsSweeping[playerid] == 1) return Message(playerid, COLOR_GREY, "¡Ya estás barriendo las calles!");
	if(isBarrenderoVehicle(GetPlayerVehicleID(playerid)))
	{
		PlayerIsSweeping[playerid] = 1;
		TogglePlayerControllable(playerid, 1);
		new randomize;
		randomize = random(sizeof(gSweeperPoints));
		SetPlayerCheckpoint(playerid, gSweeperPoints[randomize][0], gSweeperPoints[randomize][1], gSweeperPoints[randomize][2], 5.0);
		Message(playerid, COLOR_WHITE, "Dirígete a los Checkpoints.");
	} else {
		Message(playerid, COLOR_GRAD2, "¡No estás en un Sweeper!");
	}
	return 1;
}
zcmd(dbarrer, playerid, params[])
{
	if(PlayerIsSweeping[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		PlayerIsSweeping[playerid] = 0;
		Message(playerid, COLOR_WHITE, "Has dejado de barrer.");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid, 1);
	}
	else Message(playerid, COLOR_GREY, "¡No estás barriendo!");
	return 1;
}
zcmd(vermapa, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pJob] == 7){
		if(PlayerInfo[playerid][pImplementos] == 1){
			SetPlayerCheckpoint(playerid, 547.4099,-3410.0576,-0.2234, 30.0);
			format(string, sizeof(string), "* %s saca su mapa del bolsillo y lo mira.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Message(playerid, COLOR_WHITE, "* Se han marcado en el mapa un lugar disponible para pescar.");
		} else Message(playerid, COLOR_GRAD2, "¡No tienes implementos de pesca!");
	} else Message(playerid, COLOR_GRAD2, "¡No eres pescador!");
	return 1;
}
zcmd(pescar, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pJob] == 7){
		if(PlayerInfo[playerid][pImplementos] == 1){
			if(PlayerInfo[playerid][pCarnada] >= 100){
				if(PlayerToPoint(100.0, playerid, 527.4099,-3410.0576,-0.2234)){
					if(PlayerInfo[playerid][pPeces] < 1000){
						if(Fishing[playerid] == 0){
							format(string, sizeof(string), "* %s le pone la carnada a las redes y las lanza al mar.", PlayerName(playerid));
							ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							Message(playerid, COLOR_WHITE, "* Ahora debes esperar 2 minutos para que las redes atrapen peces.");
							SetTimerEx("Pescando", 120000, false, "i", playerid);
							PlayerInfo[playerid][pCarnada] -= 100;
							Fishing[playerid] = 1;
						} else Message(playerid, COLOR_GRAD2, "¡Ya estas pescando, espera...!");
					} else Message(playerid, COLOR_GRAD2, "¡Ya tienes demasiados peces en el barco, primero ve y vendelos en el puerto!");
				} else Message(playerid, COLOR_GRAD2, "¡No estás en el lugar adecuado!");
			} else Message(playerid, COLOR_GRAD2, "¡No tienes carnada!");
		} else Message(playerid, COLOR_GRAD2, "¡No tienes implementos de pesca!");
	} else Message(playerid, COLOR_GRAD2 , "¡No eres pescador!");
	return 1;
}
zcmd(peces, playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "* Usted cuenta con un total de %d peces y %d carnadas", PlayerInfo[playerid][pPeces],PlayerInfo[playerid][pCarnada]);
	Message(playerid, COLOR_GRAD4, string);
	return 1;
}
    // zcmd: mecas ============================================================================================================================
zcmd(mm, playerid, params[])
{
	if(Team_Mecanicos(playerid))
	{
		if(OnDuty[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No estás de servicio!");
		return ShowPlayerDialog(playerid, MECANICO_MENU, DIALOG_STYLE_LIST, "-> Mecánico Menú <-", "Repararaciones\nGasolinera\nPiezas\nEmbargar\nRemolcar\nOtros\nDejar coche de fábrica", ">>", "<<");
	}
	else Message(playerid, COLOR_GRAD2, "¡No eres mecánico!");
	return 1;
}
    // zcmd: narcos ============================================================================================================================
zcmd(cosechardrogas, playerid, params[])
{
	if(DrugFarming[playerid] != 0) return Message(playerid, COLOR_GREY, "¡Ya estás cosechando droga!");
	if(isTraficantesCosechadoraVehicle(GetPlayerVehicleID(playerid)))
	{
		DrugFarming[playerid] = 1;
		TogglePlayerControllable(playerid, 1);
		new randomize;
		randomize = random(sizeof(gDrugFarmVar));
		SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
		Message(playerid, COLOR_WHITE, "Si deseas parar de cosechar, sal del vehículo.");
		Message(playerid, COLOR_WHITE, "Dirígete a los Checkpoints.");
	}
	else Message(playerid, COLOR_GREY, "¡No estás en una cosechadora!");
	return 1;
}
zcmd(cancelardrogas, playerid, params[])
{
	if(IsANarco(playerid))
	{
		if(Smuggling[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No estás importando droga!");
		Smuggling[playerid] = 0;
		SmugglingType[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Dejaste el contrabando de drogas.");
		return 1;
	}
	else Message(playerid, COLOR_GRAD2, "¡No eres narcotraficante!");
	return 1;
}
zcmd(venderdrogas, playerid, params[])
{
	if(sscanf(params,"uii",params[0],params[1],params[2]))
	{
		Message(playerid, COLOR_GRAD2, "Utiliza: /venderdrogas [ID] [#Tipo] [Cantidad]");
		return Message(playerid, COLOR_GRAD2, "Tipos: 1 - Speed || 2 - Extasis || 3 - Ritalin || 4 - Heroina || 5 - Marihuana");
	}
	new string[128];
	if(IsPlayerConnected(params[0]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			if(!ProxDetectorS(5.0,playerid, params[0])) return Message(playerid, COLOR_GRAD2, "Persona muy lejos.");
			if (IsANarco(playerid))
			{
				switch (params[1])
				{
					case 1:
					{
						if(PlayerInfo[playerid][pSpeed] < params[2]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta!");
						BuyNarco[params[0]] = playerid;
						NarcoSellArm[params[0]] = 1;
						NarcoSellAmmo[params[0]] = params[2];
						format(string, sizeof(string), "** Narcotraficante %s, te vende: %d gramo(s) Speed\n\n\tInserta importe a pagar", PlayerName(playerid), NarcoSellAmmo[params[0]]);
						ShowPlayerDialog(params[0], DRUGS_DIALOG, DIALOG_STYLE_INPUT, "Comprar drogas", string, "Aceptar", "Cancelar");
					}
					case 2:
					{
						if(PlayerInfo[playerid][pEctasy] < params[2]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta!");
						BuyNarco[params[0]] = playerid;
						NarcoSellArm[params[0]] = 2;
						NarcoSellAmmo[params[0]] = params[2];
						format(string, sizeof(string), "** Narcotraficante %s, te vende: %d gramo(s) Extasis\n\n\tInserta importe a pagar", PlayerName(playerid), NarcoSellAmmo[params[0]]);
						ShowPlayerDialog(params[0], DRUGS_DIALOG, DIALOG_STYLE_INPUT, "Comprar drogas", string, "Aceptar", "Cancelar");
					}
					case 3:
					{
						if(PlayerInfo[playerid][pRitalin] < params[2]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta!");
						BuyNarco[params[0]] = playerid;
						NarcoSellArm[params[0]] = 3;
						NarcoSellAmmo[params[0]] = params[2];
						format(string, sizeof(string), "** Narcotraficante %s, te vende: %d gramo(s) Ritalin\n\n\tInserta importe a pagar", PlayerName(playerid), NarcoSellAmmo[params[0]]);
						ShowPlayerDialog(params[0], DRUGS_DIALOG, DIALOG_STYLE_INPUT, "Comprar drogas", string, "Aceptar", "Cancelar");
					}
					case 4:
					{
						if(PlayerInfo[playerid][pHeroina] < params[2]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta!");
						BuyNarco[params[0]] = playerid;
						NarcoSellArm[params[0]] = 4;
						NarcoSellAmmo[params[0]] = params[2];
						format(string, sizeof(string), "** Narcotraficante %s, te vende: %d gramo(s) Heroina\n\n\tInserta importe a pagar", PlayerName(playerid), NarcoSellAmmo[params[0]]);
						ShowPlayerDialog(params[0], DRUGS_DIALOG, DIALOG_STYLE_INPUT, "Comprar drogas", string, "Aceptar", "Cancelar");
					}
					case 5:
					{
						if(PlayerInfo[playerid][pMarihuana] < params[2]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta!");
						BuyNarco[params[0]] = playerid;
						NarcoSellArm[params[0]] = 5;
						NarcoSellAmmo[params[0]] = params[2];
						format(string, sizeof(string), "** Narcotraficante %s, te vende: %d gramo(s) Marihuana\n\n\tInserta importe a pagar", PlayerName(playerid), NarcoSellAmmo[params[0]]);
						ShowPlayerDialog(params[0], DRUGS_DIALOG, DIALOG_STYLE_INPUT, "Comprar drogas", string, "Aceptar", "Cancelar");
					}
					default: Message(playerid, COLOR_GRAD2, "ITEM INCORRECTO!");
				}
			}
		}
	}
	return 1;
}
zcmd(fabricar, playerid, params[])
{
	if(!PlayerToPoint(10.0,playerid,2549.3479,-1294.4144,1044.1250)) return Message(playerid, COLOR_GRAD2, "¡No estás en la fabrica!");
	if(IsANarco(playerid))
	{
		ShowPlayerDialog(playerid,CREATE_WEAPON,DIALOG_STYLE_LIST,"Fábrica de Armas",   \
			"Arma		\tMateriales \tMunición/Unidades\n" \
			"Navaja 	\t\t25 \t1\n" \
			"Bate 		\t40 \t1\n" \
			"Katana		\t80 \t1\n" \
			"C.Molotov 	\t120 \t1\n" \
			"9mm 		\t200 \t140\n" \
			"D.Eagle 	\t300 \t140\n" \
			"S.Pistol 	\t280 \t140\n" \
			"Shotgun	\t450 \t60\n" \
			"SPAS12		\t500 \t60\n" \
			"MP5		\t190 \t150\n" \
			"AK47		\t200\t150\n" \
			"M4			200 \t150\n" \
			"Rifle		\t420 \t45\n" \
			"Sniper		\t500 \t60\n" \
			,"Aceptar","Salir");
	}
	return 1;
}
zcmd(venderarma, playerid, params[])
{
	if(!IsANarco(playerid)) return Message(playerid, COLOR_GREY, "¡No eres un narcotraficante!");
	new gunname[12], string[128];
	if(GetPlayerWeapon(playerid) == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningún arma en mano!");
	if(sscanf(params, "ud", params[0], params[1])) return Message(playerid, COLOR_GRAD2, "Utilice: /venderarma <ID> <precio>");
	if(params[1] < 1 || params[1] > 9999) return Message(playerid, COLOR_GRAD2, "Precio: 1 - 9999$");
	if(IsPlayerConnected(params[0]))
	{
		if(ProxDetectorS(8.0,playerid, params[0]))
		{
			GetWeaponName(GetPlayerWeapon(playerid),gunname, sizeof(gunname));
			BuyNarco[params[0]] = playerid;
			NarcoSellPrice[params[0]] = params[1];
			NarcoSellArm[params[0]] = GetPlayerWeapon(playerid);
			NarcoSellAmmo[params[0]] = GetPlayerAmmo(playerid);
			format(string, sizeof(string), "\t\tComprar %s (Balas:%d)\n\tEl Narcotraficante %s te ha ofrecido que le compres un arma. ¿Aceptas?",gunname,NarcoSellAmmo[params[0]],PlayerName(playerid));
			SendRequest(params[0],string);
			Facturing[params[0]] = 1;
			Petition_ID[params[0]] = 2;
			Message(playerid, COLOR_GRAD2, "- Ofreciste venderle el arma, espera.");
			return 1;
		}
		else return Message(playerid, COLOR_GRAD2, "¡Muy lejos de este jugador!");
	}
	return 1;
}
zcmd(pda, playerid, params[])
{
	if(IsANarco(playerid))
	{
		ClearChatbox(playerid, 10);
		new string[64];
		Message(playerid, COLOR_YELLOW, "====================== PDA ======================");
		format(string, sizeof(string), ":: Materiales -- %d ::", PlayerInfo[playerid][pMats]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), ":: Droga virgen -- %d ::", PlayerInfo[playerid][pDrugs]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), ":: Speed -- %d ::", PlayerInfo[playerid][pSpeed]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), ":: Extasis -- %d ::", PlayerInfo[playerid][pEctasy]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), ":: Ritalin -- %d ::", PlayerInfo[playerid][pRitalin]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), ":: Heroina -- %d ::", PlayerInfo[playerid][pHeroina]);
		Message(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), ":: Marihuana -- %d ::", PlayerInfo[playerid][pMarihuana]);
		Message(playerid, COLOR_WHITE, string);
		Message(playerid, COLOR_YELLOW, "====================== ***** ======================");
		return 1;
	}
	return 1;
}
zcmd(importardrogas, playerid, params[])
{
	if(IsANarco(playerid))
	{
		if(Smuggling[playerid] == 0)
		{
			new string[64];
			if(!sscanf(params, "s[64]i", string, params[1]))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 442)
				{
					if(PlayerToPoint(5.0,playerid,-1107.2126,-1161.9325,129.2188))
					{
						if(PlayerInfo[playerid][pDrugs] < params[1]) return Message(playerid, COLOR_GRAD2, "Cantidad inccorrecta.");

						if(strcmp(string,"speed",true) == 0)    	DrugsSmuggling(playerid, 1, params[1]);
						else if(strcmp(string,"extasy",true) == 0)  DrugsSmuggling(playerid, 2, params[1]);
						else if(strcmp(string,"ritalin",true) == 0) DrugsSmuggling(playerid, 3, params[1]);
						else if(strcmp(string,"heroina",true) == 0) DrugsSmuggling(playerid, 4, params[1]);
						else if(strcmp(string,"marihuana",true) == 0) DrugsSmuggling(playerid, 5, params[1]);
						else Message(playerid, COLOR_GRAD2, "Item incorrecto");
					}
					else Message(playerid, COLOR_GRAD2, "¡No estás en el lugar de importación de mercancías!");
				} else Message(playerid, COLOR_GRAD2, " ¡No estas en un coche para importar drogas!");
			}
			else
			{
				Message(playerid, COLOR_GRAD2, "Utilice: /importar <Nombre> <Cantidad>");
				Message(playerid, COLOR_GRAD2, "Nombre: speed, extasy, ritalin, heroina, marihuana.");
			}
		}
		else
		{
			Smuggling[playerid] = 0;
			SmugglingType[playerid] = 0;
			Message(playerid, COLOR_GRAD2, "Dejaste el contrabando de drogas.");
		}
	}
	else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
    // zcmd: clothes =============================================================================================
zcmd(accesorios, playerid, params[])
{
	if(IsAtClothShop(playerid))
	{
		return ShowPlayerDialog(playerid, CLOTHES_CHOOSE_DIALOG, DIALOG_STYLE_LIST, "Accesorios", "Gafas\nBandanas\nGorras", "Ok", "Salir");
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás en ninguna tienda de ropa!");
	return 1;
}
/* -- Para el Ammu nation -- */
zcmd(habilidades, playerid, params[]){
	if(PlayerToPoint(5,playerid,314.26,-133.77,999.60)){
		ShowPlayerDialog(playerid, DIALOG_AMMU_MANAGER,DIALOG_STYLE_LIST,"Ammunation", "Deseo mejorar mis habilidades a través de libros comprados\nQuiero informarme sobre mis habilidades con las diferentes armas", "Aceptar", "Cancelar");
	}
	return 1;
}
zcmd(comprar, playerid, params[])
{
	if(Accesory[playerid] > 0)
	{
		Accesory[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Prenda de ropa comprada.");
		Bought(playerid, 50);
		if(PlayerToPoint(30.0,playerid,211.7609,-7.6523,1001.2109))     Till(9, 50);
		if(PlayerToPoint(20.0,playerid,207.7558,-103.3743,1005.2578))   Till(10, 50);
		return Message(playerid, COLOR_GRAD2, "Utiliza /qobjeto para quitartela");
	}
	if(PlayerToPoint(5,playerid,308.06,-141.46,999.60))
	{
		if(PlayerInfo[playerid][pGunLic] == 0) return Message(playerid, COLOR_GRAD2, " Vendedor: ¡No le puedo vender armas, usted no tiene licencia!");
			if(CheckMoney(playerid, 1))
			{
				ShowAmmunation(playerid);
				ProxDetector(25.0, playerid, "Staff dice: ¿Buenas, que desea?",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else
			{
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~", 5000, 3);
				ProxDetector(25.0, playerid, "Staff dice: Lo siento, no puedo fiarte mas",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}		
	}
	else if(PlayerToPoint(20, playerid,665.1661,-568.5448,16.3433))
	{
		return ShowPlayerDialog(playerid, DIALOG_FARMACIA, DIALOG_STYLE_LIST, "Farmacia + 24h","Condón (3$)\nIbuprofeno (10$)\nParches de Nicotina (30$)\nEnergisyl (40$)\nPastillas SIDA (1000$)\nAntiEpilectica (500$)\nPastillas Cancer (800$)", "Comprar", "Salir");
	}
	else if (PlayerToPoint(10, playerid, 1577.7031,-1895.5066,401.6359) || PlayerToPoint(10, playerid, 1573.5209,-1906.3552,405.1159))
	{
		return ShowPlayerDialog(playerid, COMPRAR_JOYAS, DIALOG_STYLE_LIST, "Joyeria Andes", "Anillo de Compromiso (25000$)\nAnillo de Oro (50000$)\nCollar de Perlas (100000$)\nAnillo de Diamantes (200000$)\nPulsera de oro (80000$)\nAretes de Diamantes (10000$)\nReloj de Oro (46000$)","Comprar", "Salir");
	}
	else if (PlayerToPoint(20, playerid,-103.81,-22.63,1000.72))
	{
		return ShowPlayerDialog(playerid, DELE_BUY_SEX, DIALOG_STYLE_LIST, "Sex Shop","Ropa De Mujer\nRopa De Hombre\nJuguetes De Diversion", "Comprar", "Salir");
	}
	else if (PlayerToPoint(15.0,playerid,-1972.1991,1208.0253,75.1797))
	{
		return ShowPlayerDialog(playerid, ELECTRONIC_BUY, DIALOG_STYLE_LIST, "Tienda Electronica", "1.\tTeléfono\t\t\t\t(200$)\n2. \tRecargar saldo\n3.\tIpod\t\t\t\t(280$)\n4.\tCámara\t\t\t\t(100$)\n5\tWalkie\t\t\t\t(260$)", "Comprar", "Cancelar");
	}
	else if(IsAt247(playerid))
	{
		return ShowBuyMenu(playerid);
	}
	return 1;
}
zcmd(recargar, playerid, params[]){
	if(IsAt247(playerid)){
		if(GetPlayerMoney(playerid) > 200){
			if(PlayerInfo[playerid][pPnumber] != 0) {
				ShowPlayerDialog(playerid, RECARGA_PHONE, DIALOG_STYLE_INPUT, "{018CFE}Operadora de Telefonia Celular OTECEL", "{FFFFFF}Ingresa tu numero celular para realizar la recarga", "Aceptar", "Cancelar");
			} else Message(playerid, COLOR_GRAD2, "No tienes teléfono, cómpra uno en la tienda de electronica");
		} else Message(playerid, COLOR_GRAD2, "¡Necesitas tener como mínimo $200!");
	} else Message(playerid, COLOR_GRAD2, "¡No estás en un 24-7!");
	return 1;
}
zcmd(cropa, playerid, params[])
{
	if(!IsAtClothShop(playerid) && PlayerInfo[playerid][pDonateT] < 1) return Message(playerid, COLOR_GRAD2, "¡No estás en una tienda de Ropa!");
	if(IsPlayerConnected(playerid))
	{
		ShowModelSelectionMenu(playerid, skinlist, "Selecciona el nuevo Skin");
	}
	else SendClientMessage(playerid, 0xFFFF00FF, "No estás conectado");
	return 1;
}
zcmd(armario, playerid, params[])
{
	armariolist = LoadModelSelectionMenu("armario.ini");
	ShowModelSelectionMenu(playerid, armariolist, "Armario personal");
	return 1;
}

    //comando antiguo del /cropa    (puesto en /cropaid)
zcmd(cropaid, playerid, params[])
{
	if(!IsAtClothShop(playerid) && PlayerInfo[playerid][pDonateT] < 1) return Message(playerid, COLOR_GRAD2, "¡No estás en una tienda de Ropa!");
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerDialog(playerid, SEL_SKIN, DIALOG_STYLE_INPUT, "> Comprar Ropa", "{78F700}Escribe el ID del que desees\n{FFFFFF}Recuerda que algunos skin's están reservados.\nTIP <1 - 299>\n", "Ok", "Salir");
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás conectado!");
	return 1;
}
zcmd(salirvestidor, playerid, params[])
{
	if(Accesory[playerid] > 0)
	{
		Accesory[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "Saliste del vestidor!");
	}
	else Message(playerid, COLOR_GRAD2, "No puedes utilizar el comando ahora");
	return 1;
}
    // zcmd : Salirfaccion
zcmd(salirfaccion, playerid, params[])
{
    if(PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pMember] == 0) return Message(playerid, COLOR_GRAD2, "No perteneces a ninguna facción."); // Aviso por si no tiene una facción.
    PlayerInfo[playerid][pMember] = 0;
    PlayerInfo[playerid][pLeader] = 0;
    PlayerInfo[playerid][pRank] = 0;
    GameTextForPlayer(playerid, "/w/HAZ SALIDO DE TU FACCION, AHORA ERES UN CIVIL", 3000, 3);
    SetPlayerSkin(playerid, 299);
    Message(-1, playerid, "Te has salido de tu facción, ahora eres un civil");
    return 1;
}
    // zcmd: chat ===================================================================================================================
zcmd(me, playerid, params[]) {
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		if(Maskuse[playerid] == 1) format(string, sizeof(string), "* Desconocido %s.", params[0]);
		else format(string, sizeof(string), "* %s %s.", PlayerName(playerid), params[0]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /me <Acción>");
	return 1;
}
zcmd(b, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		format(string, sizeof(string), "(( [OOC] %s(%d) dice: %s ))", PlayerName(playerid), playerid, params[0]);
		ProxDetector(20.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /b <Canal OOC>");
	return 1;
}
zcmd(c, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		if(Maskuse[playerid] == 1)	format(string, sizeof(string), "Desconocido dice: %s", params[0]);
		else format(string, sizeof(string), "%s dice: %s", PlayerName(playerid), params[0]);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /c <Texto>");
	return 1;
}
zcmd(intentar, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(Intentar[playerid] > 0) return Message(playerid, COLOR_GRAD2, "Espera 10 segundos para volver a utilizar este comando!");
	new randa = random(2)+1, string[128];
	if(sscanf(params, "s[128]", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /intentar <Acción>");
	if(Maskuse[playerid] == 1){
		if(randa == 1){
			format(string, sizeof(string), "* Desconocido consigue %s.", params[0]);
			ProxDetector(20.0, playerid, string, 0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF);
		}
		else{
			format(string, sizeof(string), "* Desconocido no logra %s.", params[0]);
			ProxDetector(20.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
		}
		Intentar[playerid] = 1;
		SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
	}
	else{
		if(randa == 1){
			format(string, sizeof(string), "* %s consigue %s.", PlayerName(playerid), params[0]);
			ProxDetector(20.0, playerid, string, 0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF);
		}
		else{
			format(string, sizeof(string), "* %s no logra %s.", PlayerName(playerid), params[0]);
			ProxDetector(20.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
		}
		Intentar[playerid] = 1;
		SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
	}
	return 1;
}
zcmd(do, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		if(Maskuse[playerid] == 1) format(string, sizeof(string), "* Desconocido (( %s )).", params[0]);
		else format(string, sizeof(string), "* %s (( %s )).", PlayerName(playerid), params[0]);
		ProxDetector(30.0, playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /do <Acción>");
	return 1;
}
zcmd(low, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		if(Maskuse[playerid] == 1) format(string, sizeof(string), "Desconocido susurra: %s", params[0]);
		else format(string, sizeof(string), "%s susurra: %s", PlayerName(playerid), params[0]);
		ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /low <Texto>");
	return 1;
}
zcmd(j, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 1) return  Message(playerid, COLOR_GRAD2,"¡No autorizado!");
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0])){
		new string[128];
		format(string, sizeof(string), "%s Administrador dice: %s", PlayerName(playerid), params[0]);
		ProxDetector(30.0, playerid, string,ORANGE_ADMIN,ORANGE_ADMIN,ORANGE_ADMIN,ORANGE_ADMIN,ORANGE_ADMIN);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /j <Texto>");
	return 1;
}
zcmd(g, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128];
		if(Maskuse[playerid] == 1) format(string, sizeof(string), "Desconocido grita: ¡¡ %s !!", params[0]);
		else format(string, sizeof(string), "%s grita: ¡¡ %s !!", PlayerName(playerid), params[0]);
		ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /g <Texto>");
	return 1;
}
zcmd(w, playerid, params[])
{
	if(!sscanf(params, "us[128]", params[0], params[1]))
	{
		if(params[0] != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[playerid][pAdminCP] > 0 || PlayerInfo[playerid][pAdminCP] == 0 && PlayerInfo[params[0]][pAdminCP] > 0)
			{
				if(HidePM[params[0]] == 1 && PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "Este administrador/ayudante tiene los susurros bloqueados!");
				new string[128];
				format(string, sizeof(string), "Mensaje de %s (%d): %s", PlayerName(playerid), playerid, params[1]);
				Message(params[0], 0xE9BC0AFF, string);
				format(string, sizeof(string), "Susurras a %s (%d): %s", PlayerName(params[0]), params[0] ,params[1]);
				Message(playerid,  0xE9BC0AFF, string);
				if(PlayerInfo[playerid][pAdminCP] != 2014 && PlayerInfo[params[0]][pAdminCP] != 2014)
				{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(PlayerInfo[i][pAdminCP] >= 2013)
						{
							if(See_MP[i] == 1)
							{
								format(string, sizeof(string), ":MP: %s(%d) a %s(%d): %s", PlayerName(playerid), playerid, PlayerName(params[0]), params[0], params[1]);
								Message(i, 0xFF8000FF, string);
							}
						}
					}
				}
			}
			else Message(playerid, COLOR_GRAD2, "¡Susurros solo ha administradores!");
		}
		else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /w <PlayerID> <Texto>");
	return 1;
}
zcmd(ita, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás conectado!");
	if(!Mafia_Italiana(playerid)) return Message(playerid, COLOR_GRAD2, "¡No sabes Italiano!");
	if(!sscanf(params, "s[128]", params[0]))
	{
		new Float:x, Float:y, Float:z, string[128];
		GetPlayerPos(playerid,x,y,z);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerToPoint(20, i, x, y, z))
				{
					if(PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12 || PlayerInfo[i][pMember] == 22 || PlayerInfo[i][pLeader] == 22)
					{
						format(string, sizeof(string), "%s dice: [Italiano] %s", PlayerName(playerid), params[0]);
						SendClientMessage(i, COLOR_FADE3, string);
					}
					else
					{
						format(string, sizeof(string), "%s dice: [Lenguaje desconocido para tí].", PlayerName(playerid));
						SendClientMessage(i, COLOR_FADE3, string);
					}
				}
			}
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /ita <Texto>");
	return 1;
}
zcmd(jap, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás conectado!");
	if(!Mafia_Yakuza(playerid)) return Message(playerid, COLOR_GRAD2, "¡No sabes Japones!");
	if(!sscanf(params, "s[128]", params[0]))
	{
		new Float:x, Float:y, Float:z, string[128];
		GetPlayerPos(playerid,x,y,z);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerToPoint(20, i, x, y, z))
				{
					if(PlayerInfo[i][pMember] == 13 || PlayerInfo[i][pLeader] == 13 || PlayerInfo[i][pMember] == 20 || PlayerInfo[i][pLeader] == 20)
					{
						format(string, sizeof(string), "%s dice: [Japonés] %s", PlayerName(playerid), params[0]);
						SendClientMessage(i, COLOR_FADE3, string);
					}
					else
					{
						format(string, sizeof(string), "%s dice: [Lenguaje desconocido para tí].", PlayerName(playerid));
						SendClientMessage(i, COLOR_FADE3, string);
					}
				}
			}
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /jap <Texto>");
	return 1;
}
zcmd(rus, playerid, params[])
{
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(!IsPlayerConnected(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás conectado!");
	if(!Mafia_Rusa(playerid)) return Message(playerid, COLOR_GRAD2, "¡No sabes Ruso!");
	if(!sscanf(params, "s[128]", params[0]))
	{
		new Float:x, Float:y, Float:z, string[128];
		GetPlayerPos(playerid,x,y,z);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerToPoint(20, i, x, y, z))
				{
					if(PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14)
					{
						format(string, sizeof(string), "%s dice: [Ruso] %s", PlayerName(playerid), params[0]);
						SendClientMessage(i, COLOR_FADE3, string);
					}
					else
					{
						format(string, sizeof(string), "%s dice: [Lenguaje desconocido para tí].", PlayerName(playerid));
						SendClientMessage(i, COLOR_FADE3, string);
					}
				}
			}
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /rus <Texto>");
	return 1;
}
zcmd(aooc, playerid, params[]){
	CheckAntiAbusos(playerid)
	if(PlayerInfo[playerid][pAdminCP] > 3)
	{
		if(!sscanf(params, "s[128]", params[0]))
		{
			new string[128];
			format(string, sizeof(string), "[{FFFFFF}AOOC{2684FF}] Admin %s: %s " , PlayerName(playerid), params[0])
			GlobalMsg(0x62B382AA,string);
		} else Message(playerid, COLOR_GRAD2, "Utilice: /aooc <Texto>");
	} else Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	return 1;
}
zcmd(noooc, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if (!noooc)
		{   noooc = 1; BroadCast(COLOR_GRAD2, " Canal de Ayuda ha sido desactivado."); }
	else
		{   noooc = 0; BroadCast(COLOR_GRAD2, " Canal de Ayuda ha sido activado.");  }
	return 1;
}
zcmd(infonew, playerid, params[])
{
	new string[610];
	new di[] = "{FFFFFF}Este nuevo canal de ayuda es para dar más facilidad a los usuarios menores de nivel 6, ya que los administradores o helpers \nresponderán y si otro user tenia la misma inquietud se habrá respondido su pregunta rapidamente.\n {26FF67}*Recuerda que solo son para usuarios de nivel 1 al 5.";
	new di2[] = "\n *Si surge algún problema con su cuenta solo use /duda.\n *Si sabes rolear y no necesitas este canal usa /togooc\n *No abuses del comando o te banearan del sistema.\n\n\n\t\t\t\t{429EE6}http://www.hermandadzero.com/";
	format(string, sizeof(string),"%s %s",di,di2);
	return ShowPlayerDialog(playerid,999,DIALOG_STYLE_MSGBOX, "{FF231D}Info del uso de /new", string, "Ok", "" );
}
zcmd(new, playerid, params[])
{
	new string[128];
	if(DetectarSPAM(params[0])) return AccionSPAM(playerid, params[0]);
	if(NewUsed[playerid] == 1) return Message(playerid, COLOR_GRAD2, "Tiene que esperar 2 minutos para volver a usar este canal.");
	if(PlayerInfo[playerid][pBanDuda] != 0) return Message(playerid, COLOR_GRAD2, "¡No puedes utilizar este comando, estas baneado del sistema de ayuda!");
	if((noooc)) return Message(playerid, COLOR_GRAD2, "El canal de ayuda ha sido deshabilitado por un administrador.");
	if(sscanf(params, "s[128]", params[0])) return Message(playerid, COLOR_GRAD2, "Utilice: /new <Texto>");
	if(PlayerInfo[playerid][pHelper] == 1){
		format(string, sizeof(string), "(( [%d] Helper %s: %s ))" , playerid, PlayerName(playerid), params[0]);
		OOCOff(CHATNEW,string);
	}
	else if(PlayerInfo[playerid][pLevel] < 6){
		NewUsed[playerid] = 1;
		SetTimerEx("NewUs", 120000, 0, "i", playerid);
		format(string, sizeof(string), "(( [%d] Nuevo %s: %s ))" , playerid, PlayerName(playerid), params[0]);
		OOCOff(CHATNEW,string);
	}
	else Message(playerid, COLOR_GRAD2, "¡No puedes usar este canal!");
	return 1;
}
zcmd(darhelp, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2013) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(sscanf(params, "ui", params[0], params[1])) return Message(playerid, COLOR_GRAD2, "Utilice: /darhelp <ID> <Nivel>");
	if(IsPlayerConnected(params[0])){
		new string[128]
		switch(params[1])
		{
			case 0:
			{
				PlayerInfo[params[0]][pHelper] = 0;
				format(string, sizeof(string), "{40D3FF}%s le ha quitado el nivel de helper.", PlayerName(playerid));
				Message(params[0], -1, string);
				format(string, sizeof(string), "%s le ha quitado el nivel de helper a %s", PlayerName(playerid), PlayerName(params[0]));
				A_Info(string);
			}
			case 1:
			{
				NewUsed[playerid] = 0;
				PlayerInfo[params[0]][pHelper] = 1;
				format(string, sizeof(string), "{40D3FF}%s lo ha asignado asignado helper. Empieze a responder las dudas [/new]", PlayerName(playerid));
				Message(params[0], -1, string);
				format(string, sizeof(string), "%s ha asignado helper a %s", PlayerName(playerid), PlayerName(params[0]));
				A_Info(string);
			}
			default: Message(playerid, COLOR_GRAD2, "¡El nivel de helper debe ser entre 0 y 1!");
		}
	} else Message(playerid, COLOR_GRAD2, " Jugador no conectado.");
	return 1;
}
zcmd(mps, playerid, params[])
{
	if(PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(See_MP[playerid] == 1)
	{
		See_MP[playerid] = 0;
		Message(playerid, COLOR_GRAD2, "- Notificación de mensajes privados desactivada.");
	}
	else
	{
		See_MP[playerid] = 1;
		Message(playerid, COLOR_GRAD2, "- Notificación de mensajes privados activada.");
	}
	return 1;
}
zcmd(maletero, playerid, params[])
{
	if(ReduceTime[playerid] == 1) return Message(playerid, COLOR_GREY, "Debes esperar 3 segundos para volver a utilizar este comando.");

	if(!sscanf(params, "s[32]", params[0]))
	{
		new counter, result, gunname[32], string[128];
		for(new i; i != MAX_VEHICLES; i++)
		{
			new dist = CheckPlayerDistanceToVehicle(3.0, playerid, i);
			if(dist)
			{
				result = i;
				counter++;
			}
		}

		if(counter == 0) return Message(playerid, COLOR_GREY, "Ningún vehículo cerca de usted.");
		if(counter > 1) return Message(playerid, COLOR_GREY, "Encontrado más de un vehículo.");

		if(isPilotosVehicle(result) || IsABike(result) || isTraficantesCosechadoraVehicle(result)|| isBarrenderoVehicle(result) || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
		{
			return Message(playerid, COLOR_GREY, "Este vehículo no tiene maletero.");
		}

		if(IsAnOwnableCar(result))
		{
			if(!IsACop(playerid) || PlayerInfo[playerid][pPcarkey] == result || PlayerInfo[playerid][pPcarkey2] == result) { 
				return Message(playerid, COLOR_GREY, "Maltetero cerrado.");
			}
		}

		if(strcmp(params[0],"info",true) == 0)
		{
			if(BootOpen[result] == 1)
			{
				Message(playerid, COLOR_YELLOW2, "|_______ Maletero del vehículo _______|");
				for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
				{
					if(vehTrunk[result][slot] != 0)
					{
						GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						format(string, sizeof(string), "| Slot %i: %s (Balas: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						Message(playerid, COLOR_WHITE, string);
					}
					else
					{
						format(string, sizeof(string), "| Slot %i: Vacio (Balas: N/A)", slot);
						Message(playerid, COLOR_WHITE, string);
					}
				}
				format(string, sizeof(string), "| Chaleco: %f", vehTrunkArmour[result]);
				Message(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s abre el maletero de su vehículo.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			} else Message(playerid, COLOR_GRAD2, "El maletero está cerrado.");
		}
		else if(strcmp(params[0],"garma",true) == 0)
		{
			if(vehTrunkCounter[result] != (MAX_TRUNK_SLOTS-1))
			{
				if(BootOpen[result] == 1)
				{
					new gunID = GetPlayerWeapon(playerid), gunAmmo = GetPlayerAmmo(playerid);

					if(gunID != 0 && gunAmmo != 0)
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						GetWeaponName(gunID, gunname, sizeof(gunname));
						vehTrunkCounter[result]++;
						vehTrunk[result][vehTrunkCounter[result]] = gunID;
						vehTrunkAmmo[result][vehTrunkCounter[result]] = gunAmmo;
						format(string, sizeof(string), "Usted ha puesto su %s (Balas: %i) en el coche.", gunname, gunAmmo);
						Message(playerid, COLOR_WHITE, string);
						RemovePlayerWeapon(playerid, gunID);
						format(string, sizeof(string), "* %s abre el maletero del coche yguarda un arma.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				} else Message(playerid, COLOR_GREY, "Maletero lleno.");
			} else Message(playerid, COLOR_GRAD2, "El maletero está cerrado.");
		}
		else if(strcmp(params[0],"sarma",true) == 0)
		{
			if(vehTrunkCounter[result] != 0)
			{
				if(BootOpen[result] == 1)
				{
					ReduceTime[playerid] = 1;
					SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					GivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
					GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunname, sizeof(gunname));
					format(string, sizeof(string), "Usted ha tomado una %s (Balas: %i) De El Vehiculo.", gunname, vehTrunkAmmo[result][vehTrunkCounter[result]]);
					Message(playerid, COLOR_WHITE, string);
					vehTrunk[result][vehTrunkCounter[result]] = '\0';
					vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
					vehTrunkCounter[result]--;
					format(string, sizeof(string), "* %s abre el maletero del coche y saca un arma.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				} else Message(playerid, COLOR_GRAD2, "El maletero está cerrado.");
			} else Message(playerid, COLOR_GREY, "Maletero vacío.");
		}
		else if(strcmp(params[0],"gchaleco",true) == 0)
		{
			if(BootOpen[result] == 1)
			{
				new Float:plyArmour;    GetPlayerArmour(playerid, plyArmour);
				if(plyArmour != 0)
				{
					SetPlayerArmour(playerid, 0);
					vehTrunkArmour[result] = plyArmour;
					format(string, sizeof(string), "* %s se quita su armadura y la pone en maletero del coche.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				} else Message(playerid, COLOR_GREY, "No tienes chaleco.");
			} else Message(playerid, COLOR_GRAD2, "El maletero está cerrado.");
		}
		else if(strcmp(params[0],"schaleco",true) == 0)
		{
			if(BootOpen[result] == 1)
			{
				if(vehTrunkArmour[result] != 0)
				{
					SetPlayerArmour(playerid, vehTrunkArmour[result]);
					vehTrunkArmour[result] = 0;
					format(string, sizeof(string), "* %s saca la armadura corporal del tronco y se lo pone.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				} else Message(playerid, COLOR_GREY, "No hay chaleco en el maletero.");
			} else Message(playerid, COLOR_GRAD2, "El maletero está cerrado.");
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /maletero <item>");
		Message(playerid, COLOR_GRAD2, "Items: garma, sarma, gchaleco, schaleco, info");
	}
	return 1;
}
zcmd(pastilla, playerid, params[])
{
	if(!sscanf(params, "s[32]", params[0]))
	{
		new string[128];
		if(strcmp(params[0],"ibuprofeno",true) == 0)
		{
			if(Ibuprofeno[playerid] > 0)
			{
				Ibuprofeno[playerid] --;
				format(string, sizeof(string), "* %s se pone una pastilla en su vaso y se la toma con agua.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Has tomado un ibuprofeno, te quedan %d", Ibuprofeno[playerid]);
				Message(playerid, COLOR_WHITE, string);
				SetPlayerDrunkLevel(playerid, 3000);
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes esa pastilla!");
		}
		else if(strcmp(params[0],"nicotina",true) == 0)
		{
			if(cNicotina[playerid] == 1) return Message(playerid, COLOR_GRAD2, "¡Ya has tomado una!");
			if(Nicotina[playerid] > 0)
			{
				Nicotina[playerid] --;
				format(string, sizeof(string), "Te has puesto un parche de Nicotina, te quedan %d", Nicotina[playerid]);
				Message(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s se coloca un parche de nicotina.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				cNicotina[playerid] = 1;
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes esa pastilla!");
		}
		else if(strcmp(params[0],"energysil",true) == 0)
		{
			if(cEnergysil[playerid] == 1) return Message(playerid, COLOR_GRAD2, "  Ya has tomado una!");
			if(Energysil[playerid] > 0)
			{
				Energysil[playerid] --;
				format(string, sizeof(string), "Consumes 1 Energysil, te quedan %d", Energysil[playerid]);
				Message(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s se siente con más energía.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				cEnergysil[playerid] = 1;
				SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDEagle])
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgun]+50)
				SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5]+50)
				SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47]+50)
				SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4]+100)
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniper]+50)
				PlayerDrunk[playerid] = -5;
				new Float:HP; GetPlayerHealth(playerid, HP);
				SetHP(playerid, HP+50);
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes esa pastilla!");
		}
		else if(strcmp(params[0],"sida",true) == 0)
		{
			if(cSIDA[playerid] == 1) return Message(playerid, COLOR_GRAD2, "¡Ya has tomado una!");
			if(PlayerInfo[playerid][pAntiSIDA] > 0)
			{
				PlayerInfo[playerid][pAntiSIDA] -= 1;
				format(string, sizeof(string), "* %s se toma una pastilla.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "Te has tomado la pastilla para curar el SIDA, te quedan %d", PlayerInfo[playerid][pAntiSIDA]);
				Message(playerid, COLOR_WHITE, string);
				cSIDA[playerid] = 1;
				new antisida = random(30);
				if(antisida == 14)
				{
					Message(playerid, COLOR_WHITE, "Felicidades! Te has curado! Puedes dejar de tomar estas pastillas!");
					format(string, sizeof(string), "* %s se siente muy feliz.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[playerid][pSIDA] = 0;
				}
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes esa pastilla!");
		}
		else if(strcmp(params[0],"cancer",true) == 0)
		{
			if(cCancer[playerid] == 1) return Message(playerid, COLOR_GRAD2, "¡Ya has tomado una!");
			if(PlayerInfo[playerid][pAntiCancer] > 0)
			{
				PlayerInfo[playerid][pAntiCancer] -= 1;
				format(string, sizeof(string), "Te has tomado la pastilla para curar el cancer, te quedan %d", PlayerInfo[playerid][pAntiCancer]);
				Message(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s se toma una pastilla.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(PlayerInfo[playerid][pCancer] > 120)
				{
					format(string, sizeof(string), "* %s tose y escupe la pastilla.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerDrunkLevel(playerid, 10000);
				}
				else
				{
					cCancer[playerid] = 1;
					PlayerInfo[playerid][pCancer] -= 3;
				}
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes esa pastilla!");
		}
		else if(strcmp(params[0],"epilepsia",true) == 0)
		{
			if(cEpilepsia[playerid] == 1) return Message(playerid, COLOR_GRAD2, "¡Ya has tomado una!");
			if(PlayerInfo[playerid][pAntiEpilepsia] > 0)
			{
				PlayerInfo[playerid][pAntiEpilepsia] -= 1;
				format(string, sizeof(string), "Te has tomado la pastilla para evitar la epilepsia, te quedan %d", PlayerInfo[playerid][pAntiEpilepsia]);
				Message(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s se toma una pastilla.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				cEpilepsia[playerid] = 1;
				PlayerInfo[playerid][pEpilepsia] -= 2;
			}
			else Message(playerid, COLOR_GRAD2, "¡No tienes esa pastilla!");
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utilice: /pastilla <nombre>");
		Message(playerid, COLOR_GRAD2, "Nombres: Ibuprofeno, Nicotina, Energysil, Cancer, Epilepsia, SIDA");
	}
	return 1;
}
zcmd(usardrogas, playerid, params[])
{
	if(UsingDrugs[playerid] == 1) return Message(playerid, COLOR_WHITE, "¡Estás con el efecto de la droga aún!");
	if(!sscanf(params, "s[32]", params[0]))
	{
		new string[128];
		if(strcmp(params[0],"speed",true) == 0)
		{
			if(PlayerInfo[playerid][pSpeed] == 0) return Message(playerid, COLOR_WHITE, "¡No tienes Speed!");

			SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999)
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999)
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999)
			SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999)
			SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999)
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999)
			SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

			new VIH = random(10);
			if(VIH == 5 || VIH == 7)	PlayerInfo[playerid][pSIDA] += 1;

			PlayerInfo[playerid][pEpilepsia] += 10;
			PlayerInfo[playerid][pCancer] += 5;

			format(string, sizeof(string), "* %s consume un polvo blanco.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			UsingDrugs[playerid] = 1 ;
			Message(playerid, COLOR_WHITE, "Has tomado speed, el efecto de la droga durará 2 minutos");
			PlayerInfo[playerid][pSpeed] -= 1;
			DrugTimer[playerid] = SetTimerEx("SpeedEffectEnd", 120000, true, "i", playerid);
		}
		else if(strcmp(params[0],"extasis",true) == 0)
		{
			if(PlayerInfo[playerid][pEctasy] == 0) return Message(playerid, COLOR_WHITE, "¡No tienes pastillas de extasis!");

			PlayerInfo[playerid][pEpilepsia] += 10;
			new Mareo = random(50000), Float:Health, Vida = random(80);

			SetPlayerDrunkLevel(playerid, Mareo);
			GetPlayerHealth(playerid, Health);
			SetHP(playerid, Health+Vida);
			SetPlayerWeather(playerid, 2009);

			format(string, sizeof(string), "* %s se toma una pastilla de color.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,1);
			UsingEctasy[playerid] = 300;
			EctasyEffect[playerid] = 1;
			UsingDrugs[playerid] = 1 ;
			Message(playerid, COLOR_WHITE, "Has tomado extasis, el efecto de la droga durará 5 minutos");
			PlayerInfo[playerid][pEctasy] -= 1;
			SetPlayerVirtualWorld(playerid, 5);
			DrugTimer[playerid] = SetTimerEx("Ectasy", 1000, true, "i", playerid);
		}
		else if(strcmp(params[0],"ritalin",true) == 0)
		{
			if(PlayerInfo[playerid][pRitalin] == 0) return Message(playerid, COLOR_WHITE, "¡No tienes pastillas de Ritalin!");

			PlayerInfo[playerid][pEpilepsia] += 3;
			PlayerInfo[playerid][pCancer] += 3;

			new VIH = random(10), Mareo = random(5);

			if(VIH == 2 || VIH == 8)		PlayerInfo[playerid][pSIDA] += 1;
			SetPlayerDrunkLevel(playerid, Mareo*1000);
			SetPlayerArmour(playerid, Mareo*20);
			SetPlayerWeather(playerid, -68);
			format(string, sizeof(string), "* %s se toma una pastilla blanca.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,1);
			UsingRitalin[playerid] = 300;
			RitalinEffect[playerid] = 1;
			UsingDrugs[playerid] = 1 ;
			Message(playerid, COLOR_WHITE, "Has tomado Ritalin, el efecto de la droga durará 5 minutos");
			PlayerInfo[playerid][pRitalin] -= 1;
			PlayerDrunk[playerid] = 11;
		}
		else if(strcmp(params[0],"heroina",true) == 0)
		{
			if(PlayerInfo[playerid][pHeroina] == 0) return Message(playerid, COLOR_WHITE, "¡No tienes suficiente Heroina!");

			PlayerInfo[playerid][pEpilepsia] += 5;
			PlayerInfo[playerid][pCancer] += 5;

			new VIH = random(15);

			if(VIH == 8)			PlayerInfo[playerid][pSIDA] += 1;
			SetPlayerArmour(playerid, 100);
			SetHP(playerid, 200);
			format(string, sizeof(string), "* %s se inyecta una substancia.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
			UsingHeroina[playerid] = 120;
			HeroinaEffect[playerid] = 1;
			HeroinaBeat[playerid] = 1;
			UsingDrugs[playerid] = 1 ;
			Message(playerid, COLOR_WHITE, "Has tomado Heroina, el efecto de la droga durará 2 minutos");
			PlayerInfo[playerid][pHeroina] -= 1;
		}
		else if(strcmp(params[0],"marihuana",true) == 0)
		{
			if(PlayerInfo[playerid][pMarihuana] == 0) return Message(playerid, COLOR_WHITE, "¡No tienes suficiente Marihuana!");

			PlayerInfo[playerid][pEpilepsia] += 5;
			PlayerInfo[playerid][pCancer] += 5;

			new VIH = random(15);

			if(VIH == 8)			PlayerInfo[playerid][pSIDA] += 1;
			SetPlayerArmour(playerid, 100);
			SetHP(playerid, 200);
			format(string, sizeof(string), "* %s fuma marihuana.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
			UsingMarihuana[playerid] = 120;
			MarihuanaEffect[playerid] = 1;
			MarihuanaBeat[playerid] = 1;
			UsingDrugs[playerid] = 1 ;
			Message(playerid, COLOR_WHITE, "Has fumado Marihuana, el efecto de la droga durará 2 minutos");
			PlayerInfo[playerid][pMarihuana] -= 1;
		}
	}
	else Message(playerid, COLOR_GRAD2, "Utilice: /usardrogas <nombre> (speed, extasis, ritalin, heroina, marihuana)");
	return 1;
}
zcmd(estadodeshb, playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 2) return Message(playerid, COLOR_GRAD2, "Debes ser mínimo nivel 2 para utilizar este comando.");
	DialogoEstado(playerid);
	return 1;
}
	//=========estados======
zcmd(miestado,playerid, params[])
{
	new estadoo[200],str[256],mensaje[256];
	if(ConEstado[playerid] == true) return SendClientMessage(playerid,NEGATIVO,"Ya estas en un estado. Usa /sinestado");
	if(sscanf(params, "s[128]", estadoo) )return SendClientMessage(playerid,COLOR_GRAD2,"Uso: /miestado [ESTADO] ");
	format(str, sizeof(str), "Estado: {FFFFFF}%s",estadoo);
	format(mensaje, sizeof(mensaje), "Te pusiste de estado: {FFFFFF}%s",estadoo);
	estado[playerid] = Create3DTextLabel(str,COLOR_GRAD2,30.0,40.0,5.0,40.0,1);
	Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.40);
	SendClientMessage(playerid, POSITIVO, mensaje);
	SendClientMessage(playerid, COLOR_GRAD2, "Para borrar tu estado usa /sinestado");
	ConEstado[playerid] = true;
	return 1;
}
zcmd(sinestado,playerid, params[])
{
	if(ConEstado[playerid] == true) {
		SendClientMessage(playerid,COLOR_GRAD2,"¡Has borrado tu estado actual!");
		Delete3DTextLabel(estado[playerid]);
		ConEstado[playerid] = false;
	} else {
		Message(playerid,COLOR_GRAD2,"¡No tienes ningun estado!");
	}
	return 1;
}
	// zcmd:toys =======================================================================================================================
zcmd(ctoys,playerid, params[])
{
	if(!IsAtClothShop(playerid)) return Message(playerid, COLOR_GRAD2, "¡No estás en una tienda de Ropa!");
	{
		ShowPlayerDialog(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Tienda de Accesorios", "Bienvenido a la tienda de accesorios! Aquí puedes comprar accesorios para ti.\nRecuerda que puedes usar 5 objetos a la vez.","Continuar", "Cancelar");
	}
	return 1;
}
zcmd(toyayuda,playerid, params[])
{
	ClearChatbox(playerid, 10);
	Message(playerid, COLOR_GREEN,"Ayuda Accesorios");
	Message(playerid, COLOR_WHITE,"Para comprar un accesorio en la tienda usa: {00B39D}/ctoys");
	Message(playerid, COLOR_WHITE,"Para ponerte y editar un accesorio usa: {00B39D}/toys");
	Message(playerid, COLOR_WHITE,"Para ponerte todos tus accesorios usa: {00B39D}/ptoys");
	Message(playerid, COLOR_WHITE,"Para quitarte todos tus accesorios usa: {00B39D}/qtoys");
	return 1;
}
zcmd(toys,playerid, params[])
{
	ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, "Toy Menu", "Poner o Quitar\nEditar\nEliminar","Ok", "Cancelar" );
	return 1;
}
zcmd(ptoys,playerid, params[])
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "* Te colocaste todos los toys de tu inventario.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], 1, 1, 1);
	}
	return 1;
}
zcmd(qtoys,playerid, params[])
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "* Te quitaste todos los toys de tu inventario.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		RemovePlayerAttachedObject(playerid, x);
	}
	return 1;
}
    // zcmd:paintball =========================================================================================================================
zcmd(asdpaintballfasdf, playerid, params[])
{
	new string[128];
	if(!PlayerToPoint(5.0,playerid,2781.0454,-1812.9775,11.8438)) return Message(playerid, COLOR_GRAD2, "No estás en el paintball.");
	if(CheckMoney(playerid, 1000))
	{
		format(string, sizeof(string), " DeathMatch (%d)\n Team vs Team\n Player vs Player (%d)", TotalDM, TotalPlayer);
		ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_LIST, "Bienvenido al Paintball", string, "Aceptar", "Cancelar");
	} return 1;
}
zcmd(salirpaintball, playerid, params[])
{
	if(PaintballType[playerid] == 0) return Message(playerid, COLOR_GRAD2, "¡No estás jugando en el paintball!");
	if(PlayerToPoint(3.0,playerid,-1464.7714,1555.9248,1052.5313))
	{
		SetPosEx(playerid, 2781.0454,-1812.9775,11.8438,0,0,0);
		ResetPlayerWeapons(playerid);
		PaintballType[playerid] = 0;
		PaintballDMKills[playerid] = 0;
		TotalDM -= 1;
	}
	else if(PlayerToPoint(3.0,playerid,-977.8622,1053.0814,1344.9912) || PlayerToPoint(3.0,playerid,-1128.6946,1066.2456,1345.7439))
	{
		if(PaintballType[playerid] == 2) { TTeamNaranja -= 1; PaintballType[playerid] = 0; }
		if(PaintballType[playerid] == 3) { TTeamVerde -= 1; PaintballType[playerid] = 0; }
		SetPosEx(playerid, 2781.0454,-1812.9775,11.8438,0,0,0);
		ResetPlayerWeapons(playerid);
		SetPlayerColor(playerid,COLOR_GRAD2);
	}
	else if(PlayerToPoint(3.0,playerid,1947.2084,1653.8584,-4.6563))
	{
		SetPosEx(playerid, 2781.0454,-1812.9775,11.8438,0,0,0);
		ResetPlayerWeapons(playerid);
		PaintballType[playerid] = 0;
		PaintPvPKills[playerid] = 0;
		TotalPlayer -= 1;
	}
	else Message(playerid, COLOR_GRAD2, "¡No estás en el lugar correcto!");
	return 1;
}
	// zcmd:afk ==================================================================================================================
zcmd(afk, playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0) return Message(playerid, COLOR_GRAD2, "¡No puedes usar esto en la cárcel!");
	switch(AFK[playerid])
	{
		case 0:
		{
			new randomize;
			GetPlayerPos(playerid, AFKLoc[playerid][0],AFKLoc[playerid][1],AFKLoc[playerid][2]);
			randomize = random(sizeof(AFKZone));
			SetPlayerPos(playerid, AFKZone[randomize][0], AFKZone[randomize][1], AFKZone[randomize][2]);
			TogglePlayerControllable(playerid, 0);
			Message(playerid, COLOR_RED2, "Te encuentras en estado AFK, utiliza /afk para volver a rolear.");
			AFKTime[playerid] = gettime() + 600;
			AFK[playerid] = 3;
			return 1;
		}
		case 1:
		{
			SetPlayerPos(playerid, AFKLoc[playerid][0],AFKLoc[playerid][1],AFKLoc[playerid][2]);
			TogglePlayerControllable(playerid, 1);
			Message(playerid, COLOR_RED2, "¡Has salido del estado AFK!");
			AFKTime[playerid] = 0;
			AFK[playerid] = 0;
			return 1;
		}
		default:
		{
			new string[64];
			format(string, sizeof(string),"Tienes que esperar %d minutos para salir de tu estado AFK.",AFK[playerid]-1);
			Message(playerid, COLOR_GRAD2, string);
			return 1;
		}
	}
	return 1;
}
zcmd(divorciar, playerid, params[])
{
	if(!sscanf(params,"u",params[0]))
	{
		if(PlayerToPoint(5.0,playerid,1486.2524,853.9845,-68.7967))
		{
			if(PlayerInfo[playerid][pMarried] == 1)
			{
				if(strcmp(PlayerInfo[params[0]][pMarriedTo], PlayerName(playerid), true) == 0)
				{
					if(ProxDetectorS(5.0,playerid,params[0]))
					{
						Divorciar[playerid] = params[0];
						Divorciar[params[0]] = playerid;
						ShowPlayerDialog(playerid, DIVORCIO_DIALOG, DIALOG_STYLE_MSGBOX, "{018CFE}Iglesia", "{FFFFFF}¿Estas seguro que deseas divorciarte?", "Aceptar", "Cancelar");
					} else Message(playerid, COLOR_GRAD2, "Esa persona no esta cerca de tí.");
				} else Message(playerid, COLOR_GRAD2, "¡Esa persona no consta como tu esposo(a)!");
			} else Message(playerid, COLOR_GRAD2, "¡No estás casado!");
		} else Message(playerid, COLOR_GRAD2, "¡No estás en el lugar adecuado!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /divorciar <PlayerID>");
	return 1;
}
zcmd(liberar, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 2012) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	if(!sscanf(params,"u",params[0])){
		if(IsPlayerConnected(params[0])){
			PlayerInfo[params[0]][pMarried] = 0;
			strmid(PlayerInfo[params[0]][pMarriedTo], "Nadie", 0, strlen("Nadie"), 64);
			Message(playerid, COLOR_GRAD4, "¡El jugador ha sido liberado del matrimonio!");
			UpdatePlayerStat(params[0]);
		} else Message(playerid, COLOR_GRAD2, "¡Jugador no conectado!");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /liberar <PlayerID>");
	return 1;
}
zcmd(dobleexp, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(DobleOn != 1){
		format(string, sizeof(string), "{FFFFFF}%s ha {CDE878}activado {FFFFFF}la doble experiencia.", PlayerName(playerid));
		GlobalMsg(-1, string);
		DobleOn = 1;
	} else {
		DobleOn = 0;
		format(string, sizeof(string), "{FFFFFF}%s ha {F80F60}desactivado {FFFFFF}la doble experiencia.", PlayerName(playerid));
		GlobalMsg(-1, string);
	}
	TripleOn = 0;
	return 1;
}
zcmd(tripleexp, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pAdminCP] < 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(TripleOn != 1){
		format(string, sizeof(string), "{FFFFFF}%s ha {CDE878}activado {FFFFFF}la TRIPLE experiencia.", PlayerName(playerid));
		GlobalMsg(-1, string);
		TripleOn = 1;
	}else{
		TripleOn = 0;
		format(string, sizeof(string), "{FFFFFF}%s ha {F80F60}desactivado {FFFFFF}la TRIPLE experiencia.", PlayerName(playerid));
		GlobalMsg(-1, string);
	}
	DobleOn = 0;
	return 1;
}
zcmd(misfichas, playerid, params[]){
	new string[128];
	format(string, sizeof(string), "Casino LS - Fichas Disponibles: %d", PlayerInfo[playerid][pFichas]);
	Message(playerid, COLOR_WHITE, string);
	return 1;
}
zcmd(apostar, playerid, params[]){
	new string[128], numero, apuesta;
	if(PlayerInfo[playerid][pFichas] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes suficientes fichas para jugar!");
	if(YaAposto[playerid] == 1) return Message(playerid, COLOR_GRAD2, "¡Debes esperar 10 segundos para volver a apostar!");
	if(PlayerToPoint(2.0,playerid,2241.7998,1673.5498,6.9162) || PlayerToPoint(2.0,playerid,2239.3767,1673.2435,6.9162)){
		if(!sscanf(params,"d",apuesta)){
			if(apuesta > PlayerInfo[playerid][pFichas]) return Message(playerid, COLOR_GRAD2, "¡No tienes suficientes fichas para cubrir la apuesta!");
			if(apuesta < 1 || apuesta > 5000) return Message(playerid, COLOR_GRAD2, "Apuesta Común: Min 1$ | Máx 5000$");
			new rand = random(2);
			switch(rand)
			{
				case 0:	{
					YaAposto[playerid] = 1;
					PlayerInfo[playerid][pFichas] -= apuesta;
					format(string, sizeof(string), "* %s realiza una apuesta de %d$ y pierde.", PlayerName(playerid), apuesta);
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Message(playerid, COLOR_WHITE, "¡Lo siento! Has perdido, suerte para la próxima.");
					SetTimerEx("VolverApostar", 10000, false, "i", playerid);
				}
				case 1:	{
					YaAposto[playerid] = 1;
					PlayerInfo[playerid][pFichas] += apuesta;
					format(string, sizeof(string), "* %s realiza una apuesta de %d$ y gana.", PlayerName(playerid), apuesta);
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Message(playerid, COLOR_WHITE, "¡Felicidaddes! Has ganado.");
					SetTimerEx("VolverApostar", 10000, false, "i", playerid);
				}
			}
		} else Message(playerid, COLOR_GRAD2, "Utilice: /apostar <Apuesta 1-5000>");
	}
	else if(PlayerToPoint(2.0,playerid,2239.2478,1678.3411,6.9099) || PlayerToPoint(2.0,playerid,2241.8176,1679.1023,6.9099)){
		if(!sscanf(params,"dd",numero,apuesta)){
			if(apuesta > PlayerInfo[playerid][pFichas]) return Message(playerid, COLOR_GRAD2, "¡No tienes suficientes fichas para cubrir la apuesta!");
			if(numero < 1 || numero > 5) return Message(playerid, COLOR_GRAD2, "¡Numero entre 1 y 5!");
			if(apuesta < 1 || apuesta > 8000) return Message(playerid, COLOR_GRAD2, "Apuesta Dificil: Min 1$ | Máx 8000$");
			new rand = random(6);
			if(rand == numero)
			{
				YaAposto[playerid] = 1;
				PlayerInfo[playerid][pFichas] += apuesta*5;
				format(string, sizeof(string), "* %s realiza una apuesta de %d$ y gana %d$", PlayerName(playerid), apuesta, apuesta*5);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "¡Felicidaddes! Has ganado.");
				SetTimerEx("VolverApostar", 10000, false, "i", playerid);
			}
			else {
				YaAposto[playerid] = 1;
				PlayerInfo[playerid][pFichas] -= apuesta;
				format(string, sizeof(string), "* %s realiza una apuesta de %d$ y pierde.", PlayerName(playerid), apuesta);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "¡Lo siento! Has perdido, suerte para la próxima.");
				SetTimerEx("VolverApostar", 10000, false, "i", playerid);
			}
		} else Message(playerid, COLOR_GRAD2, "Utilice: /apostar <Numero 1-5> <Apuesta 1-8000>");
	} else Message(playerid, COLOR_GRAD2, "¡No estás en un lugar para apostar!");
	return 1;
}
zcmd(ruleta, playerid, params[]){
	new string[128], numero, apuesta;
	if(PlayerToPoint(2.0,playerid,2254.6746,1680.4365,6.9099) || PlayerToPoint(2.0,playerid,2260.2432,1680.5635,6.9099)){
		if(PlayerInfo[playerid][pFichas] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes suficientes fichas para jugar!");
		if(YaAposto[playerid] > 0) return Message(playerid, COLOR_GRAD2, "¡Debes esperar 10 segundos para volver a apostar!");
		if(!sscanf(params,"dd",numero,apuesta)){
			if(apuesta > PlayerInfo[playerid][pFichas]) return Message(playerid, COLOR_GRAD2, "¡No tienes suficientes fichas para cubrir la apuesta!");
			if(numero < 1 || numero > 5) return Message(playerid, COLOR_GRAD2, "¡Número entre 1 y 5!");
			if(apuesta < 1 || apuesta > 1500) return Message(playerid, COLOR_GRAD2, "Ruleta Rusa: Min 1$ - Máx 1500$");
			new ruleta = random(6);
			if(ruleta == numero)
			{
				YaAposto[playerid] = 1;
				PlayerInfo[playerid][pFichas] += apuesta;
				format(string, sizeof(string), "* %s juega a la ruleta rusa y gana.", PlayerName(playerid), apuesta);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "¡Felicidaddes! Has ganado.");
				SetTimerEx("VolverApostar", 10000, false, "i", playerid);
			}
			else
			{
				YaAposto[playerid] = 1;
				PlayerInfo[playerid][pFichas] -= apuesta;
				format(string, sizeof(string), "* %s juega a la ruleta rusa y pierde.", PlayerName(playerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "¡Lo siento! Has perdido, suerte para la próxima.");
				SetTimerEx("VolverApostar", 10000, false, "i", playerid);
			}
		} else Message(playerid, COLOR_GRAD2, "Utilice: /ruleta <Numero 1-5> <Apuesta 1-1500>");
	} else Message(playerid, COLOR_GRAD2, "¡No estás en un lugar para jugar a la ruleta rusa!");
	return 1;
}
zcmd(tragamonedas, playerid, params[]){
	new string[128];
	if(PlayerToPoint(10.0,playerid,2257.0374,1669.9581,6.9099)){
		if(PlayerInfo[playerid][pFichas] < 100) return Message(playerid, COLOR_GRAD2, "¡No tienes suficientes fichas para jugar!");
		if(YaAposto[playerid] > 0) return Message(playerid, COLOR_GRAD2, "¡Debes esperar 10 segundos para volver a apostar!");
		new suerte = random(5);
		switch(suerte)
		{
			case 2:{
				YaAposto[playerid] = 1;
				PlayerInfo[playerid][pFichas] += 1000;
				format(string, sizeof(string), "* %s mete unas fichas a la maquina, juega y gana.", PlayerName(playerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "¡Felicidaddes! Has ganado 1000$.");
				SetTimerEx("VolverApostar", 10000, false, "i", playerid);
			}
			default:{
				YaAposto[playerid] = 1;
				PlayerInfo[playerid][pFichas] -= 100;
				format(string, sizeof(string), "* %s mete unas fichas a la maquina, juega y pierde.", PlayerName(playerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(playerid, COLOR_WHITE, "¡Lo siento! Has perdido 100$, suerte para la próxima.");
				SetTimerEx("VolverApostar", 10000, false, "i", playerid);
			}
		}
	} else Message(playerid, COLOR_GRAD2, "¡No estás cerca de una maquina tragamonedas!");
	return 1;
}
zcmd(miraestozion, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] != 2014) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(!sscanf(params,"s[32]",params[0])){
		if(strfind(params[0], "_" , true) != -1){
			new PlayerFile[64], string[164];
			format(PlayerFile, sizeof(PlayerFile), "users/%s.ini", params[0]);
			if(INI_Exist(PlayerFile)){
				INI_ParseFile(PlayerFile, "GetPlayerDates", false, true, playerid, true, false );
				format(string, sizeof(string),"| PlayerStats : %s |", params[0]);
				Message(playerid, 0x009BE6FF, string);
				format(string, sizeof(string), "Contraseña: %s  Nivel: %d  Dinero: %d  Banco: %d  Admin: %d", StatString[playerid][0], StatInt[playerid][0], StatInt[playerid][1], StatInt[playerid][2], StatInt[playerid][7]);
				Message(playerid, COLOR_GRAD3, string);
				format(string, sizeof(string), "MSN: %s  Casado: %d  Esposo/a: %s  Baneado: %d  Job: %d", StatString[playerid][1], StatInt[playerid][6], StatString[playerid][2], StatInt[playerid][3], StatInt[playerid][4]);
				Message(playerid, COLOR_GRAD3, string);
				format(string, sizeof(string), "Casa: %d  Carro1: %d  Carro2: %d  Negocio: %d Premium: %d", StatInt[playerid][8], StatInt[playerid][9], StatInt[playerid][10], StatInt[playerid][11], StatInt[playerid][5]);
				Message(playerid, COLOR_GRAD3, string);
			} else Message(playerid, COLOR_GRAD2, "¡La cuenta que has señalado no existe!");
		} else Message(playerid, COLOR_GRAD2, "Ejemplo de Uso: /cuentaoof Juan_David");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /cuentaoof <Nombre_Jugador>");
	return 1;
}
zcmd(richs, playerid, params[]){
	if(PlayerInfo[playerid][pAdminCP] < 6) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	CheckAntiAbusos(playerid)
	Message(playerid, COLOR_GREEN, "| Usuarios Ricos |");
	for(new i=0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i)){
			new string[128], cash = GetPlayerMoney(i)+PlayerInfo[i][pAccount];
			if(cash > 10000000){
				format(string, sizeof(string),"  %s - %d", PlayerName(i), cash);
				Message(playerid, 0xC0C0C0FF, string);
			}
		}
	}
	return 1;
}
zcmd(fondos, playerid, params[])
{
	new string[128], funds;
	if(PlayerInfo[playerid][pLeader] < 1) return Message(playerid, COLOR_GRAD2, "¡No eres lider de una faccion!");
	switch(PlayerInfo[playerid][pLeader])
	{
		case 1:     funds = Fondos[LSPD];
		case 2:     funds = Fondos[PIR];
		case 3:     funds = Fondos[SAEM];
		case 4:		funds = Fondos[SAMUR];
		case 12:    funds = Fondos[LCN];
		case 13:    funds = Fondos[YAK];
		case 14:    funds = Fondos[RUS];
		case 17:    funds = Fondos[CNN];
		case 24:    funds = Fondos[FBI];
		default:    funds = 9999;
	}
	if(funds == 9999) return Message(playerid, COLOR_GRAD2, "¡Tu faccion no cuenta con fondos!");
	format(string, sizeof(string), "* Los fondos de tu faccion son de %d", funds);
	Message(playerid, COLOR_GRAD4, string);
	return 1;
}
zcmd(retirarfondos, playerid, params[]){
	new string[128];
	if(PlayerInfo[playerid][pLeader] < 1) return Message(playerid, COLOR_GRAD2, "¡No eres lider de una faccion!");
	if(!sscanf(params,"i",params[0])){
		switch(PlayerInfo[playerid][pLeader]){
			case 1:{
				if(params[0] > Fondos[LSPD]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[LSPD] -= params[0];
			}
			case 2:{
				if(params[0] > Fondos[PIR]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[PIR] -= params[0];
			}
			case 3:{
				if(params[0] > Fondos[SAEM]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[SAEM] -= params[0];
			}
			case 4:{
				if(params[0] > Fondos[SAMUR]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[SAMUR] -= params[0];
			}
			case 12:{
				if(params[0] > Fondos[LCN]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[LCN] -= params[0];
			}
			case 13:{
				if(params[0] > Fondos[YAK]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[YAK] -= params[0];
			}
			case 14:{
				if(params[0] > Fondos[RUS]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[RUS] -= params[0];
			}
			case 17:{
				if(params[0] > Fondos[CNN]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[CNN] -= params[0];
			}
			case 24:{
				if(params[0] > Fondos[FBI]) return Message(playerid, COLOR_GRAD2, "Cantidad incorrecta.");
				Fondos[FBI] -= params[0];
			}
			default: return Message(playerid, COLOR_GRAD2, "Tu faccion no cuenta con fondos.");
		}
		PlayerInfo[playerid][pAccount] += params[0];
		format(string, sizeof(string), "* Extraiste %d$ de los fondos de tu faccion y fueron añadidos a tu cuenta bancaria.", params[0]);
		Message(playerid, COLOR_GRAD4, string);
		format(string, sizeof(string), "* %s ha retirado %d de los fondos de la faccion.", PlayerName(playerid), params[0]);
		SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_YELLOW, string);
	} else Message(playerid, COLOR_GRAD2, "Utilice: /retirarfondos <Cantidad>");
	return 1;
}
zcmd(condon, playerid, params[])
{
	if(PlayerInfo[playerid][pSex] == 2) return Message(playerid, COLOR_GRAD2, "Solo los hombres pueden usar este comando.");
	if(Condom[playerid] != 0)
	{
		new string[128];
		format(string, sizeof(string), "* %s toma un condon y se lo coloca en el pene.", PlayerName(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Message(playerid, COLOR_GRAD2, "Ahora ya estas protegido para tener relaciones sexuales con seguridad.");
		Condom[playerid] --;
		PlayerInfo[playerid][pSuciedad] += 5;
		return 1;
	} else return Message(playerid, COLOR_GRAD2, "No tienes un condon.");
}
zcmd(lavarropa, playerid, params[])
{
	new string[128];
	if(PlayerToPoint(10.0,playerid,3937.3613,-820.6308,1874.0156) || PlayerToPoint(10.0,playerid,3937.7209,-834.2257,1874.0156))
	{
		if(CheckMoney(playerid, 150))
		{
			if(PlayerInfo[playerid][pSuciedad] < 50) return Message(playerid, COLOR_GRAD2, "* No tienes la ropa sucia, lavala luego.");
			format(string, sizeof(string), "* %s se saca su ropa y la mete a la lavadora.", PlayerName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Message(playerid, COLOR_WHITE, "{DC092F}Lavanderia: {FFFFFF}Su ropa ha empezado a lavarse, espere un poco...");
			SetTimerEx("Lavadora", 60000, false, "i", playerid);
			if(PlayerInfo[playerid][pSex] == 1) Skin(playerid, 252);
			if(PlayerInfo[playerid][pSex] == 2) Skin(playerid, 138);
		}
	} else Message(playerid, COLOR_GRAD2, "No estas en la lavanderia.");
	return 1;
}
zcmd(regalar, playerid, params[])
{
	new item[16], string[80];
	if(!sscanf(params,"s[16]u", item, params[1]))
	{
		if(!IsPlayerConnected(params[1]))            return Message(playerid, COLOR_GRAD2, "¡Jugador no conectado!");
		if(!ProxDetectorS(5.0, playerid, params[1])) return Message(playerid, COLOR_GRAD2, "¡Jugador muy lejos!");
		if(Regalo_Offer[playerid] == 1)              return Message(playerid, COLOR_GRAD2, "¡Ya ofreciste un regalo, debes esperar la respuesta de esa persona!");

		if(strcmp(item,"anillocompromiso",true) == 0)
		{
			if(PlayerInfo[playerid][pAnilloCom] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningun anillo para regalar.");
			Regalo_ITEM[params[1]] = 1;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte un anillo de compromiso, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
		else if(strcmp(item,"anillooro",true) == 0)
		{
			if(PlayerInfo[playerid][pAnilloOro] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningun anillo para regalar.");
			Regalo_ITEM[params[1]] = 2;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte un anillo de oro, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
		else if(strcmp(item,"collar",true) == 0)
		{
			if(PlayerInfo[playerid][pCollar] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningun collar para regalar.");
			Regalo_ITEM[params[1]] = 3;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte un collar de perlas, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
		else if(strcmp(item,"anillodiamante",true) == 0)
		{
			if(PlayerInfo[playerid][pAnilloDia] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningun anillo para regalar.");
			Regalo_ITEM[params[1]] = 4;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte un anillo de diamantes, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
		else if(strcmp(item,"pulsera",true) == 0)
		{
			if(PlayerInfo[playerid][pPulsera] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ninguna pulsera para regalar.");
			Regalo_ITEM[params[1]] = 5;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte una pulsera de oro, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
		else if(strcmp(item,"aretes",true) == 0)
		{
			if(PlayerInfo[playerid][pAretes] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningun conjunto de aretes para regalar.");
			Regalo_ITEM[params[1]] = 6;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte un conjunto de aretes, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
		else if(strcmp(item,"reloj",true) == 0)
		{
			if(PlayerInfo[playerid][pReloj] == 0) return Message(playerid, COLOR_GRAD2, "No tienes ningun anillo para regalar.");
			Regalo_ITEM[params[1]] = 7;     Regalo_ID[params[1]] = playerid;    Regalo_Offer[playerid] = 1;
			format(string, sizeof(string), "* %s ofrece regalarte un reloj de oro, usa /aceptar regalo o /cancelar.", PlayerName(playerid));
			Message(params[1], COLOR_WHITE, string);
		}
	}
	else
	{
		Message(playerid, COLOR_GRAD2, "Utiliza: /regalar <Item> <PlayerID>");
		Message(playerid, COLOR_GRAD2, "Items: anillocompromiso, anillooro, collar, anillodiamante, pulsera, aretes, reloj.");
	}
	return 1;
}
zcmd(joyas, playerid, params[])
{
	new string[128];
	Message(playerid, COLOR_GREEN, "Inventario - Joyas:");
	format(string, sizeof(string), "Anillos de Compromiso: %d | Anillos de Oro: %d | Collar de Perla: %d | Anillo de Diamantes: %d", PlayerInfo[playerid][pAnilloCom], PlayerInfo[playerid][pAnilloOro], PlayerInfo[playerid][pCollar], PlayerInfo[playerid][pAnilloDia]);
	Message(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Pulsera de Oro: %d | Aretes de Oro: %d | Reloj de Oro: %d", PlayerInfo[playerid][pPulsera], PlayerInfo[playerid][pAretes], PlayerInfo[playerid][pReloj]);
	Message(playerid, COLOR_WHITE, string);
	return 1;
}
zcmd(orinar, playerid, params[]) {
	SetPlayerSpecialAction(playerid, 68);
	Message(playerid, COLOR_RED, "¡Que bien sienta mear!");
	return 1;
}
zcmd(saludar, playerid, params[])
{
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(playerid != params[0])
			{
				if(ProxDetectorS(2.0, playerid, params[0]))
				{
					new string[80];
					Saludo_ID[params[0]] = playerid;
					format(string, sizeof string, "* %s ha enviado una peticion de saludo, usa /aceptar saludo.", PlayerName(playerid));
					Message(params[0], COLOR_WHITE, string);
				} else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
			} else Message(playerid, COLOR_GRAD2, "No puedes saludarte a ti mismo.");
		} else Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
	} else Message(playerid, COLOR_GRAD2, "Utilice: /saludar <PlayerID>");
	return 1;
}
zcmd(emisora, playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pDonateT] < 1) return Message(playerid, YELLOW, "No estás en un vehiculo!");
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerDialog(playerid, Radios, DIALOG_STYLE_LIST,
			"Selecciona Tu Emisora","{ADFF2F}Drumm Bass\n{7B68EE}LaMEGARADIO\nRMassiveDubstep\n{912CEE}ReservaRap\n{CAE1FF}Los40\nReggae\n{FF8000}House",
			"Sintonizar", "Cancelar");

	}
	return 1;
}
zcmd(pararemisora, playerid, params[])
{
	StopAudioStreamForPlayer(playerid); // Parar las retransmisiones
	Message(playerid, YELLOW, "Has apagado tu emisora");
	return 1;
}

zcmd(cuerpo, playerid, params[]) {
	if(IsPlayerConnected(playerid)) {
		new string[220] = "{2E2EFE}Cuerpo:\n\n\t{FFFFFF}- Tu suciedad es del %d porciento";
		format(string, sizeof(string), string, PlayerInfo[playerid][pSuciedad]);
        return Message(playerid, YELLOW, string);
   	} else Message(playerid, COLOR_GRAD2, "¡!");
    return 1;
}

zcmd(parqueadero, playerid, params[0])
{
	if(CheckMoney(playerid,500)){
		if(PlayerToPoint(5.0, playerid, 1761.8041,-1700.4933,13.4270))
		{
			Bought(playerid, 500);
			Till(25, 500);
			Message(playerid, COLOR_WHITE, "Has cancelado un valor de {FFFF00}500$ {FFFFFF}para abrir la puerta del estacionamiento.");
			MoveDynamicObject(estac, 1761.53, -1696.37, 12.60, 2.5, -1000.0, -1000.0, -1000.0);
			SetTimer("CloseEstac", 7000, 0);
			return 1;
		}
		else if(PlayerToPoint(5.0, playerid, 1803.5647,-1721.0872,13.5345))
		{
			Bought(playerid, 500);
			Till(25, 500);
			Message(playerid, COLOR_WHITE, "Has cancelado un valor de {FFFF00}500$ {FFFFFF}para abrir la puerta del estacionamiento.");
			MoveDynamicObject(estac2, 1805.53, -1722.11, 10.66, 2.5, -1000.0, -1000.0, -1000.0);
			SetTimer("CloseEstac2", 7000, 0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "* No estas cerca de la puerta del estacionamiento.");
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(gPlayerLogged[playerid] != 1) { Message(playerid, COLOR_YELLOW2, "¡Primero debes loguearte en el servidor para usar un comando!"); return 0; }
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
	{
		new string[99];
		format(string, sizeof string, "¡Error! {40E0D0}El comando que ha escrito no existe.");
		Message(playerid, -1, string);
	}
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}

public Autocruise(playerid, in)
{
	new Float:vehx, Float:vehy, Float:vehz;
	GetVehiclePos(GetPlayerVehicleID(playerid), vehx, vehy, vehz);
	if(in == 1)
	{
		if(-1777 < vehy)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
				{
					SetPlayerCameraPos(i,1910.4637,-1771.8,15);
					SetPlayerCameraLookAt(i,1911.2863,-1775.1614,13.3828);
				}
			}
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);
			TogglePlayerControllable(playerid, 0);
			MoveObject(entrancegate, 1911.21130371, -1780.68151855, 14.15972233, 1);
			SetTimerEx("Water",4000,0,"ii",playerid, 1);
		}
		else
		{
			if(vehx != 1911.1886)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), 1911.1886, vehy, vehz);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);
			}
			TogglePlayerControllable(playerid, 1);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0.1, 0);
			SetTimerEx("Autocruise",100,0,"ii",playerid, 1);
		}
	}
	else
	{
		if(-1768 < vehy)
		{
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);
			TogglePlayerControllable(playerid, 0);
			MoveObject(exitgate, 1911.21130371,-1771.97814941,14.15972233, 1);
			SetTimerEx("EndWash",1000,0,"i",playerid);
		}
		else
		{
			if(vehx != 1911.1886)
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), 1911.1886, vehy, vehz);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);
			}
			TogglePlayerControllable(playerid, 1);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0.1, 0);
			SetTimerEx("Autocruise",100,0,"ii",playerid, 0);
		}
	}
	return 1;
}

public Water(playerid, on)
{
	if(on == 0)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				DestroyPlayerObject(i, water1);
				DestroyPlayerObject(i, water2);
				DestroyPlayerObject(i, water3);
				DestroyPlayerObject(i, water4);
				DestroyPlayerObject(i, water5);
				DestroyPlayerObject(i, water6);
				DestroyPlayerObject(i, water7);
				SetTimerEx("OpenExit",500,0,"i",playerid);
			}
		}
	}
	else
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				water1 = CreatePlayerObject(i, 18747, 1911, -1776, 10, 0, 0, 90);
				water2 = CreatePlayerObject(i, 18747, 1914, -1776, 10, 0, 0, 90);
				water3 = CreatePlayerObject(i, 18739, 1910.1821, -1777.8997, 25, 0, 180, 0);
				water4 = CreatePlayerObject(i, 18739, 1910.1821, -1774.8132, 25, 0, 180, 0);
				water5 = CreatePlayerObject(i, 18739, 1912.1490, -1774.8132, 25, 0, 180, 0);
				water6 = CreatePlayerObject(i, 18739, 1912.1490, -1777.8997, 25, 0, 180, 0);
				water7 = CreatePlayerObject(i, 18739, 1911.2194, -1776.5117, 25, 0, 180, 0);
				SetTimerEx("Water",15000,0,"ii",playerid, 0);
			}
		}
	}
	return 1;
}

public OpenExit(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		{
			SetPlayerCameraPos(i,1909.0697,-1760.7429,15);
			SetPlayerCameraLookAt(i,1911.2600,-1771.5955,13.3828);
		}
	}
	MoveObject(exitgate, 1911.21130371, -1771.97814941, 10.50000000, 1);
	SetTimerEx("Autocruise",3500,0,"ii",playerid, 0);
	return 1;
}


public EndWash(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		{
			TogglePlayerControllable(i, 1);
			SetCameraBehindPlayer(i);
		}
	}
	usingcarwash = -1;
	Update3DTextLabelText(entrancetext, 0x008B00FF, "Nadie está lavando su auto, puedes lavar el tuyo.\nPor: $5 (/lavar)");
	return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

stock GetXYZInFrontOfPlayer(playerid, &Float: x, &Float: y, &Float: z, Float: distance)
{
	new Float: a;

	GetPlayerPos (playerid, x, y, z);
	GetPlayerFacingAngle (playerid, a);

	x += (distance * floatsin (-a, degrees));
	y += (distance * floatcos (-a, degrees));
	return 1;
}

GetClosestVehicleID(playerid)
{
	new Float:min_dist = 100.0;
	new Float:dist;
	new Float:vehx,Float:vehy,Float:vehz;
	new Float:px,Float:py,Float:pz;
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,px,py,pz);
	new close_vehid;
	for(new i = 1; i < MAX_VEHICLES;i++)
	{
		if(GetVehicleModel(i) > 0)
		{
			GetVehiclePos(i,vehx,vehy,vehz);
			x = px - vehx;
			y = py - vehy;
			z = pz - vehz;
			dist = floatsqroot((x * x) + (y * y) + (z * z));
			if(dist < min_dist)
			{
				min_dist = dist;
				close_vehid = i;
			}
		}
	}
	return close_vehid;
}

function CarInFrontOfPlayer(playerid) {
	new Float: x, Float: y, Float: z;
	GetXYZInFrontOfPlayer(playerid, x, y, z, 3.0);
	new carid = GetClosestVehicleID(playerid);
	if(GetVehicleDistanceFromPoint(carid, x, y, z) < 3.0)
	{
		return carid;
	}
	return 0;
}

function PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

function NameTimer()
{
	for(new i = 0;i < MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			for(new q = 0;q < MAX_PLAYERS;q++)
			{
				if(IsPlayerConnected(q))
				{
					new Float:p1x;
					new Float:p1y;
					new Float:p1z;
					new Float:p2x;
					new Float:p2y;
					new Float:p2z;
					if(IsPlayerConnected(i) && IsPlayerConnected(q))
					{
						GetPlayerPos(i,p1x,p1y,p1z);
						GetPlayerPos(q,p2x,p2y,p2z);
						if(GetPointDistanceToPointExMorph(p1x,p1y,p1z,p2x,p2y,p2z) < pdistance)
						{
							ShowPlayerNameTagForPlayer(i,q,1);
						}
					}
				}
			}
		}
	}
}

public OnPlayerText(playerid, text[])
{
	static LastText[MAX_PLAYERS][128];
	if(strfind(LastText[playerid], text, false) != -1) return SendClientMessage(playerid, AMARILLO_ADMIN, "No intentes hacer FLOOD !"), 0;
	strmid(LastText[playerid], text, 0, strlen(text), sizeof(LastText[]));
	for(new s = 0; s < AntiSpamC; s++)
	{
		if(strfind(text, AntiSpam[s], true) != -1)
		{
			SendClientMessage(playerid, AMARILLO_ADMIN, "No intentes hacer SPAM !");
			return 0;
		}
	}
	new
	string[128], 	tmp[32],	acento[32],		car = GetVehicleModel(GetPlayerVehicleID(playerid));

	if(DetectarSPAM(text))
	{
		new x[186];
		format(x, sizeof(x), "{11BB11}- AntiSPAM {FFFFFF}|| {FF2200}%s(%d): {FFFFFF}%s ||", PlayerName(playerid),playerid, text); A_Info(x);
		return 0;
	}
	if(AFK[playerid] > 0)
	{
		Message(playerid, COLOR_GRAD2, "¡No puedes hablar en estado AFK!");
		return 0;
	}
	if(Muted[playerid] == 1)
	{
		Message(playerid, TEAM_CYAN_COLOR, "* ¡Has sido silenciado! (ChatBan)");
		return 0;
	}
	if(UsingEctasy[playerid] > 0)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "¡Una fuerza desconocida te impide hablar!");
		return 0;
	}
	if(TalkingLive[playerid] != 0)
	{
		if(PlayerInfo[playerid][pRank] == 3)
		{
			if(car == 488 || car == 582)
			{
				format(string, sizeof(string), "[CNN-Directo](%s): %s", PlayerName(playerid), text);
				OOCNews(0x00B75BFF, string);
				return 0;
			}
			else return Message(playerid, COLOR_GRAD2, "¡No estás en un vehículo CNN!");
		}
		else
		{
			if(Journalist(playerid))
			{
				format(string, sizeof(string), "[CNN-Directo](%s): %s", PlayerName(playerid), text);
				OOCNews(0x00B75BFF, string);
			}
			else
			{
				format(string, sizeof(string), "[CNN-Directo]Invitado(%s): %s", PlayerName(playerid), text);
				OOCNews(0x00B75BFF, string);
			}
			return 0;
		}
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		format(string, sizeof(string), "(Teléfono) %s: %s", PlayerName(playerid), text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		// -================= Mecanicos =======================- //
		if(Mobile[playerid] == 556)
		{
			Params>
			{
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}¿Si necesita asistencia, diga ASISTENCIA, para anular la llamada NO?");
				return 0;
			}
			else if ((strcmp("asistencia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("asistencia")))
			{
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Muy bien! Necesita asistencia!");
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {F5DEB3}Puedes llamar a los siguientes mecánicos de tu zona.");
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {F5DEB3}Gracias por preferirnos, si no hay mecánicos intente en otro momento.");
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				SetTimerEx("RemoveHand", 1800, false, "i", playerid);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_Mecanicos(i) && OnDuty[i] == 1)
						{
							format(string, 256, "  Tlf: %d - Nombre: %s", PlayerInfo[i][pPnumber] ,PlayerName(i));
							Message(playerid, -1, string);
							Mobile[playerid] = 255;
						}
					}
				}
				return 0;
			}
			else if ((strcmp("no", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("no")))
			{
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Anuló la llamada!");
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Pásese por el taller y descubra ofertas en tuning, arreglos etc!");
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}Que tenga buen día!");
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				SetTimerEx("RemoveHand", 1800, false, "i", playerid);
				Mobile[playerid] = 255;
				return 0;
			}
			else
			{
				Message(playerid, COLOR_WHITE, "{117799}Operadora: {FFFFFF}¿Si necesita asistencia, diga ASISTENCIA, para anular la llamada NO?");
				return 0;
			}
		}
		// -================= Transportes =====================- //
		if(Mobile[playerid] == 445)
		{
			Params>
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Diga TAXI para continuar, diga NO para cancelar");
				return 0;
			}
			else if ((strcmp("taxi", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("taxi")))
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}¿Donde se encuentra, en LS o LV?");
				Mobile[playerid] = 446;
				return 0;
			}
			else if ((strcmp("no", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("no")))
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				SetTimerEx("RemoveHand", 1800, false, "i", playerid);
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}¡Adios, que tenga un buen día!");
				Mobile[playerid] = 255;
				return 0;
			}
			else
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Diga TAXI para continuar, diga NO para cancelar");
				return 0;
			}
		}
		if(Mobile[playerid] == 446)
		{
			Params>
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}¿Donde está en LS o LV?");
				return 0;
			}
			else if ((strcmp("LS", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LS")))
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}¿En que zona está?");
				Mobile[playerid] = 447;
				return 0;
			}
			else if ((strcmp("LV", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LV")))
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}¿En que zona está?");
				Mobile[playerid] = 448;
				return 0;
			}
			else
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}¿Donde está en LS o LV?");
				return 0;
			}
		}
		if(Mobile[playerid] == 447)
		{
			if(TaxiSlot1 != 999 && TaxiSlot2 != 999 && TaxiSlot3 != 999 && TaxiSlot4 != 999 && TaxiSlot5 != 999 && TaxiSlot6 != 999 && TaxiSlot7 != 999 && TaxiSlot8 != 999)
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Nuestras líneas están colapsadas, pruebe más tarde.");
				Mobile[playerid] = 255;
				return 0;
			}
			format(string, sizeof(string), "Central: %s necesita un taxi en (%s, Los Santos)", PlayerName(playerid), text);
			SendJobMessage(9, TEAM_BLUE_COLOR, string);
			Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Está en la lista de espera. El taxi más cercano pasará a recogerle.");
			Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Si quiere anular el taxi, utiliza /cancelar taxi");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetTimerEx("RemoveHand", 1800, false, "i", playerid);
			Mobile[playerid] = 255;
			if(TaxiSlot1 == 999) { TaxiSlot1 = playerid; SlotCity1 = "LS"; strmid(SlotZone1, text, 0, strlen(text), 255); TiempoSlot1 = 1;  TaxiCalled[playerid] = 1;	return 0; }
			if(TaxiSlot2 == 999) { TaxiSlot2 = playerid; SlotCity2 = "LS"; strmid(SlotZone2, text, 0, strlen(text), 255); TiempoSlot2 = 1;  TaxiCalled[playerid] = 2;	return 0; }
			if(TaxiSlot3 == 999) { TaxiSlot3 = playerid; SlotCity3 = "LS"; strmid(SlotZone3, text, 0, strlen(text), 255); TiempoSlot3 = 1;  TaxiCalled[playerid] = 3;	return 0; }
			if(TaxiSlot4 == 999) { TaxiSlot4 = playerid; SlotCity4 = "LS"; strmid(SlotZone4, text, 0, strlen(text), 255); TiempoSlot4 = 1;  TaxiCalled[playerid] = 4;	return 0; }
			if(TaxiSlot5 == 999) { TaxiSlot5 = playerid; SlotCity5 = "LS"; strmid(SlotZone5, text, 0, strlen(text), 255); TiempoSlot5 = 1;  TaxiCalled[playerid] = 5;	return 0; }
			if(TaxiSlot6 == 999) { TaxiSlot6 = playerid; SlotCity6 = "LS"; strmid(SlotZone6, text, 0, strlen(text), 255); TiempoSlot6 = 1;  TaxiCalled[playerid] = 6;	return 0; }
			if(TaxiSlot7 == 999) { TaxiSlot7 = playerid; SlotCity7 = "LS"; strmid(SlotZone7, text, 0, strlen(text), 255); TiempoSlot7 = 1;  TaxiCalled[playerid] = 7;	return 0; }
			if(TaxiSlot8 == 999) { TaxiSlot8 = playerid; SlotCity8 = "LS"; strmid(SlotZone8, text, 0, strlen(text), 255); TiempoSlot8 = 1;  TaxiCalled[playerid] = 8;	return 0; }
		}
		if(Mobile[playerid] == 448)
		{
			if(TaxiSlot1 != 999 && TaxiSlot2 != 999 && TaxiSlot3 != 999 && TaxiSlot4 != 999 && TaxiSlot5 != 999 && TaxiSlot6 != 999 && TaxiSlot7 != 999 && TaxiSlot8 != 999)
			{
				Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Nuestras líneas están colapsadas, pruebe más tarde.");
				Mobile[playerid] = 255;
				return 0;
			}
			format(string, sizeof(string), "Central: %s necesita un taxi en (%s, Las Venturas)", PlayerName(playerid), text);
			SendJobMessage(9, TEAM_BLUE_COLOR, string);
			Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Está en la lista de espera. El taxi más cercano pasará a recogerle.");
			Message(playerid, COLOR_WHITE, "{EE9900}Operadora: {FFFFFF}Si quiere anular el taxi, utiliza /cancelar taxi");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetTimerEx("RemoveHand", 1800, false, "i", playerid);
			Mobile[playerid] = 255;
			if(TaxiSlot1 == 999) { TaxiSlot1 = playerid; SlotCity1 = "LV"; strmid(SlotZone1, text, 0, strlen(text), 255); TiempoSlot1 = 1;  TaxiCalled[playerid] = 1;	return 0; }
			if(TaxiSlot2 == 999) { TaxiSlot2 = playerid; SlotCity2 = "LV"; strmid(SlotZone2, text, 0, strlen(text), 255); TiempoSlot2 = 1;  TaxiCalled[playerid] = 2;	return 0; }
			if(TaxiSlot3 == 999) { TaxiSlot3 = playerid; SlotCity3 = "LV"; strmid(SlotZone3, text, 0, strlen(text), 255); TiempoSlot3 = 1;  TaxiCalled[playerid] = 3;	return 0; }
			if(TaxiSlot4 == 999) { TaxiSlot4 = playerid; SlotCity4 = "LV"; strmid(SlotZone4, text, 0, strlen(text), 255); TiempoSlot4 = 1;  TaxiCalled[playerid] = 4;	return 0; }
			if(TaxiSlot5 == 999) { TaxiSlot5 = playerid; SlotCity5 = "LV"; strmid(SlotZone5, text, 0, strlen(text), 255); TiempoSlot5 = 1;  TaxiCalled[playerid] = 5;	return 0; }
			if(TaxiSlot6 == 999) { TaxiSlot6 = playerid; SlotCity6 = "LV"; strmid(SlotZone6, text, 0, strlen(text), 255); TiempoSlot6 = 1;  TaxiCalled[playerid] = 6;	return 0; }
			if(TaxiSlot7 == 999) { TaxiSlot7 = playerid; SlotCity7 = "LV"; strmid(SlotZone7, text, 0, strlen(text), 255); TiempoSlot7 = 1;  TaxiCalled[playerid] = 7;	return 0; }
			if(TaxiSlot8 == 999) { TaxiSlot8 = playerid; SlotCity8 = "LV"; strmid(SlotZone8, text, 0, strlen(text), 255); TiempoSlot8 = 1;  TaxiCalled[playerid] = 8;	return 0; }
		}
		// -============================ Emergencias ============================- //
		if(Mobile[playerid] == 915)
		{
			Params>
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Central: Entendido, ¿su ubicación porfavor?");
				return 0;
			}
			new wanted[128];
			format(wanted, sizeof(wanted), "Central: %s necesita una ambulancia. Lugar: (%s)",PlayerName(playerid), text);
			SendRadioMessage(4, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "* Incidente: %s",Situacion[playerid]);
			SendRadioMessage(4, TEAM_CYAN_COLOR, wanted);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			Message(playerid, COLOR_ALLDEPT, "Central: Ahora le enviamos una ambulancia, sea paciente.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetTimerEx("RemoveHand", 1800, false, "i", playerid);
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 914)
		{
			Params>
			{
				Message(playerid, COLOR_ALLDEPT, "Central: Por favor, ¿una breve explicación de la situación?");
				return 0;
			}
			Message(playerid, COLOR_ALLDEPT, "Central: Entendido, ¿Su ubicacion por favor?");
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			Mobile[playerid] = 915;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			Params>
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Comisaria: repítame que no le he entendido!");
				return 0;
			}
			format(string, sizeof(string), "** Central: Han solicitado una patrulla. Lugar: (%s)",text);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			format(string, sizeof(string), "** Central: Un tal %s denuncia: %s",PlayerName(playerid), Situacion[playerid]);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			SendClientMessage(playerid, 0x0080FFFF, "Comisaria: una patrulla se pasará por la zona.");
			SendClientMessage(playerid, 0x0080FFFF, "Comisaria: ¡Gracias por su información!");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetTimerEx("RemoveHand", 1800, false, "i", playerid);
			Mobile[playerid] = 255;
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
			return 0;
		}
		if(Mobile[playerid] == 912)
		{
			Params>
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Comisaria: no le entiendo., repíta porfavor!");
				return 0;
			}
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			format(string, sizeof(string), "Comisaria: Entendido señor %s, díganos su ubicación exacta", PlayerName(playerid));
			Message(playerid, 0x0080FFFF, string);
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			Params>
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIA:  Lo sentimos, no le entendimos, POLICIA o PARAMEDICO ?");
				return 0;
			}
			else if ((strcmp("Policia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Policia")))
			{
				Message(playerid, COLOR_WHITE, "--> Conexión establecida con LSPD.");
				SendClientMessage(playerid, 0x0080FFFF, "Central: Explique brevemente lo ocurrido.");
				Mobile[playerid] = 912;
				return 0;
			}
			else if ((strcmp("samur", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("samur")))
			{
				Message(playerid, COLOR_WHITE, "--> Conexión establecida con SAMUR.");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Central: Explique brevemente lo ocurrido.");
				Mobile[playerid] = 914;

				return 0;
			}
			else
			{
				SendClientMessage(playerid, 0x0080FFFF, "EMERGENCIA: Lo sentimos, no le entendimos, POLICIA o PARAMEDICO ?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(Speaker[Mobile[playerid]] == 1)
				{
					format(string, sizeof(string), "(Altavoz): %s", text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
					format(string, sizeof(string), "(Voz en el Teléfono): %s", text);
					Message(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			Message(playerid, COLOR_GRAD2,"¡Nadie en línea!");
			return 0;
		}
		return 0;
	}
	if(realchat)
	{
		if(Pandilleros(playerid) || Mafioso(playerid) || IsANarco(playerid) || Ballas_pand(playerid))
		{
			if(Pandilleros(playerid))   acento = " [Acento de Barrio]";
			else if(Mafia_Italiana(playerid))  acento = " [Acento Italiano]";
			else if(Ballas_pand(playerid))  	acento = " [Acento de Barrio]";
			else if(Mafia_Yakuza(playerid))	acento = " [Acento Japones]";
			else if(Mafia_Rusa(playerid))	acento = " [Acento Ruso]";
			else if(IsANarco(playerid))		acento = " [Acento Colombiano]";
			else if(Piratas4x4(playerid))   acento = " [Acento Argentino]";
		}
		if(gPlayerLogged[playerid] == 0)
		{
			return 0;
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(Maskuse[playerid] == 1) format(string, sizeof(string), "Desconocido dice%s: %s", acento, text);
			else format(string, sizeof(string), "%s dice%s: %s", PlayerName(playerid), acento, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		else
		{
			new carid = GetPlayerVehicleID(playerid);
			if(IsABike(carid) || isPilotosVehicle(carid))
			{
				if(Maskuse[playerid] == 1) format(string, sizeof(string), "Desconocido dice%s: %s", acento, text);
				else format(string, sizeof(string), "%s dice%s: %s", PlayerName(playerid), acento, text);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else
			{
				if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
				{
					if(Maskuse[playerid] == 1)	format(string, sizeof(string), "(Ventana Cerrada) Desconocido dice%s: %s", acento, text);
					else format(string, sizeof(string), "(Ventana Cerrada) %s dice%s: %s", PlayerName(playerid), acento, text);
					ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
					if(Maskuse[playerid] == 1) format(string, sizeof(string), "(Ventana Abierta) Desconocido dice%s: %s", acento, text);
					else format(string, sizeof(string), "(Ventana Abierta) %s dice%s: %s", PlayerName(playerid), acento, text);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
			}
		}
		return 0;
	}
	return 1;
}

function FixHour(hour)
{
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

function AddsOn()
{
	if(adds > 0)
	{
		adds -= 1;
	}
	return 1;
}

function HouseTimer()
{
	for(new h=0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hTime] <= gettime())
		{
			HouseInfo[h][hOwned] = 0;
			HouseInfo[h][hLock] = 1;
			HouseInfo[h][hRent] = 0;
			HouseInfo[h][hRentabil] = 0;
			HouseInfo[h][hWep] = 0;
			HouseInfo[h][hAmmo] = 0;
			HouseInfo[h][hMats] = 0;
			HouseInfo[h][hDrugs] = 0;
			HouseInfo[h][hSpeed] = 0;
			HouseInfo[h][hEctasy] = 0;
			HouseInfo[h][hRitalin] = 0;
			HouseInfo[h][hHeroina] = 0;
			HouseInfo[h][hMarihuana] = 0;
			HouseInfo[h][hTime] = 1999999999;
			strmid(HouseInfo[h][hOwner], "El Estado", 0, strlen("El Estado"), 64);
			OnPropTextdrawUpdate(h);
		}
	}
	return 0;
}

function TeleportPlayer(playerid)
{
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(playerid, cx, cy, cz);
	// COMISARIA ENTRADA
	if(PlayerToPointStripped(10, playerid,1554.9537,-1675.6584,16.1953, cx,cy,cz))
	{
		if(IsACop(playerid) || GetPlayerWeapon(playerid) == 0 && !IsACop(playerid))
		{
			Pause(playerid);
			GameTextForPlayer(playerid, "~w~Departamento De ~n~Policia de LS", 5000, 1);
			SetPosEx(playerid, 747.60254, -387.92624, 1003.58502,0,6,0); //246.7079,66.2239,1003.6406
			PlayerPlaySound(playerid, 1052, 246.7562,64.4719,1003.6406);
		}
		else
		{
			Pause(playerid);
			GameTextForPlayer(playerid, "~w~Departamento De ~n~Policia de LS", 5000, 1);
			SetPosEx(playerid,747.60254, -387.92624, 1003.58502,0,6,0); //246.7079,66.2239,1003.6406
			ProxDetector(15.0, playerid, "Biiiiiiip! Biiiiip!", 0xFF8080FF,0xFF8080FF,0xFF8080FF,0xFF8080FF,0xFF8080FF);
			PlayerPlaySound(playerid, 1055, 246.7562,64.4719,1003.6406);
		}
	}
	if(PlayerToPointStripped(1, playerid,242.2513,66.3352,1003.6406, cx,cy,cz))
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1) ShowPlayerDialog(playerid, DIALOG_LSPD_ELEVATOR, DIALOG_STYLE_LIST, "Ascensor LSPD", "¿ Donde desea ir ?", "Garage", "Terraza");
		else return GameTextForPlayer(playerid, "~r~Solo Policias!", 5000, 3);
	}
	if(PlayerToPointStripped(1, playerid,-2662.1509,537.2712,48.0843, cx,cy,cz))
	{
		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4) ShowPlayerDialog(playerid, DIALOG_SAMUR_ELEVATOR, DIALOG_STYLE_LIST, "Ascensor SAMUR", "¿Donde deseas ir?", "Garage", "Terraza");
		else return GameTextForPlayer(playerid, "~r~solo personal!", 4000, 1);
	}
	if(PlayerToPointStripped(1, playerid,2258.4861,2454.7061,38.6837, cx,cy,cz)) SetPlayerPos(playerid,2343.3733,2459.3279,14.9742);
	if(PlayerToPointStripped(1, playerid,2282.2898,2423.4922,3.4766, cx,cy,cz)) SetPlayerPos(playerid,2343.3733,2459.3279,14.9742);
	// Hospital2puerta
	if(PlayerToPointStripped(1, playerid,1600.4548,1760.7028,-60.5523, cx,cy,cz)) SetPosEx(playerid,1600.0018,1765.1306,-60.0662,0,0,0);
	if(PlayerToPointStripped(1, playerid,1600.0018,1765.1306,-60.0662, cx,cy,cz)) SetPosEx(playerid,1600.4548,1760.7028,-60.5523,0,0,0);
	
	// BOWLING ENTER
	else if(PlayerToPointStripped(1, playerid,1632.0132,-1172.9296,24.0781, cx,cy,cz)){
		Till(18, 100);
		Bought(playerid, 100);
		SetPosEx(playerid,-2355.876464,917.654235,93.634971,0,0,0);
	}
	// BOWLING EXIT
	else if(PlayerToPointStripped(1, playerid,-2355.876464,917.654235,93.634971, cx,cy,cz)) SetPosEx(playerid, 1631.8143,-1171.8892,24.0781,0,0,0);
	// 10GREEN ENTER
	else if(PlayerToPointStripped(1, playerid,2309.891601,-1643.565429,14.827047, cx,cy,cz)) SetPosEx(playerid,501.902038,-67.564384,998.757812,0,11,0);
	// 10GREEN EXIT
	else if(PlayerToPointStripped(1, playerid,501.902038,-67.564384,998.757812, cx,cy,cz)) SetPosEx(playerid, 2309.891601,-1643.565429,14.827047,20.0,0,0);
	// AMMU ENTER
	else if(PlayerToPointStripped(1, playerid,1368.842407,-1279.880737,13.546875, cx,cy,cz)) SetPosEx(playerid,315.810302,-143.586303,999.601562,0,7,0);
	// AMMU EXIT
	else if(PlayerToPointStripped(1, playerid,315.810302,-143.586303,999.601562, cx,cy,cz)) SetPosEx(playerid, 1368.842407,-1279.880737,13.546875,20.0,0,0);
	// VICTIM ENTER
	else if(PlayerToPointStripped(1, playerid,461.499267,-1500.973266,31.058967, cx,cy,cz)) SetPosEx(playerid,227.562377,-7.929605,1002.210937,0,5,0);
	// VICTIM EXIT
	else if(PlayerToPointStripped(1, playerid,227.562377,-7.929605,1002.210937, cx,cy,cz)) SetPosEx(playerid, 461.499267,-1500.973266,31.058967,20.0,0,0);
	// Biblioteca ENTER
	else if(PlayerToPointStripped(1, playerid,1546.6545,-1097.5780,25.0625, cx,cy,cz))
	{
		SetPosEx(playerid,911.5309,-1012.7484,14.6151,0,0,0);
		GText(playerid, "~w~Biblioteca", 5000, 1);
	}
 	// Entrada pabellon
	else if(PlayerToPointStripped(1, playerid, 1774.9208,-1806.6025,13.5299, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 2734.2200,-1752.0573,-13.4678,0,0,0);
	}

	// Salida Pabellon
	else if(PlayerToPointStripped(1, playerid, 2734.2200,-1752.0573,-13.4678, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1774.9208,-1806.6025,13.5299,0,0,0);
	}
	// Biblioteca EXIT
	else if(PlayerToPointStripped(1, playerid,911.5309,-1012.7484,14.6151, cx,cy,cz)) SetPosEx(playerid, 1546.6545,-1097.5780,25.0625,20.0,0,0);
	// Entrada Interior Puerto
	else if(PlayerToPointStripped(1, playerid, 587.5262,-1989.2592,4.4332, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 895.1678,-2483.7361,3098.3235,0,0,0);
	}
	// Salida Puerto
	else if(PlayerToPointStripped(1, playerid, 895.1678,-2483.7361,3098.3235, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 587.5262,-1989.2592,4.4332,0,0,0);
	}
	// Entrada CINE
	else if(PlayerToPointStripped(1, playerid, 1324.0824,-1713.8619,13.6001, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1348.5524,-1687.3601,1694.2446,0,0,0);// //-1333.5000000,-213.6000100,1078.3000500-Pantalla
	}
	// Salida CINE
	else if(PlayerToPointStripped(1, playerid,1348.5524,-1687.3601,1694.2446, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1324.0824,-1713.8619,13.6001,0,0,0);
	}
	// Entrada CINE2
	else if(PlayerToPointStripped(1, playerid, 1323.6353,-1709.2308,13.6125, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1344.4889,-1687.2681,1694.2446,0,0,0);//
	}
	// Salida CINE2
	else if(PlayerToPointStripped(1, playerid,1344.4889,-1687.2681,1694.2446, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1323.6353,-1709.2308,13.6125,0,0,0);
	}
		///entrada a la pantalla de cine
	else if (PlayerToPointStripped(1, playerid,1368.0166,-1651.1652,1683.2546, cx,cy,cz))
	{
		if(PlayerInfo[playerid][pDonateT] >= 1 || ComproCine[playerid] == 1)
		{
			Pause(playerid);
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid,"https://dl.dropbox.com/s/dwdw6rhj3aisilp/cine.mp3?token_hash=AAEkJbPHwp70MokUiC3if1G-QWxe9MYJw7jRQy8RU6nTdg&dl=1");
			SetPosEx(playerid, -1359.5841,-207.9781,1074.0721,0,0,2);
			GameTextForPlayer(playerid, "~w~Cine",5000,6);
			ComproCine[playerid] = 0;
		}
		else Message(playerid, COLOR_GRAD2, " Usted no compro el boleto para entrar al cine.");
		return 1;
	}
	else if (PlayerToPointStripped(1, playerid,-1359.5841,-207.9781,1074.0721, cx,cy,cz))
	{
		SetPlayerVirtualWorld(playerid, 0);
		Pause(playerid);
		StopAudioStreamForPlayer(playerid);
		SetPlayerPos(playerid, 1368.0166,-1651.1652,1683.2546);
		GameTextForPlayer(playerid, "~w~Entrada del Cine",5000,1);
	}
	// LSTV ENTER
	else if(PlayerToPointStripped(1, playerid,758.1428,-1361.2177,14.0281, cx,cy,cz)) ShowPlayerDialog(playerid, ENTER_LSTV, DIALOG_STYLE_LIST, "¿ Dónde desea ir ?", "LSTV Planta 1\tOficina\nLSTV Planta 2\tEstudio", "Ir", "Salir");
	// LSTV EXIT
	else if(PlayerToPointStripped(1, playerid,243.2710,302.7583,999.1343, cx,cy,cz) || PlayerToPointStripped(1, playerid,-2719.7854,519.2936,48.3752, cx,cy,cz)) SetPosEx(playerid, 758.1428,-1361.2177,14.0281,20.0,0,0);
	//LSPD Exit
	else if(PlayerToPointStripped(5, playerid,747.60254, -387.92624, 1003.58502, cx,cy,cz)) SetPosEx(playerid,1552.3231,-1674.6780,16.1953,0,0,0);
	// HOSPITAL PLANTA 2 ENTER
	else if(PlayerToPointStripped(1, playerid,-2665.0129,535.0582,48.0791, cx,cy,cz))
	{
		Pause(playerid);
		SetPlayerPos(playerid,275.0726,126.1257,1032.0173);
	}
	// HOSPITAL PLANTA 2 EXIT
	else if(PlayerToPointStripped(1, playerid,275.0726,126.1257,1032.0173, cx,cy,cz)) SetPlayerPos(playerid,-2665.0129,535.0582,48.0791);
	//Hospital Planta 3 Enter
	else if(PlayerToPointStripped(1, playerid,251.4964,131.8860,1032.0173, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid,251.2338,131.8673,1037.7197,271.2408,0,0);
	}
	//Hospital Planta 3 Exit
	else if(PlayerToPointStripped(1, playerid,251.3875,131.6661,1037.7197, cx,cy,cz)) SetPosEx(playerid,251.2338,131.8809,1032.0173,271.2408,0,0);
		// Acensor U7 ENTER
	else if(PlayerToPointStripped(1, playerid,2033.9985,-1401.9303,17.2931, cx,cy,cz)) SetPlayerPos(playerid,2067.3105,-1432.1187,48.3359);
	// Acensor U7 EXIT
	else if(PlayerToPointStripped(1, playerid,2067.3105,-1432.1187,48.3359, cx,cy,cz)) SetPlayerPos(playerid,2033.9985,-1401.9303,17.2931);
	// Dispatch ENTER
	else if(PlayerToPointStripped(1, playerid,-2185.8447,897.8077,96.9397, cx,cy,cz)) SetPlayerPos(playerid,-2193.9558,887.8521,96.9397); //Hitman
	// Dispatch EXIT
	else if(PlayerToPointStripped(1, playerid,-2193.9558,887.8521,96.9397, cx,cy,cz)) SetPlayerPos(playerid,-2185.8447,897.8077,96.9397);
    // TAXI Office ENTER
	else if (PlayerToPointStripped(1.0, playerid,1752.5724,-1894.1763,13.5574, cx,cy,cz)) SetPosEx(playerid,-1837.1744,134.5490,15.1190, 0, 0, 0);
	// TAXI Office EXIT
	else if (PlayerToPointStripped(1.0, playerid,-1837.1744,134.5490,15.1190, cx,cy,cz)) SetPosEx(playerid,1752.5724,-1894.1763,13.5574, 0, 0, 0);
	// Farmacia ENTER
	else if (PlayerToPointStripped(1.0, playerid,895.3104,-1664.9683,13.546, cx,cy,cz))
	{
		SetPosEx(playerid,663.1843,-573.4727,16.3359, 0, 0, 0);
		GameTextForPlayer(playerid, "~g~Farmacia ~r~+", 5000, 3);
	}
	// Farmacia EXIT
	else if (PlayerToPointStripped(1.0, playerid,663.1843,-573.4727,16.3359, cx,cy,cz)) SetPosEx(playerid,895.3104,-1664.9683,13.546, 0, 0, 0);
	else if(PlayerToPointStripped(1, playerid,2229.9011,-1721.2582,13.5613, cx,cy,cz))
	{//Ganton Gym
		Till(19, 500);
		Bought(playerid, 500);
		GameTextForPlayer(playerid, "~w~gym", 5000, 1);
		SetPosEx(playerid,771.9399,-2.2574,1000.7292,0,5,0);
	}
	else if(PlayerToPointStripped(1, playerid,772.3594,-5.5157,1000.7286, cx,cy,cz)) SetPosEx(playerid,2225.6699,-1725.3134,13.5586,0,0,0);
	//Casino Los Santos
	else if(PlayerToPointStripped(1, playerid, 1022.5853,-1121.4229,23.8723, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 2231.8706,1668.2195,6.9099,0,0,0);
	}
	else if(PlayerToPointStripped(1, playerid, 2231.8706,1668.2195,6.9099, cx,cy,cz)) SetPosEx(playerid,1022.5853,-1121.4229,23.8723,0,0,0);
	// Hospital Los Santos ENTER
	else if (PlayerToPointStripped(1, playerid,1173.2563,-1323.3102,15.3943, cx,cy,cz))
	{
		SetPosEx(playerid, -2647.9604,539.7050,48.0835, 180, 0, 0);
		GameTextForPlayer(playerid, "~r~Hospital",5000,1);
	}
	// Hospital EXIT
	else if(PlayerToPointStripped(1, playerid,-2647.4524,539.1109,48.0838, cx,cy,cz) && GetPlayerVirtualWorld(playerid) == 0)
	{
		SetPosEx(playerid, 1173.2563,-1323.3102,15.3943, 0, 0, 0);
		GText(playerid, "Los Santos", 5000, 1);
	}
	//Hospital Garage
	else if(PlayerToPointStripped(1, playerid,1144.9569,-1329.5032,13.5840, cx,cy,cz)) SetPosEx(playerid, -2662.1667,537.7280,48.0843,0,0,0);
	//Hospital Terraza
	else if(PlayerToPointStripped(1, playerid,1159.3601,-1352.9479,26.6766, cx,cy,cz)) SetPosEx(playerid, -2662.1667,537.7280,48.0843,0,0,0);
	// GARITO DROGA ENTER
	else if(PlayerToPointStripped(1, playerid,-1107.2260,-1183.3201,129.2188, cx,cy,cz))
	{
		if(!IsANarco(playerid)) return GText(playerid, "~r~Cerrado", 5000, 1);
		SetPosEx(playerid,2569.8796,-1301.6450,1044.1250,0,2,0);
	}
	// GARITO DROGA EXIT
	else if(PlayerToPointStripped(1, playerid,2569.8796,-1301.6450,1044.1250, cx,cy,cz)) SetPosEx(playerid,-1107.2260,-1183.3201,129.2188,0,0,0);
 //Casa Traficantes Enter
	else if(PlayerToPointStripped(1, playerid,-1061.1812,-1195.5070,129.7466, cx,cy,cz))
	{
		if(!IsANarco(playerid)) return GText(playerid, "~r~Cerrado", 5000, 1);
		SetPosEx(playerid,2523.1343,-1286.0913,1054.6406,0,2,0);
	}
	// Casa Traficantes EXIT
	else if(PlayerToPointStripped(1, playerid,2523.1343,-1286.0913,1054.6406, cx,cy,cz)) SetPosEx(playerid,-1061.1812,-1195.5070,129.7466,0,0,0);
	// Elevator DOWN ^
	else if (PlayerToPointStripped(1, playerid,1161.5015,-1330.0845,31.4937, cx,cy,cz) && GetPlayerVirtualWorld(playerid) == 0)
	{
		SetPosEx(playerid, -2662.1509,537.2712,48.0843, 180, 0, 0);
		GameTextForPlayer(playerid, "~r~hospital",5000,1);
	}
	/** Autoescuela
	else if (PlayerToPointStripped(1, playerid,2045.3928,-1908.0372,13.5469, cx,cy,cz))
	{ //DMW Enter
		Pause(playerid);
		SetPosEx(playerid, 2062.2095,-2214.4033,2664.6157,0,0,0);
		GameTextForPlayer(playerid, "~w~Centro de Licencias",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,2062.2095,-2214.4033,2664.6157, cx,cy,cz))
	{ //DMW Exit
		SetPosEx(playerid, 2046.8928,-1908.0372,13.5469,280,0,0);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	}*/
		else if (PlayerToPointStripped(1, playerid,1524.5724,-1677.8043,6.2188, cx,cy,cz))
	{ //PD Elevator
		SetPosEx(playerid, 790.8051,-367.0837,994.2100,270,6,0);
		GameTextForPlayer(playerid, "~w~Departamento De policia",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,1557.7257,-1675.2711,28.3955, cx,cy,cz))
	{ //PD Elevator
		SetPosEx(playerid, 790.8051,-367.0837,994.2100,270,6,0);
		GameTextForPlayer(playerid, "~w~Departamento De Policia",5000,1);
	}
	// BINCO ENTER
	else if (PlayerToPointStripped(1, playerid,2244.4690,-1665.1603,15.4766, cx,cy,cz))
	{
		SetPosEx(playerid,207.7209,-111.2660,1005.1328,0,15,0);
		GText(playerid, "binco", 5000, 1);
		Message(playerid, COLOR_GRAD2, "Utiliza /cropa o /cropaid para cambiar tu indumentaria");
	}
	// BINCO EXIT
	else if (PlayerToPointStripped(1, playerid,207.7209,-111.2660,1005.1328, cx,cy,cz))
	{
		SetPosEx(playerid,2244.4690,-1665.1603,15.4766,0,0,0);
		GText(playerid, "~w~los santos", 5000, 1);
	}
	// Sex Shop
	else if (PlayerToPointStripped(1, playerid,1087.8663,-922.4969,43.3906, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, -100.2815,-25.0383,1000.7188,190.7341,3,0);
	}
	else if (PlayerToPointStripped(1, playerid,-100.2815,-25.0383,1000.7188, cx,cy,cz)) SetPosEx(playerid, 1087.8663,-922.4969,43.3906,21.9935,0,0);
	else if (PlayerToPointStripped(1.5, playerid,1570.3828,-1333.8882,16.4844, cx,cy,cz))
	{
		//Next to PD building
		SetPosEx(playerid, 1545.0068,-1366.5094,327.2868,0,0,0);
		GameTextForPlayer(playerid, "~w~Azotea edificio de Noticias",5000,1);
	}
	else if (PlayerToPointStripped(1.5, playerid,1548.8167,-1366.2247,326.2109, cx,cy,cz))
	{
		//Next to PD building
		SetPosEx(playerid, 1572.1115,-1332.5288,16.4844,0,0,0);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	}
	else if (PlayerToPointStripped(1.5, playerid,2025.3062,-1402.3466,17.2104, cx,cy,cz))
	{
		//CIA Enter
		SetPosEx(playerid,246.3536,107.3032,1003.2188,179.2000,10,0);
		GameTextForPlayer(playerid, "~p~CIA",5000,1);
		MoveDynamicObject(u7d3, 244.86236572266, 110.86795043945, 1002.21875, 2.5, -1000.0, -1000.0, -1000.0);
		Revisado[playerid] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,246.3536,107.3032,1003.2188, cx,cy,cz))
	{
		//CIA Exit
		SetPosEx(playerid, 2025.3062,-1402.3466,17.2104,0,0,0);
		GameTextForPlayer(playerid, "~w~Los santos",5000,1);
		Revisado[playerid] = 0;
	}
	// Lavanderia
	else if (PlayerToPointStripped(1.5, playerid, 1837.0604,-1417.3403,13.5625, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 3932.5288,-827.3693,1874.0156,0,0,0);
	}
	else if (PlayerToPointStripped(1.5, playerid, 3932.5288,-827.3693,1874.0156, cx,cy,cz)) SetPosEx(playerid, 1837.0604,-1417.3403,13.5625,0,0,0);
	//Joyeria
	else if (PlayerToPointStripped(1.5, playerid, 1567.9587,-1898.0110,13.5609, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1573.0620,-1911.0226,401.6359,0,0,0);
	}
	else if (PlayerToPointStripped(1.5, playerid, 1573.0620,-1911.0226,401.6359, cx,cy,cz)) SetPosEx(playerid, 1567.9587,-1898.0110,13.5609,0,0,0);
	else if (PlayerToPointStripped(0.5, playerid,305.6703,-141.7649,1004.0625, cx,cy,cz))
	{
	    // Accuracy's ENTER
		SetPosEx(playerid, 304.2044,-141.8087,1004.0625,266.2744,7,0);
		GText(playerid, "~y~Training Room",5000,1);
	}
	else if (PlayerToPointStripped(0.5, playerid,304.2044,-141.8087,1004.0625, cx,cy,cz))
	{
	    // Accuracy's EXIT
		SetPosEx(playerid, 305.6703,-141.7649,1004.0625,93.4107,7,0);
		GText(playerid, "~w~Ammunation",5000,1);
	}
	else if (PlayerToPointStripped(0.5, playerid,300.0952,-141.8644,1004.0625, cx,cy,cz))
	{
	    //PvP ENTER
		SetPosEx(playerid, 299.1417,-141.8611,1004.0547,279.7479,7,0);
		GText(playerid, "~r~Player vs player",5000,1);
	}
	else if (PlayerToPointStripped(0.5, playerid,299.1417,-141.8611,1004.0547, cx,cy,cz))
	{
	    //PvP EXIT
		SetPosEx(playerid, 300.0952,-141.8644,1004.0625,92.3728,7,0);
		GText(playerid, "~w~Ammunation",5000,1);
	}
	//Ayuntamiento Luis
	else if (PlayerToPointStripped(1, playerid,1481.0206,-1771.1138,18.7958, cx,cy,cz))
	{
		SetPosEx(playerid, 386.2978,173.8582,1008.3828,0,3,0);
		GameTextForPlayer(playerid, "~y~Ayuntamiento",5000,1);
	}
	// Club Vip Entrada
	else if (PlayerToPointStripped(1, playerid,1797.5867,-1578.8649,14.0855, cx,cy,cz))
	{
		if(PlayerInfo[playerid][pDonateT] >= 1 || ComproBoleto[playerid] == 1)
		{
			SetPosEx(playerid, 1803.0931,-1562.1166,-47.4675,0,0,2);
			GameTextForPlayer(playerid, "~w~Club ~y~VIP",5000,6);
			ComproBoleto[playerid] = 0;
		}
		else Message(playerid, COLOR_GRAD2, " Usted no compro el boleto para entrar al club.");
		return 1;
	}
	else if (PlayerToPointStripped(1, playerid,1803.0931,-1562.1166,-47.4675, cx,cy,cz))
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, 1797.5867,-1578.8649,14.0855);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	}
    // Guardia Nacional - Prision
	else if(PlayerToPointStripped(1, playerid,2729.3357,-2451.4373,17.5937, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 630.0692,839.3478,-90.2031, 0, 0, 0)
		GText(playerid, "~g~P~w~rision~n~~w~Militar", 4000, 1);
	}
	else if(PlayerToPointStripped(1, playerid,632.7405,839.2097,-90.2031, cx,cy,cz))
	{
		SetPosEx(playerid, 2729.3357,-2451.4373,17.5937, 0, 0, 0)
		GText(playerid, "~g~Guardia~n~~w~Nacional", 5000, 1);
	}
	else if(PlayerToPointStripped(1, playerid,2766.1648,-2513.5667,13.6428, cx,cy,cz))
    {//Cuarteles
    	Pause(playerid);
    	SetPosEx(playerid, 2908.8123,2126.5759,0.3203, 0, 0, 0)
    	GText(playerid, "~g~C~w~uarteles", 4000, 1);
    }
    else if(PlayerToPointStripped(1, playerid,2907.2405,2126.5566,0.3281, cx,cy,cz))
    {
    	SetPosEx(playerid, 2766.1648,-2513.5667,13.6428, 0, 0, 0)
    	GText(playerid, "~g~Guardia~n~~w~Nacional", 5000, 1);
    }
    else if(PlayerToPointStripped(1, playerid,2731.6631,-2417.5254,13.6280, cx,cy,cz))
    {//Armeria
    	Pause(playerid);
    	SetPosEx(playerid, 254.8800,2023.7145,-6.7623, 0, 0, 0)
    	GText(playerid, "~g~A~w~rmeria", 4000, 1);
    }
    else if(PlayerToPointStripped(1, playerid,254.8800,2023.7145,-6.7623, cx,cy,cz))
    {
    	SetPosEx(playerid, 2731.6631,-2417.5254,13.6280, 0, 0, 0)
    	GText(playerid, "~g~Guardia~n~~w~Nacional", 5000, 1);
    }
    // Entrada/Subida Helipuerto
    else if (PlayerToPointStripped(3, playerid,2721.3474,-2380.0967,17.3403, cx,cy,cz)) SetPosEx(playerid,2747.1721,-2380.1116,30.0547,0,0,0); //Subir
	else if (PlayerToPointStripped(3, playerid,2747.1721,-2380.1116,30.0547, cx,cy,cz)) SetPosEx(playerid,2721.3474,-2380.0967,17.3403,0,0,0); //Bajar
	else if(PlayerToPointStripped(1, playerid,1270.5482,-1539.9236,14.7471, cx,cy,cz))
	{//iglesia
		Pause(playerid);
		SetPosEx(playerid, 1465.0500,853.8983,-69.1137, 0, 0, 0)
	}
	else if(PlayerToPointStripped(1, playerid,1465.0500,853.8983,-69.1137, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1270.5482,-1539.9236,14.7471, 0, 0, 0);
	}
    //Ayuntamiento LS
	else if (PlayerToPointStripped(1, playerid,390.0630,173.5741,1008.3828, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1481.0206,-1769.5138,18.7958,0,0,0);
		GameTextForPlayer(playerid, "~w~los santos",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,154.2457,-1946.2103,5.1346, cx,cy,cz)) SetPosEx(playerid,154.1186,-1949.6292,47.8750,1.4819,0,0); //Faro Enter
	else if (PlayerToPointStripped(1, playerid,154.1186,-1949.6292,47.8750, cx,cy,cz)) SetPosEx(playerid,154.2457,-1946.2103,5.1346,1.4819,0,0); //Faro Exit
	else if (PlayerToPointStripped(1, playerid,1833.512939, -1842.450073, 13.578125, cx,cy,cz))
	{
		// 24/7 1 Enter
		SetPosEx(playerid, -25.570781, -141.143249, 1003.546875, 3.118535, 16, 0);
		GameTextForPlayer(playerid, "~r~~h~24 ~g~~h~7",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,-25.570781, -141.143249, 1003.546875, cx,cy,cz))
	{
		// 24/7 1 Exit
		SetPosEx(playerid, 1833.512939, -1842.450073, 13.578125, 268.009368, 0, 0);
		GameTextForPlayer(playerid, "~w~los santos",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,1352.232055, -1758.937500, 13.507812, cx,cy,cz))
	{
		// 24/7 2 Enter
		SetPosEx(playerid, -26.896020, -57.764526, 1003.546875, 357.141845, 6, 0);
		GameTextForPlayer(playerid, "~r~~h~24 ~g~~h~7",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,-26.896020, -57.764526, 1003.546875, cx,cy,cz))
	{
		// 24/7 2 Exit
		SetPosEx(playerid, 1352.232055, -1758.937500, 13.507812, 358.105255,0, 0);
		GameTextForPlayer(playerid, "~w~los santos",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,1315.636962, -898.366149, 39.578125, cx,cy,cz))
	{
		// 24/7 3 Enter
		SetPosEx(playerid, -27.485527, -31.096693, 1003.557250, 0.588506, 4, 0);
		GameTextForPlayer(playerid, "~r~~h~24 ~g~~h~7",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,-27.485527, -31.096693, 1003.557250, cx,cy,cz))
	{
		// 24/7 3 Exit
		SetPosEx(playerid, 1315.636962, -898.366149, 39.578125, 182.636932,0, 0);
		GameTextForPlayer(playerid, "~w~los santos",5000,1);
	}
	//Electronicos SOCIP entrada
	else if (PlayerToPointStripped(1, playerid,1773.3176,-1654.7664,14.4287, cx,cy,cz)){
		Pause(playerid);
		StopAudioStreamForPlayer(playerid);
		PlayAudioStreamForPlayer(playerid,"http://www.xopom.com/UserFiles/Billboard/33_alexandra_stan-mr_saxobeat.mp3");
		SetPosEx(playerid, -1983.0648,1212.5109,75.1797,0, 0, 0);
	}
	//Electronicos SOCIP salida
	else if (PlayerToPointStripped(1, playerid,-1983.0648,1212.5109,75.1797, cx,cy,cz)){
		StopAudioStreamForPlayer(playerid);
		SetPosEx(playerid, 1773.3176,-1654.7664,14.4287,0, 0, 0);
	}
	// Alhambra LS
	else if(PlayerToPointStripped(1, playerid,1836.4064,-1682.4403,13.3493, cx,cy,cz))
	{
		SetPosEx(playerid, 493.3891,-22.7212,1000.6797,0,17,0);
		SetPlayerWalkingStyle(playerid, 0);
	}
	// Alhambra Exit
	else if(PlayerToPointStripped(1, playerid,493.7739,-23.9849,1000.6797, cx,cy,cz))
	{
		SetPosEx(playerid, 1836.4064,-1682.4403,13.3493,0,0,0);
		SetPlayerWalkingStyle(playerid, PlayerInfo[playerid][pWalk]);
	}
		//centro inicial
	if(PlayerToPointStripped(1, playerid,1154.16, -1772.65, 16.60, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid,-1855.7919,44.0830,1055.1891,0,14,0);
		PlayerInfo[playerid][pInt] = 14;
	}
	if(PlayerToPointStripped(1, playerid,-1856.1342,41.4557,1055.1118, cx,cy,cz))
	{
		SetPosEx(playerid,1154.16, -1772.65, 16.60,0, 0, 0);
		PlayerInfo[playerid][pInt] = 14;
	}
	// Concesionario Grotty entrada/salida

	else if (PlayerToPointStripped(1.0, playerid,593.6577,-1250.7083,18.2470, cx,cy,cz))
	{

		{
			Pause(playerid);
			SetPosEx(playerid, 324.8188,-1513.2593,15.7878, 20.0, 0, 0);
			GameTextForPlayer(playerid, "~w~Concesionario", 5000, 1);
		}

	}

	else if (PlayerToPointStripped(1.0, playerid,324.8188,-1513.2593,15.7878, cx,cy,cz))
	{
		{
			Pause(playerid);
			SetPosEx(playerid, 1402.5096,6.8206,1000.9063, 20.0, 0, 0);
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		}

	}
	/// Entrada al garage concesionario

	else if (PlayerToPointStripped(1, playerid,528.6616,-1293.2672,17.2422, cx,cy,cz))
	{
		{
			SetPlayerInterior(playerid, 1);
			SetPlayerPos(playerid, 1402.5096,6.8206,1000.9063);
			GameTextForPlayer(playerid, "~w~GARAGE", 5000, 1);
		}

	}
	// salida
	else if (PlayerToPointStripped(1.0, playerid,1402.5096,6.8206,1000.9063, cx,cy,cz))
	{
		{
			Pause(playerid);
			SetPlayerInterior(playerid, 0);
			SetPosEx(playerid, 528.6616,-1293.2672,17.2422, 20.0, 0, 0);
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		}
	}
	// Banco ENTER
	else if (PlayerToPointStripped(1, playerid,1459.19, -1009.92, 26.84, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 363.3442,-1627.5922,39.2349,334.4131+1, 0, 0);
		GText(playerid, "~w~Banco Central~n~de Los Santos", 2000, 1);
	}
	// Banco EXIT
	else if (PlayerToPointStripped(1, playerid,363.3442,-1627.5922,39.2349, cx,cy,cz))
	{
		SetPosEx(playerid, 1459.19, -1009.92, 26.84,0, 0, 0);
		GText(playerid, "~w~Los Santos", 5000, 1);
	}
   	//Juzgados Enter
	else if (PlayerToPointStripped(1, playerid,1495.35,-1550.79,15.37, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 1444.9486,-1465.4956,1616.3123,0,0,0);
		GameTextForPlayer(playerid, "~y~Juzgado",5000,1);
	}
	//Juzgados
	else if (PlayerToPointStripped(1, playerid,1444.9486,-1465.4956,1616.3123, cx,cy,cz))
	{
		//Juzgados
		Pause(playerid);
		SetPosEx(playerid,1495.35,-1550.79,15.37,0,0,0);
		GameTextForPlayer(playerid, "~r~Los Santos",5000,1);
	}
   	// Boxeo ilegal enter
	else if (PlayerToPointStripped(1, playerid,2266.4553,-1700.2357,13.6902, cx,cy,cz))
	{
		Pause(playerid);
		SetPosEx(playerid, 2329.1084,-1667.3103,-96.9041,0,0,0);
		GameTextForPlayer(playerid, "~y~Boxeo Ilegal",5000,1);
	}
	//Juzgados ilegal exit
	else if (PlayerToPointStripped(1, playerid,2329.1084,-1667.3103,-96.9041, cx,cy,cz))
	{
		SetPosEx(playerid,2266.6812,-1700.7478,13.6892,0,0,0);
		GameTextForPlayer(playerid, "~r~Los Santos",5000,1);
	}
	// Hitman ENTER
	else if (PlayerToPointStripped(2, playerid,-265.4772,-2213.2527,29.0420, cx,cy,cz))
	{
		if(Hitman(playerid) || hqlock[HIT] == 0)
		{
			SetPosEx(playerid, -2175.8762,886.8079,96.9397,0.0000,0,0);
			GameTextForPlayer(playerid, "~w~Hitman",5000,1);
		}
		else return GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	// Hitman exit
	else if (PlayerToPointStripped(2, playerid,-2175.8762,886.8079,96.9397, cx,cy,cz)) SetPosEx(playerid, -265.4772,-2213.2527,29.0420,0, 0, 0);
	// FBI Enter
	else if (PlayerToPointStripped(1, playerid,914.2686,-1004.6304,37.9794, cx,cy,cz))	SetPosEx(playerid,238.6246,138.7285,1003.0234,0,3,0);
	// Fbi Exit
	else if (PlayerToPointStripped(1, playerid,238.6246,138.7285,1003.0234, cx,cy,cz)) SetPosEx(playerid, 914.2686,-1004.6304,37.9794,0, 0, 0);
	// FBI Planta
	else if (PlayerToPointStripped(1, playerid,208.0704,142.1360,1003.0234, cx,cy,cz))	ShowPlayerDialog(playerid, DIALOG_FBI_ELEVATOR, DIALOG_STYLE_LIST, "FBI - ¿Donde deseas ir?", "Garage\nTerraza", "Aceptar", "Cancelar");
	// Fbi Helipuerto
	else if (PlayerToPointStripped(1, playerid,914.0172,-1026.9460,111.0547, cx,cy,cz))	ShowPlayerDialog(playerid, DIALOG_FBI_ELEVATOR, DIALOG_STYLE_LIST, "FBI - ¿Donde deseas ir?", "Garage\nPlanta", "Aceptar", "Cancelar");
	//FBI Garage
	else if(PlayerToPointStripped(1, playerid,914.2907,-1037.3264,31.8984, cx,cy,cz))
	{
		if(Team_FBI(playerid))	ShowPlayerDialog(playerid, DIALOG_FBI_ELEVATOR, DIALOG_STYLE_LIST, "FBI - ¿Donde deseas ir?", "Planta\nTerraza", "Aceptar", "Cancelar");
		else Message(playerid, COLOR_GRAD2, "¡No perteneces al FBI, debes entrar por la puerta principal!");
	}
	// -=========================== FOOD PLACES SA ===========================- //
	else if (PlayerToPointStripped(1, playerid,364.7064,-11.3221,1001.8516, cx,cy,cz) && GetPlayerInterior(playerid) == 9)
	{
		SetPosEx(playerid, 928.6895,-1353.0563,13.3438,89.7594,0,0);
		GText(playerid, "~w~Los santos", 5000, 1);
	}
	else if (PlayerToPointStripped(1, playerid,928.6895,-1353.0563,13.3438, cx,cy,cz))
	{
		// CBELL ENTER LS
		if(PlayerInfo[playerid][pPbizzkey] != 22) Till(22, 100);
		SetPosEx(playerid, 364.7064,-11.3221,1001.8516,357.6383, 9, 0);
		GameTextForPlayer(playerid, "~h~~y~Clukin ~w~bell",5000,1);
		SetPlayerShopName(playerid,"FDCHICK");
	}
	else if (PlayerToPointStripped(1, playerid,363.1719,-74.8738,1001.5078, cx,cy,cz) && GetPlayerInterior(playerid) == 10)
	{
		SetPosEx(playerid, 810.6635,-1616.1995,13.5469,267.7108,0,0);
		GText(playerid, "~w~Los santos", 5000, 1);
	}
	else if (PlayerToPointStripped(1, playerid,810.6635,-1616.1995,13.5469, cx,cy,cz))
	{
		// BSHOT ENTER LS
		if(PlayerInfo[playerid][pPbizzkey] != 21) Till(21, 100);
		SetPosEx(playerid,363.1719,-74.8738,1001.5078,314.0846, 10, 0);
		GameTextForPlayer(playerid, "~w~burger~b~~h~shot",5000,1);
		SetPlayerShopName(playerid,"FDBURG");
	}
	else if (PlayerToPointStripped(1, playerid,372.3216,-133.2976,1001.4922, cx,cy,cz) && GetPlayerInterior(playerid) == 5)
	{
		SetPosEx(playerid, 2105.2844,-1806.5475,13.5547,90.9893,0,0);
		GText(playerid, "~w~Los santos", 5000, 1);
	}
	else if (PlayerToPointStripped(1, playerid,2105.2844,-1806.5475,13.5547, cx,cy,cz))
	{
		// PIZZA STACK ENTER LS
		SetPosEx(playerid,372.3216,-133.2976,1001.4922, 0, 5, 0);
		GameTextForPlayer(playerid, "~w~pizza~y~stack",5000,1);
		SetPlayerShopName(playerid,"FDPIZZA");
	}
	// -=========================== HQ Locks ========================- //
	// Johnson House - GS HQ
	else if (PlayerToPointStripped(1, playerid,2495.3481,-1691.1355,14.7656, cx,cy,cz))
	{
		if(Team_Groove(playerid) || hqlock[GS] == 0)
		{
			SetPosEx(playerid, 2496.0061,-1693.5201,1014.7422, 181, 3, 1);
			GameTextForPlayer(playerid, "~g~Groove Street HQ",5000,1);
		}
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,2496.0039,-1692.2004,1014.7422, cx,cy,cz) && GetPlayerVirtualWorld(playerid) == 1)
	{
		//GS Exit
		SetPosEx(playerid, 2495.3718,-1688.8561,14.0673,1 ,0 ,0);
		GameTextForPlayer(playerid, "~w~Los santos",5000,1);
	}
	// La Hermandad HQ
	else if (PlayerToPointStripped(1, playerid,1888.9288,-2000.8751,13.5469, cx,cy,cz))
	{
		if(Team_Hermandad(playerid) || hqlock[LH] == 0)
		{
			SetPosEx(playerid, 2468.6663,-1698.2738,1013.5078, 181, 2, 1);
			GameTextForPlayer(playerid, "~b~La hermandad HQ",5000,1);
		}
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,2468.6663,-1698.2738,1013.5078, cx,cy,cz) && GetPlayerVirtualWorld(playerid) == 1)
	{
		//LH Exit
		SetPosEx(playerid, 1888.9288,-2000.8751,13.5469,1 ,0 ,0);
		GameTextForPlayer(playerid, "~w~Los santos",5000,1);
	}

 	// Moteros entrada
	else if (PlayerToPointStripped(1, playerid,681.5901,-473.3940,16.5363, cx,cy,cz))
	{
		if(Moteros(playerid) || hqlock[MOT] == 0)
		{
			Pause(playerid);
			SetPosEx(playerid, 1133.0538,-15.0658,1017.7278, 181, 2, 1);
			GameTextForPlayer(playerid, "~b~Bar Hell Angels",5000,1);
			
		}
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,1133.0538,-15.0658,1017.7278, cx,cy,cz))
	{
		// Moteros exit
		SetPosEx(playerid, 681.5901,-473.3940,16.5363,0, 0 ,0);
		GameTextForPlayer(playerid, "~w~Los santos",5000,1);
	}
	// Latin Kings HQ
	else if (PlayerToPointStripped(1, playerid,2259.4226,-1019.1196,59.2971, cx,cy,cz))
	{
		if(Team_LK(playerid) || hqlock[LK] == 0)
		{
			SetPosEx(playerid, 260.9743,1237.6493,1084.2578, 181, 9, 50);
			GameTextForPlayer(playerid, "~y~Latin Kings HQ",5000,1);
		}
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,260.9743,1237.6493,1084.2578, cx,cy,cz) && GetPlayerVirtualWorld(playerid) == 50)
	{
		//LK Exit
		SetPosEx(playerid, 2259.4226,-1019.1196,59.2971,0 ,0 ,0);
		GameTextForPlayer(playerid, "~w~Los santos",5000,1);
	}
	// Teleport Fissore
	else if (PlayerToPointStripped(1, playerid,312.7113,-1770.5463,4.7418, cx,cy,cz)) SetPosEx(playerid, 312.8430,-1767.8142,11.6597,357.2400, 0, 0);
	else if (PlayerToPointStripped(1, playerid,312.8430,-1767.8142,11.6597, cx,cy,cz)) SetPosEx(playerid, 312.7113,-1770.5463,4.7418, 0, 0, 0);
	// Russian HQ
	else if (PlayerToPointStripped(1, playerid,691.2953,-1275.7925,13.5605, cx,cy,cz))
	{
		if(Mafia_Rusa(playerid) || hqlock[RUS] == 0)
		{
			SetPosEx(playerid, 1260.8531,-785.5576,1091.9063,264.6607, 5, 0);
			GameTextForPlayer(playerid, "~w~familia rusa hq",5000,1);
		}
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	// Russian HQ Terraza
	else if (PlayerToPointStripped(1, playerid,725.5151,-1276.4104,13.6484, cx,cy,cz))
	{
		if(Mafia_Rusa(playerid) || hqlock[RUS] == 0) SetPosEx(playerid, 718.0347,-1276.3741,17.6484,264.6607, 0, 0);
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,718.0347,-1276.3741,17.6484, cx,cy,cz) && GetPlayerVirtualWorld(playerid) == 0)
	{
		//RUS Exit
		SetPosEx(playerid, 725.5151,-1276.4104,13.6484,0 ,0 ,0);
	}
	// Mafia Italiana HQ
	else if (PlayerToPointStripped(1, playerid,1122.7068,-2036.8125,69.8942, cx,cy,cz))
	{
		if(Mafia_Italiana(playerid) || hqlock[ITA] == 0) SetPosEx(playerid, 1260.8531,-785.5576,1091.9063,264.6607, 5, 1);
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	// Piratas 4x4 HQ
	else if (PlayerToPointStripped(1, playerid, 1080.9240,-345.3622,73.9847, cx,cy,cz))
	{
		if(Piratas4x4(playerid) || hqlock[PIR] == 0) SetPosEx(playerid, 1260.8531,-785.5576,1091.9063,264.6607, 5, 3);
		else return GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	// Yakuza
	else if (PlayerToPointStripped(1, playerid,300.0860,-1154.5682,81.3041, cx,cy,cz))
	{
		if(Mafia_Yakuza(playerid) || hqlock[YAK] == 0) SetPosEx(playerid, 1260.8531,-785.5576,1091.9063,264.6607, 5, 2);
		else return	GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
	}
	else if (PlayerToPointStripped(1, playerid,1260.8531,-785.5576,1091.9063, cx,cy,cz))
	{
		//Salida LCN, Rusos, Yakuza, Piratas
		if(GetPlayerVirtualWorld(playerid) == 1)
		{
			SetPosEx(playerid, 1122.7068,-2036.8125,69.8942,0 ,0 ,0);
		}
		else if(GetPlayerVirtualWorld(playerid) == 0)
		{
			SetPosEx(playerid, 691.2953,-1275.7925,13.5605,1 ,0 ,0);
		}
		else if(GetPlayerVirtualWorld(playerid) == 2)
		{
			SetPosEx(playerid, 300.0860,-1154.5682,81.3041,1 ,0 ,0);
		}
		else if(GetPlayerVirtualWorld(playerid) == 3)
		{
			SetPosEx(playerid, 1080.9240,-345.3622,73.9847,0 ,0 ,0);
		}
	}
 	//======================== Fin Teleports =========================//
	return 1;
}

function ClearChatbox(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
	}
	return 1;
}

function CheckCarHealth()
{
	new string[128];
	for (new i=0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new Float:health;
			GetVehicleHealth(GetPlayerVehicleID(i),health);
			new newcar = GetPlayerVehicleID(i);
			if (health <= 500 && !IsABike(newcar) && !isPilotosVehicle(newcar))
			{
				if(engineOn[GetPlayerVehicleID(i)] == 1)
				{
					if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					{
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(newcar,0,lights,alarm,doors,bonnet,boot,objective);
						engineOn[GetPlayerVehicleID(i)] = false;
						format(string, sizeof(string), "* El Vehiculo de  %s se ha apagado bruscamente", PlayerName(i));
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
		}
	}
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new string[128];
	if(IsPlayerNPC(playerid))
	{
		return 1;
	}
	if((newkeys & KEY_NO) && IsPlayerInAnyVehicle(playerid)) {
		new idcar = GetPlayerVehicleID(playerid);
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(idcar, engine,lights,alarm,doors,bonnet,boot,objective);

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Message(playerid, COLOR_GREY, "No eres el conductor.");
		if(gEngine[playerid] == 1) { return 1; }
		if(NoBattery(idcar)) return Message(playerid, COLOR_GRAD2, "¡Vehículo sin batería!");
		if(engineOn[idcar] == 0)
		{
			if(IsABike(idcar)) { return 1; }
			if(isRentaVehicle(idcar) && HireKey[playerid] != idcar) { return 1; }
			if(IsAnOwnableCar(idcar)) { if(PlayerInfo[playerid][pPcarkey] == idcar || PlayerInfo[playerid][pPcarkey2] == idcar || PlayerInfo[playerid][pCarPremium] == idcar || PlayerInfo[playerid][pCarPremium2] == idcar) { } else { return 1; } }

			new Float:health;
			GetVehicleHealth(idcar, health);
			if (health > 300)
			{
				format(string, sizeof(string), "* %s gira la llave del vehículo.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetTimerEx("StartingTheVehicle",2500,false,"i",playerid);
				GameTextForPlayer(playerid, "~w~Encendiendo motor",2500,3);
				gEngine[playerid] = 1;

				Licencias_checkTestConducir(playerid);
				return 1;
			} else {
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetVehicleParamsEx(idcar,0,lights,alarm,doors,bonnet,boot,objective);
				engineOn[idcar] = false;
				gEngine[playerid] = 0;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, COLOR_YELLOW, "No puedes encender el vehiculo debido al daño, llama a un mecanico");
				return 1;
			}

		}
		else if(engineOn[idcar] == 1)
		{
			if(IsABike(idcar)) { return 1; }
			if(isRentaVehicle(idcar) && HireKey[playerid] != idcar) { return 1; }
			if(IsAnOwnableCar(idcar)) { if(PlayerInfo[playerid][pPcarkey] == idcar || PlayerInfo[playerid][pPcarkey2] == idcar || PlayerInfo[playerid][pCarPremium] == idcar || PlayerInfo[playerid][pCarPremium2] == idcar) { } else { return 1; } }

			format(string, sizeof(string), "* %s apaga el motor del vehículo.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetVehicleParamsEx(idcar,0,lights,alarm,doors,bonnet,boot,objective);
			engineOn[idcar] = false;
			gEngine[playerid] = 0;
			return 1;
		}
	}

	if(newkeys == 16 && InAmbu[playerid] > 0)
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(InAmbu[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		InAmbu[playerid] = 0;
	}
	if(newkeys == KEY_YES){

		if(Puertas[playerid] == 0){
			Puertas[playerid] = 1;
			CheckForOpenDoor(playerid);

		}
		else {
			Puertas[playerid] = 0;
			CheckForCloseDoor(playerid);

		}
	}
	if(newkeys == KEY_FIRE)
	{
		if(Tazer[playerid] > 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return Message(playerid, COLOR_GREY, "¡Este comando no se puede utilizar estando en un vehículo.");
			new suspect = GetClosestPlayer(playerid);
			if(PlayerTazeado[suspect] > 0) return Message(playerid, COLOR_GREY, "¡Este jugador ya está tazeado!");
			if(ProxDetectorS(3.0, playerid,suspect))
			{
				if(IsACop(suspect)) return Message(playerid, COLOR_GREY, "¡No puedes tazear a un compañero!");
				new randt = random(4)+1;
				if(randt == 1)
				{
					format(string, sizeof(string), "* Oficial %s dispara contra %s, pero no consigue tazear al sujeto", PlayerName(playerid), PlayerName(suspect));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Tazer[playerid] = 0;
					SetTimerEx("RemoveHand", 7000, false, "i", playerid);
				}
				else
				{
					format(string, sizeof(string), "* Oficial %s dispara contra %s y tazea al sujeto", PlayerName(playerid), PlayerName(suspect));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* Tazeado (%s)", PlayerName(suspect));
					ProxDetector(30.0,playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
					GameTextForPlayer(suspect, "ARRESTADO", 2500, 3);
					TogglePlayerControllable(suspect, 0);
					ApplyAnimation(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
					PlayerTazeado[suspect] = 1;
					Tazer[playerid] = 0;
					SetTimerEx("RemoveHand", 7000, false, "i", playerid);
					SetTimerEx("UntazePlayer", 20000, false, "i", suspect);
				}
			}
			else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		}
	}
	if(newkeys & KEY_WALK)
	{
		if(Skate[playerid] > 9)
		{
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		}
	}
	if(newkeys & KEY_CROUCH)
	{
		if(TutTime[playerid] > 0)
		{
			TextDrawHideForPlayer(playerid, Film_1);
			TextDrawHideForPlayer(playerid, Film_2);
			TextDrawHideForPlayer(playerid, Tutorial[playerid]);
			TutTime[playerid] = 5;
			TutorialStep_Forward(playerid);
		}
	}
	if(newkeys & KEY_SPRINT)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerDrunk[playerid] > 9) { ApplyAnimation(playerid,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[playerid]*1000); }
			else if(Skate[playerid] > 9)
			{
				if(Skate[playerid] == 10) ApplyAnimation(playerid,"SKATE","skate_idle",4.0,1,1,1,1,500);
				else if(Skate[playerid] == 20) ApplyAnimation(playerid,"SKATE","skate_run",4.0,1,1,1,1,500);
				else if(Skate[playerid] == 30) ApplyAnimation(playerid,"SKATE","skate_sprint",4.0,1,1,1,1,500);
			}
			else if(PlayerCuffed[playerid] > 0 || Rescued[playerid] > 0) 	ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			else if(TutTime[playerid] > 0)
			{
				if(TutTime[playerid] == 5)   TutTime[playerid] = 15;
				else if(TutTime[playerid] == 15)   TutTime[playerid] = 25;
				else if(TutTime[playerid] == 25)   TutTime[playerid] = 35;
				else if(TutTime[playerid] == 35)   TutTime[playerid] = 50;
				else if(TutTime[playerid] == 50)   TutTime[playerid] = 65;
				else if(TutTime[playerid] == 65)   TutTime[playerid] = 80;
				else if(TutTime[playerid] == 80)   TutTime[playerid] = 90;
				else if(TutTime[playerid] == 90)   TutTime[playerid] = 105;
				else if(TutTime[playerid] == 105)   TutTime[playerid] = 120;
				else if(TutTime[playerid] == 120)   TutTime[playerid] = 135;
				else if(TutTime[playerid] == 135)   TutTime[playerid] = 150;
				else if(TutTime[playerid] == 150)   TutTime[playerid] = 165;
				else if(TutTime[playerid] == 165)   TutTime[playerid] = 180;
				else if(TutTime[playerid] == 180)   TutTime[playerid] = 195;
				else if(TutTime[playerid] == 195)   TutTime[playerid] = 210;
				else if(TutTime[playerid] == 210)   TutTime[playerid] = 225;
				else if(TutTime[playerid] == 225)   TutTime[playerid] = 240;
				else if(TutTime[playerid] == 240)   TutTime[playerid] = 250;
				else if(TutTime[playerid] == 250)   TutTime[playerid] = 260;
				else if(TutTime[playerid] == 260)   TutTime[playerid] = 275;
				else if(TutTime[playerid] == 275)   TutTime[playerid] = 290;
				else if(TutTime[playerid] == 290)   TutTime[playerid] = 305;
				else if(TutTime[playerid] == 305)   TutTime[playerid] = 315;
				else if(TutTime[playerid] == 315)   TutTime[playerid] = 330;
				else if(TutTime[playerid] == 330)   TutTime[playerid] = 340;
				TutorialStep_Forward(playerid);
			}
			else if(Accesory[playerid] > 0)
			{
			    if(Accesory[playerid] == 1) // Glasses
			    {
			    	switch(ClothesID[playerid])
			    	{
			    		case 19005: { Accesory_Test(playerid, 3, 19006, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19006: { Accesory_Test(playerid, 3, 19007, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19007: { Accesory_Test(playerid, 3, 19008, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19008: { Accesory_Test(playerid, 3, 19009, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19009: { Accesory_Test(playerid, 3, 19010, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19010: { Accesory_Test(playerid, 3, 19011, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19011: { Accesory_Test(playerid, 3, 19012, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19012: { Accesory_Test(playerid, 3, 19013, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19013: { Accesory_Test(playerid, 3, 19014, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19014: { Accesory_Test(playerid, 3, 19015, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19015: { Accesory_Test(playerid, 3, 19016, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19016: { Accesory_Test(playerid, 3, 19017, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19017: { Accesory_Test(playerid, 3, 19018, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19018: { Accesory_Test(playerid, 3, 19019, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19019: { Accesory_Test(playerid, 3, 19020, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19020: { Accesory_Test(playerid, 3, 19021, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19021: { Accesory_Test(playerid, 3, 19022, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19022: { Accesory_Test(playerid, 3, 19023, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19023: { Accesory_Test(playerid, 3, 19024, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19024: { Accesory_Test(playerid, 3, 19025, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19025: { Accesory_Test(playerid, 3, 19026, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19026: { Accesory_Test(playerid, 3, 19027, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19027: { Accesory_Test(playerid, 3, 19028, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19028: { Accesory_Test(playerid, 3, 19029, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19029: { Accesory_Test(playerid, 3, 19030, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19030: { Accesory_Test(playerid, 3, 19031, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19031: { Accesory_Test(playerid, 3, 19032, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19032: { Accesory_Test(playerid, 3, 19033, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19033: { Accesory_Test(playerid, 3, 19034, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		case 19034: { Accesory_Test(playerid, 3, 19035, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
			    		default: 	{ClothesID[playerid] = 19005; Message(playerid, COLOR_GRAD2, "Has visto todas las gafas. Apreta ESPACIO para volver a verlas"); }
			    	}
			    }
				else if(Accesory[playerid] == 2) // Bandana
				{
					switch(ClothesID[playerid])
					{
						case 18910: {Accesory_Bandana(playerid, 18917);}
						case 18917: {Accesory_Bandana(playerid, 18913);}
						case 18913: {Accesory_Bandana(playerid, 18916);}
						case 18916: {Accesory_Bandana(playerid, 18915);}
						case 18915: {Accesory_Bandana(playerid, 18912);}
						default: 	{ClothesID[playerid] = 18910; Message(playerid, COLOR_GRAD2, "Has visto todas las bandanas. Apreta ESPACIO para volver a verlas"); }
					}
				}
				else if(Accesory[playerid] == 3) // Hat
				{
					switch(ClothesID[playerid])
					{
						case 18925: { Accesory_Test(playerid, 2, 18926, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18926: { Accesory_Test(playerid, 2, 18927, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18927: { Accesory_Test(playerid, 2, 18928, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18928: { Accesory_Test(playerid, 2, 18929, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18929: { Accesory_Test(playerid, 2, 18930, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18930: { Accesory_Test(playerid, 2, 18931, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18931: { Accesory_Test(playerid, 2, 18932, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18932: { Accesory_Test(playerid, 2, 18933, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18933: { Accesory_Test(playerid, 2, 18934, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						case 18934: { Accesory_Test(playerid, 2, 18935, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
						default: 	{ClothesID[playerid] = 18925; Message(playerid, COLOR_GRAD2, "Has visto todas las gorras. Apreta ESPACIO para volver a verlas"); }
					}
				}
			}
		}
	}
	if(newkeys & KEY_FIRE && newkeys & KEY_HANDBRAKE)
	{
		if(RecentlyShot[playerid] == 0)
		{
			RecentlyShot[playerid] = 1;
			if(GetPlayerWeapon(playerid) == 34)
			{
				new Float:blahx, Float:blahy, Float:blahz;
				HeadshotCheck(playerid, blahx, blahy, blahz);
				return 1;
			}
			return 1;
		}
		return 1;
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(IsPlayerConnected(playerid))
		{
			if(RStep[playerid] > 0)
			{
				if(RStep[playerid] == 1)
				{
					new mtext[12],otext[12];
					if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
					if(PlayerInfo[playerid][pOrigin] == 1) otext = "Argentina";
					if(PlayerInfo[playerid][pOrigin] == 2) otext = "Europa";
					if(PlayerInfo[playerid][pOrigin] == 3) otext = "Asia";
					if(PlayerInfo[playerid][pOrigin] == 4) otext = "Africa";
					if(PlayerInfo[playerid][pOrigin] == 5) otext = "Oceania";
					if(RegConfig[playerid] == 1)
					{
						format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~>~~w~Edad: ~r~?~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?", mtext);
						TDStr(RegDraw[playerid], string);
						PlayerInfo[playerid][pChar] = GetPlayerSkin(playerid);
						RegConfig[playerid] = 2;
						RegText[playerid] = 0;
						return 1;
					}
					else if(RegConfig[playerid] == 2)
					{
						format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~>~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
						TDStr(RegDraw[playerid], string);
						RegConfig[playerid] = 3;
						RegText[playerid] = 1;
						PlayerInfo[playerid][pOrigin] = 1;
						return 1;
					}
					else if(RegConfig[playerid] == 3)
					{
						format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge],otext);
						TDStr(RegDraw[playerid], string);
						RStep[playerid] = 1;
						RegText[playerid] = 1;
						RegConfig[playerid] = 4;
						return 1;
					}
					else if(RegConfig[playerid] == 4)
					{
						ClearChatbox(playerid, 15);
						TextDrawHideForPlayer(playerid, RegDraw[playerid]);
						TextDrawHideForPlayer(playerid, RegInfo);
						ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1)
						RStep[playerid] = 0;
						RegText[playerid] = 0;
						RegConfig[playerid] = 0;
						SetTimerEx("Reg_ShowDNI", 3000, false, "i", playerid);
						GameTextForPlayer(playerid, "~p~Configurando ~w~DNI", 3000, 3);
						SetTimerEx("RegMsn", 6000, false, "i", playerid);
					}
				}
			}
			else if (GetPlayerState(playerid) == 1)
			{
				TeleportPlayer(playerid);
				if(ReduceTime[playerid] == 0)
				{
					new Float:hp; GetPlayerHealth(playerid, hp);
					if(PlayerToPoint(1.0,playerid,-36.3182,-56.8905,1003.5469))
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-19.1974,-56.8366,1003.5469))
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-35.9060,-139.2014,1003.5469))
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-15.2743,-139.2626,1003.5469))
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+5);
					}
					else if(PlayerToPoint(1.0,playerid,-16.7039,-139.3292,1003.5469))
					{
						ReduceTime[playerid] = 1;
						SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
				}
				for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
						if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
						{
							SetPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz],0,HouseInfo[i][hInt],HouseInfo[i][hWorld]);
							PlayerInfo[playerid][pEntered] = i;
						}
						else GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
					}
					else if (PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
					{
						if(PlayerInfo[playerid][pEntered] == i)
						{
							SetPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez],0,0,0);
							PlayerInfo[playerid][pEntered] = -1;
						}
					}
				}
			}
			else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1);
			}
		}
	}
	return 1;
}

function StartingTheVehicle(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new RandomStart;
			new string[128];
			new engine,lights,alarm,doors,bonnet,boot,objective;
			new newcar = GetPlayerVehicleID(playerid);
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
			RandomStart = random(8);
			switch(RandomStart)
			{
				case 0,1,2,3,4,6,7:
				{
					SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
					format(string, sizeof(string), "* %s enciende el motor de su vehículo.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
					gEngine[playerid] = 0;
					engineOn[newcar] = true;
				}
				case 5:
				{
					format(string, sizeof(string), "* El vehículo de %s no enciende.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, MORADO_ADMIN,MORADO_ADMIN,MORADO_ADMIN,MORADO_ADMIN,MORADO_ADMIN);
					gEngine[playerid] = 0;
					engineOn[newcar] = false;
				}
			}
		}
		else
		{
			gEngine[playerid] = 0;
		}
	}
	return 1;
}

INI:hq_locks[](name[], value[])
{
	INI_Int("Groove", 			hqlock[GS]);
	INI_Int("Moteros", 			hqlock[MOT]);
	INI_Int("La_Hermandad", 	hqlock[LH]);
	INI_Int("Latin_Kings", 		hqlock[LK]);
	INI_Int("La_Cosa_Nostra", 	hqlock[ITA]);
	INI_Int("Rusos", 			hqlock[RUS]);
	INI_Int("Hitman",           hqlock[HIT]);
	INI_Int("Yakuza", 			hqlock[YAK]);
	INI_Int("Piratas",          hqlock[PIR]);
	INI_Int("Ballas",          	hqlock[BL]);
	return 0;
}

SaveHQLocks()
{
	new
	INI:ini = INI_Open("hq_locks.ini");
	INI_WriteInt(ini, "Groove", 			hqlock[GS]);
	INI_WriteInt(ini, "Moteros", 			hqlock[MOT]);
	INI_WriteInt(ini, "La_Hermandad", 		hqlock[LH]);
	INI_WriteInt(ini, "Latin_Kings", 		hqlock[LK]);
	INI_WriteInt(ini, "La_Cosa_Nostra", 	hqlock[ITA]);
	INI_WriteInt(ini, "Rusos", 				hqlock[RUS]);
	INI_WriteInt(ini, "Hitman",             hqlock[HIT]);
	INI_WriteInt(ini, "Yakuza", 			hqlock[YAK]);
	INI_WriteInt(ini, "Piratas",            hqlock[PIR]);
	INI_WriteInt(ini, "Ballas",         	hqlock[BL]);
	INI_Close(ini);
}

INI:stuff[](name[], value[])
{
	INI_Int("Jackpot", 	 	Jackpot);
	INI_Int("Tax",			Tax);
	INI_Int("TaxValue", 	TaxValue);
	INI_Int("Blood", 		Blood);
	return 0;
}

function SaveStuff()
{
	new
	INI:ini = INI_Open("stuff.ini");
	INI_WriteInt(ini, "Jackpot", 	Jackpot);
	INI_WriteInt(ini, "Tax",		Tax);
	INI_WriteInt(ini, "TaxValue", 	TaxValue);
	INI_WriteInt(ini, "Blood", 		Blood);
	INI_Close(ini);
}

INI:robs[](name[], value[])
{
	INI_Int("Piratas",      RPirata);
	INI_Int("Groove",		RGroove);
	INI_Int("Hermandad",    RHerman);
	INI_Int("LKings",       RLKings);
	INI_Int("Italianos",    RLCN);
	INI_Int("Yakuza",       RYakuza);
	INI_Int("Rusos",        RRusos);
	INI_Int("Ballas",     	RBallas);
	return 0;
}

function SaveRobs()
{
	new
	INI:ini = INI_Open("robs.ini");
	INI_WriteInt(ini, "Piratas",        RPirata);
	INI_WriteInt(ini, "Groove",     	RGroove);
	INI_WriteInt(ini, "Hermandad",  	RHerman);
	INI_WriteInt(ini, "LKings",     	RLKings);
	INI_WriteInt(ini, "Italianos",  	RLCN);
	INI_WriteInt(ini, "Yakuza",     	RYakuza);
	INI_WriteInt(ini, "Rusos",      	RRusos);
	INI_WriteInt(ini, "Ballas",        RBallas);
	INI_Close(ini);
}

INI:fondos[](name[], value[])
{
	INI_Int("LSPD",     	Fondos[LSPD]);
	INI_Int("FBI",      	Fondos[FBI]);
	INI_Int("SAMUR",    	Fondos[SAMUR]);
	INI_Int("CNN",      	Fondos[CNN]);
	INI_Int("SAEM",     	Fondos[SAEM]);
	INI_Int("Italianos",	Fondos[LCN]);
	INI_Int("Yakuza",   	Fondos[YAK]);
	INI_Int("Rusos",    	Fondos[RUS]);
	INI_Int("Piratas",  	Fondos[PIR]);
	return 0;
}

function SaveFunds()
{
	new
	INI:ini = INI_Open("fondos.ini");
	INI_WriteInt(ini, "LSPD",       Fondos[LSPD]);
	INI_WriteInt(ini, "FBI",        Fondos[FBI]);
	INI_WriteInt(ini, "SAMUR",      Fondos[SAMUR]);
	INI_WriteInt(ini, "CNN",        Fondos[CNN]);
	INI_WriteInt(ini, "SAEM",       Fondos[SAEM]);
	INI_WriteInt(ini, "Italianos",  Fondos[LCN]);
	INI_WriteInt(ini, "Yakuza",     Fondos[YAK]);
	INI_WriteInt(ini, "Rusos",      Fondos[RUS]);
	INI_WriteInt(ini, "Piratas",    Fondos[PIR]);
	INI_Close(ini);
}

function ClearKnock(playerid)
{
	new	string[128];
	Connect(playerid) {
		if(KnockedDown[playerid] == 1){
			KnockedDown[playerid] = 0,
			format(string, sizeof(string), "* %s se recupera del golpe.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ClearAnimations(playerid);
		}
		else KnockedDown[playerid] = 0;
	}
}

stock HeadshotCheck(playerid, &Float:x, &Float:y, &Float:z)
{
	new Float:fx,Float:fy,Float:fz;
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);

	new Float:cx,Float:cy,Float:cz;
	GetPlayerCameraPos(playerid, cx, cy, cz);

	for(new Float:i = 0.0; i < 50; i = i + 0.5)
	{
		x = fx * i + cx;
		y = fy * i + cy;
		z = fz * i + cz;

		#if defined SHOWPATH
		#endif

		for(new player = 0; player < MAX_PLAYERS; player ++)
		{
			if(IsPlayerConnected(playerid))
			{
				if(player != playerid)
				{
					if(GetPlayerSpecialAction(player) == SPECIAL_ACTION_DUCK)
					{
						if(IsPlayerInRangeOfPoint(player, 0.3, x, y, z))
						{
							SetHP(player, 0.0);
							CallRemoteFunction("OnPlayerDeath", "ddd", player, playerid, 34);
						}
					}
					else
					{
						if(IsPlayerInRangeOfPoint(player, 0.3, x, y, z - 0.7))
						{
							SetHP(player, 0.0);
							CallRemoteFunction("OnPlayerDeath", "ddd", player, playerid, 34);
						}
					}
				}
			}
		}
	}
	return 1;
}

function RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		if(plyAmmo[slot] != 0)
		{
			SafeGivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,PX,PY,PZ);
		GetVehiclePos(vehicleid, X,Y,Z);
		new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
		if(Distance <= radi*radi)
		{
			return 1;
		}
	}
	return 0;
}

stock Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

function VolverApostar(playerid)
{
	Connect(playerid) {
		YaAposto[playerid] = 0;
	}
}

function EnableQuest(playerid)
{
	Connect(playerid) {
		duda[playerid] = 0;
	}
}

function ReportReset(playerid)
{
	Connect(playerid) {
		JustReported[playerid] = 0;
	}
}

function ReduceTimer(playerid)
{
	Connect(playerid) {
		ReduceTime[playerid] = 0;
	}
}

function FreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 0);	}

function UnfreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 1);	}

function CheckForOpenDoor(playerid)
{
	new nick[24];	GetPlayerName(playerid,nick,24);
	if(Team_LSPD(playerid))
	{
		
		if (PlayerToPoint(10, playerid,1589.053344,-1638.123168,14.122960))
		{
			MoveDynamicObject(pdgate1,1599.053344,-1638.123168,14.122960, 0.8, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if (PlayerToPoint(15, playerid,1545.7398681641, -1627.7280273438, 15.206203460693))
		{
			MoveDynamicObject(pdgate2,1545.7392578125, -1627.7275390625, 20.381204605103, 3.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else Message(playerid, COLOR_GRAD2,"¡No hay señal!");
	}
	else if(Team_NG(playerid))
	{
		if(PlayerToPoint(20, playerid, 2758.20, -2565.70, 16.20))
		{
			MoveDynamicObject(saem1,2758.20, -2565.70, 8.15, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if(PlayerToPoint(20, playerid, 2671.70, -2504.00, 15.30))
		{
			MoveDynamicObject(saem2,2671.70, -2504.00, 8.85, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if(PlayerToPoint(20, playerid, 2617.10, -2404.50, 15.30))
		{
			MoveDynamicObject(saem3,2617.10, -2404.50, 9.34, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Team_SAMUR(playerid))
	{
		if(PlayerToPoint(20, playerid, 1140.1462,-1290.9423,13.5708))
		{
			MoveDynamicObject(hospitalgate, 1140.54, -1291.09, 9.14, 3.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Team_FBI(playerid))
	{
		if(PlayerToPoint(20, playerid, 938.3064,-1031.1683,31.8984))
		{
			SetDynamicObjectRot(fbibarra, 0.00, 26.00, 5.00);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Mafia_Yakuza(playerid))
	{
		if(PlayerToPoint(30, playerid, 321.5790,-1188.6155,76.3494))
		{
			MoveDynamicObject(yakuzagate, 321.38, -1188.19, 72.29, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Mafia_Italiana(playerid))
	{
		if(PlayerToPoint(30, playerid,1426.6943359375, -1882.537109375, 19.80619430542))
		{
			MoveDynamicObject(crgate,1426.6943359375, -1882.537109375, 19.80619430542, 1.5, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else if(Piratas4x4(playerid))
	{
		if(PlayerToPoint(20, playerid, 1025.3292,-366.0606,73.9231))
		{
			MoveDynamicObject(piratas, 1026.70, -366.81, 70.02, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal");
	}
	else if(Hitman(playerid))
	{
		if(PlayerToPoint(25, playerid, -284.00, -2190.38, 30.40))
		{
			MoveDynamicObject(mafia2,-284.00, -2190.38, 24.76, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else if(Mafia_Rusa(playerid))
	{
		if (PlayerToPoint(30, playerid,787.20361328,-1152.45361328,25.40438461))
		{
			MoveDynamicObject(rusg,787.20312500,-1152.45312500,29.85149193, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(30, playerid,662.1038,-1228.5162,15.5905))
		{
			MoveDynamicObject(rusg2,658.6991,-1225.7975,1.7825, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(30, playerid,665.0096,-1304.3438,13.4609))
		{
			MoveDynamicObject(rusg3,665.3931,-1308.6857,20.6859, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else if(Team_Mecanicos(playerid))
	{
		if (PlayerToPoint(10, playerid,1577.1700000,-2184.8200000,12.5400000))
		{
			MoveDynamicObject(meca1,1569.100000,-2184.8200000,12.5400000, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(10, playerid,1637.2500000,-2184.8000000,12.5400000))
		{
			MoveDynamicObject(meca2,1629.2500000,-2184.8000000,12.5400000, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(10, playerid,1634.3400000,-2165.8900000,14.5700000))
		{
			MoveDynamicObject(meca3,1634.3400000,-2165.8900000,5.5700000, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}

	else if(Journalist(playerid))
	{
		if (PlayerToPoint(30, playerid,781.77209500,-1330.31884800,12.68660500))
		{
			MoveDynamicObject(tvp, 773.89648400,-1330.31884800,12.68660500, 5.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if (PlayerToPoint(30, playerid,774.11425781,-1384.98632812,12.92022705))
		{
			MoveDynamicObject(tvp1, 765.11425781,-1384.98632812,12.92022705, 5.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	if(!strcmp(nick, "Charli_Navarro", true))
	{
		if (PlayerToPoint(30, playerid,1246.0033,-767.3727,91.1473))
		{
			MoveDynamicObject(lucianogate,1256.2033,-767.3727,91.1473, 2.2, -1000.0, -1000.0, -1000.0);
			return 1;
		}
	}
	if(!strcmp(nick, "Tomas_Fissore", true))
	{
		if (PlayerToPoint(30, playerid, 319.78, -1776.09, 6.60)) {
			MoveDynamicObject(fissore, 319.78, -1776.09, 0.66, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
	}
	else Message(playerid, COLOR_GREY,"Usted no tiene un mando a distancia.");
	return 1;
}

function CheckForCloseDoor(playerid)
{
	new nick[24];	GetPlayerName(playerid,nick,24);
	if(Team_LSPD(playerid))
	{
		if (PlayerToPoint(15, playerid,1589.053344,-1638.123168,14.122960))
		{
			MoveDynamicObject(pdgate1,1589.053344,-1638.123168,14.122960, 0.97, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if (PlayerToPoint(15, playerid,1545.7398681641, -1627.7280273438, 15.206203460693))
		{
			MoveDynamicObject(pdgate2, 1545.7398681641, -1627.7280273438, 15.206203460693, 3.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GREY,"No hay señal!");
	}

	else if(Team_NG(playerid))
	{
		if(PlayerToPoint(20, playerid, 2758.20, -2565.70, 16.20))
		{
			MoveDynamicObject(saem1, 2758.20, -2565.70, 16.20, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if(PlayerToPoint(20, playerid, 2671.70, -2504.00, 15.30))
		{
			MoveDynamicObject(saem2, 2671.70, -2504.00, 15.30, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if(PlayerToPoint(20, playerid, 2617.10, -2404.50, 15.30))
		{
			MoveDynamicObject(saem3, 2617.10, -2404.50, 15.30, 2.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Team_SAMUR(playerid))
	{
		if(PlayerToPoint(20, playerid, 1140.1462,-1290.9423,13.5708))
		{
			MoveDynamicObject(hospitalgate, 1140.54, -1291.09, 15.40, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Team_Mecanicos(playerid))
	{
		if (PlayerToPoint(10, playerid,1577.1700000,-2184.8200000,12.5400000))
		{
			MoveDynamicObject(meca1,1577.1700000,-2184.8200000,12.5400000, 1.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(10, playerid,1637.2500000,-2184.8000000,12.5400000))
		{
			MoveDynamicObject(meca2,1637.2500000,-2184.8000000,12.5400000, 1.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(10, playerid,1634.3400000,-2165.8900000,14.5700000))
		{
			MoveDynamicObject(meca3,1634.3400000,-2165.8900000,14.5700000, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Team_FBI(playerid))
	{
		if(PlayerToPoint(20, playerid, 938.3064,-1031.1683,31.8984))
		{
			SetDynamicObjectRot(fbibarra, 0.00, 90.00, 358.10);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Mafia_Yakuza(playerid))
	{
		if(PlayerToPoint(20, playerid, 321.5790,-1188.6155,76.3494))
		{
			MoveDynamicObject(yakuzagate, 321.32, -1188.11, 78.08, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal!");
	}
	else if(Mafia_Italiana(playerid))
	{
		if(PlayerToPoint(30, playerid,1426.6943359375, -1882.537109375, 19.80619430542))
		{
			MoveDynamicObject(crgate,1426.6943359375, -1882.537109375, 15.131196975708,2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else if(Piratas4x4(playerid))
	{
		if(PlayerToPoint(20, playerid, 1025.3292,-366.0606,73.9231))
		{
			MoveDynamicObject(piratas, 1026.70, -366.81, 75.70, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GRAD2, "¡No hay señal");
	}
	else if(Hitman(playerid))
	{
		if(PlayerToPoint(25, playerid, -284.00, -2190.38, 30.40))
		{
			MoveDynamicObject(mafia2, -284.00, -2190.38, 30.40, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		} else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else if(Mafia_Rusa(playerid))
	{
		if (PlayerToPoint(30, playerid,787.20361328,-1152.45361328,25.40438461))
		{
			MoveDynamicObject(rusg,787.20361328,-1152.45361328,25.40438461, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(30, playerid,662.1038,-1228.5162,15.5905))
		{
			MoveDynamicObject(rusg2,658.68890381,-1226.62780762,17.62639618, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		if (PlayerToPoint(30, playerid,665.0096,-1304.3438,13.4609))
		{
			MoveDynamicObject(rusg3,665.05010986,-1310.76293945,15.35269642, 2.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else if(Journalist(playerid))
	{
		if (PlayerToPoint(20, playerid,781.77209500,-1330.31884800,12.68660500))
		{
			MoveDynamicObject(tvp, 781.77209500,-1330.31884800,12.68660500,5.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else if (PlayerToPoint(20, playerid,774.11425781,-1384.98632812,12.92022705))
		{
			MoveDynamicObject(tvp1, 774.11425781,-1384.98632812,12.92022705,5.0, -1000.0, -1000.0, -1000.0);
			return 1;
		}
		else Message(playerid, COLOR_GREY,"¡No hay señal!");
	}
	else Message(playerid, COLOR_GREY,"Usted no tiene un mando a distancia.");
	return 1;
}

function OnPlayerCheckStat(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PlayerToPoint(4, playerid, 246.5186,108.5494,1003.2188) && !IsACop(playerid) && Revisado[playerid] == 0)
			{
				ProxDetector(40.0, playerid, "Seguridad: Hola, le vamos a proceder a quitar todo aquello que sea peligroso.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SetTimerEx("CleanPlayer", 5000, false, "i", playerid);
				Revisado[playerid] = 1;
			}
			return 1;
		}
	}
	return 1;
}

function CleanPlayer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4, playerid, 246.5186,108.5494,1003.2188))
		{
			ResetPlayerWeapons(playerid);
			ProxDetector(40.0, playerid, "Seguridad: Limpio, puede proceder.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			MoveDynamicObject(u7d3, 249.31018066406, 110.8671875, 1002.21875, 1.0, -1000.0, -1000.0, -1000.0);
			Revisado[playerid] = 1;
			MoveDynamicObject(u7d3, 247.81130981445, 110.8671875, 1002.21875, 0.5, -1000.0, -1000.0, -1000.0);
			return 1;
		}
	}
	return 1;
}

function RequestNPCLoad(playerid,npcname[])
{
	if(IsPlayerNPC(playerid))
	{
		if(!strcmp(npcname, "Beautiful_You", true))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 28);
			return 1;
		}
		if(!strcmp(npcname, "Homero_Rubio", true))
		{
			SetPlayerInterior(playerid, 7);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 179);
			return 1;
		}
		if(!strcmp(npcname, "Raul_Blanco", true))
		{
			SetPlayerInterior(playerid, 7);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 28);
			return 1;
		}
		if(!strcmp(npcname, "Agente_Richard", true))
		{
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 163);
			SafeGivePlayerWeapon(playerid, 31, 100);
			return 1;
		}
		if(!strcmp(npcname, "Roberto_Blanco", true))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 236);
		}
		if(!strcmp(npcname, "Padre_Torres", true))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 68);
			return 1;
		}
		if(!strcmp(npcname, "Angie_Torres", true))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerSkin(playerid, 11);
			return 1;
		}
	}
	return 1;
}

function RequestNPCJoin()
{
	npctoggle = 1;
	ConnectNPC("Beautiful_You","Black_Market");
	ConnectNPC("Homero_Rubio","Ammunation_Shop");
	ConnectNPC("Raul_Blanco","Ammu_Info");
	ConnectNPC("Agente_Richard","U7_Guard");
	ConnectNPC("Roberto_Blanco","NPC_Fishing");
	ConnectNPC("Padre_Torres","NPC_Iglesia");
	ConnectNPC("Angie_Torres","Casino_Bot");
}

function RequestNPCTalk(playerid,Float:range)
{
	if(GetClosestNPC(playerid,range) != -1)
	{
		new npcname[MAX_PLAYER_NAME];
		GetPlayerName(GetClosestNPC(playerid,range), npcname, sizeof(npcname));
		if(!strcmp(npcname, "Beautiful_You", true))
		{
			CamelMenu(playerid);
			return 1;
		}
		if(!strcmp(npcname, "Homero_Rubio", true))
		{
			if(PlayerInfo[playerid][pGunLic] == 0) return Message(playerid, COLOR_GRAD2, " Vendedor: ¡No le puedo vender armas, usted no tiene licencia!");
			if(CheckMoney(playerid, 1))
			{
				ShowAmmunation(playerid);
				ProxDetector(25.0, playerid, "Staff dice: ¿Buenas, que desea?",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
			else
			{
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~", 5000, 3);
				ProxDetector(25.0, playerid, "Staff dice: Lo siento, no puedo fiarte mas",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 1;
			}
		}
		if(!strcmp(npcname, "Raul_Blanco", true))
		{
			ShowPlayerDialog(playerid, DIALOG_AMMU_MANAGER,DIALOG_STYLE_LIST,"Ammunation", "Deseo mejorar mis habilidades a través de libros comprados\nQuiero informarme sobre mis habilidades con las diferentes armas", "Aceptar", "Cancelar");
		}
		if(!strcmp(npcname, "Agente_Richard", true))
		{
			ShowPlayerDialog(playerid,U7_OPEN,DIALOG_STYLE_LIST,">> Empresa de Investigacion <<","Abrir la puerta de seguridad\nAlarma! Avisar policía","Aceptar","Cancelar");
		}
		if(!strcmp(npcname, "Padre_Torres", true))
		{
			if(GetPlayerMoney(playerid) < 8000) return Message(playerid, COLOR_GRAD2, "¡No tienes dinero para pagar el valor de la ceremonia!");
			if(PlayerInfo[playerid][pMarried] == 1) return Message(playerid, COLOR_GRAD2, "¡Estas casado, no puedes usar este comando ahora!");
			if(PlayerInfo[playerid][pSex] == 2) return Message(playerid, COLOR_GRAD2, "¡No puedes usar este comando siendo mujer!");
			ShowPlayerDialog(playerid, MATRIMONIO_DIALOG, DIALOG_STYLE_INPUT,"{018CFE}Iglesia", "{FFFFFF}Por favor, ingrese la ID de la persona con\n la que quieres contraer matrimonio.","Aceptar","Cancelar");
		}
		if(!strcmp(npcname, "Roberto_Blanco", true))
		{
			ShowPlayerDialog(playerid,DIALOG_PUERTO,DIALOG_STYLE_LIST,"Puerto de Los Santos","{FFFFFF}Implementos de Pesca\nComprar Carnada\nVender Peces","Aceptar","Cancelar");
		}
		if(!strcmp(npcname, "Angie_Torres", true))
		{
			ShowPlayerDialog(playerid,CASINO_FICHAS,DIALOG_STYLE_LIST,"Casino Los Santos","{FFFFFF}Comprar Fichas\nCambiar Fichas","Aceptar","Cancelar");
		}
	}
	return 1;
}

function GetClosestNPC(playerid,Float:range)
{
	new x,Float:dis2,player;
	player = -1;
	if(IsPlayerNPC(playerid))
	{
		return player;
	}
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(IsPlayerNPC(x))
			{
				if(x != playerid)
				{
					dis2 = GetDistanceBetweenPlayers(x,playerid);
					if(dis2 < range && dis2 != -1.00)
					{
						range = dis2;
						player = x;
					}
				}
			}
		}
	}
	return player;
}

function SaveGuns(playerid)
{
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);
		if(wep != 0 && ammo != 0)
		{
			if(PlayerInfo[playerid][pWeapon] == 0) { PlayerInfo[playerid][pWeapon] = wep; PlayerInfo[playerid][pAmmo] = ammo; }
			else if(PlayerInfo[playerid][pWeapon2] == 0) { PlayerInfo[playerid][pWeapon2] = wep; PlayerInfo[playerid][pAmmo2] = ammo; }
			else if(PlayerInfo[playerid][pWeapon3] == 0) { PlayerInfo[playerid][pWeapon3] = wep; PlayerInfo[playerid][pAmmo3] = ammo; }
			else if(PlayerInfo[playerid][pWeapon4] == 0) { PlayerInfo[playerid][pWeapon4] = wep; PlayerInfo[playerid][pAmmo4] = ammo; }
			else if(PlayerInfo[playerid][pWeapon5] == 0) { PlayerInfo[playerid][pWeapon5] = wep; PlayerInfo[playerid][pAmmo5] = ammo; }
			else if(PlayerInfo[playerid][pWeapon6] == 0) { PlayerInfo[playerid][pWeapon6] = wep; PlayerInfo[playerid][pAmmo6] = ammo; }
			else if(PlayerInfo[playerid][pWeapon7] == 0) { PlayerInfo[playerid][pWeapon7] = wep; PlayerInfo[playerid][pAmmo7] = ammo; }
			else if(PlayerInfo[playerid][pWeapon8] == 0) { PlayerInfo[playerid][pWeapon8] = wep; PlayerInfo[playerid][pAmmo8] = ammo; }
			else if(PlayerInfo[playerid][pWeapon9] == 0) { PlayerInfo[playerid][pWeapon9] = wep; PlayerInfo[playerid][pAmmo9] = ammo; }
			else if(PlayerInfo[playerid][pWeapon10] == 0) { PlayerInfo[playerid][pWeapon10] = wep; PlayerInfo[playerid][pAmmo10] = ammo; }
			else if(PlayerInfo[playerid][pWeapon11] == 0) { PlayerInfo[playerid][pWeapon11] = wep; PlayerInfo[playerid][pAmmo11] = ammo; }
			else if(PlayerInfo[playerid][pWeapon12] == 0) { PlayerInfo[playerid][pWeapon12] = wep; PlayerInfo[playerid][pAmmo12] = ammo; }
		}
	}
	return 1;
}

function SaveAllGuns()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gPlayerLogged[i])
			{
				for(new slot = 0; slot != 12; slot++)
				{
					new wep, ammo;
					GetPlayerWeaponData(i, slot, wep, ammo);
					if(wep != 0 && ammo != 0)
					{
						if(PlayerInfo[i][pWeapon] == 0) { PlayerInfo[i][pWeapon] = wep; PlayerInfo[i][pAmmo] = ammo; }
						else if(PlayerInfo[i][pWeapon2] == 0) { PlayerInfo[i][pWeapon2] = wep; PlayerInfo[i][pAmmo2] = ammo; }
						else if(PlayerInfo[i][pWeapon3] == 0) { PlayerInfo[i][pWeapon3] = wep; PlayerInfo[i][pAmmo3] = ammo; }
						else if(PlayerInfo[i][pWeapon4] == 0) { PlayerInfo[i][pWeapon4] = wep; PlayerInfo[i][pAmmo4] = ammo; }
						else if(PlayerInfo[i][pWeapon5] == 0) { PlayerInfo[i][pWeapon5] = wep; PlayerInfo[i][pAmmo5] = ammo; }
						else if(PlayerInfo[i][pWeapon6] == 0) { PlayerInfo[i][pWeapon6] = wep; PlayerInfo[i][pAmmo6] = ammo; }
						else if(PlayerInfo[i][pWeapon7] == 0) { PlayerInfo[i][pWeapon7] = wep; PlayerInfo[i][pAmmo7] = ammo; }
						else if(PlayerInfo[i][pWeapon8] == 0) { PlayerInfo[i][pWeapon8] = wep; PlayerInfo[i][pAmmo8] = ammo; }
						else if(PlayerInfo[i][pWeapon9] == 0) { PlayerInfo[i][pWeapon9] = wep; PlayerInfo[i][pAmmo9] = ammo; }
						else if(PlayerInfo[i][pWeapon10] == 0) { PlayerInfo[i][pWeapon10] = wep; PlayerInfo[i][pAmmo10] = ammo; }
						else if(PlayerInfo[i][pWeapon11] == 0) { PlayerInfo[i][pWeapon11] = wep; PlayerInfo[i][pAmmo11] = ammo; }
						else if(PlayerInfo[i][pWeapon12] == 0) { PlayerInfo[i][pWeapon12] = wep; PlayerInfo[i][pAmmo12] = ammo; }
					}
				}
			}
		}
	}
	return 1;
}

function ShowBuyMenu(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerDialog(playerid,D247_BUY,DIALOG_STYLE_LIST, \
			"Comprar - 24 7","1.\tLotería\t\t\t\t(5$)\n2.\tSpray Anti-Ladrones\t\t(70$)\n3. \tRecargar saldo\n4.\tCigarros\t\t\t(10$)\n5.\tEncendedor\t\t\t(5$)\n6.\tGafas RayBan\t\t\t(300$)\n7.\tMaleta\t\t\t\t(175$)\n8.\tMochila\t\t\t\t(75$)\n9.\tCasco\t\t\t\t(120$)\n10.\tPatines\t\t\t\t(50$)","Comprar","Cancelar");
	}
	return 1;
}

function ShowAmmunation(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerDialog(playerid,AMMUNATION_MENU,DIALOG_STYLE_LIST,"Ammunation - Compras","Defensa personal\nPistolas\nEscopetas\nProtección\nLecciones","Ver","Salir");
	}
	return 1;
}

function CamelMenu(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerDialog(playerid,CAMEL_MENU,DIALOG_STYLE_LIST,"Traficante - Servicios","1-\tEntrégame un paquete.\n2-\tEntregar teléfonos robados\n3-\tAdquirir un DNI Falso","Aceptar","Salir");
		return 1;
	}
	return 1;
}

stock Bought(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
		new a[14];
		format(a,sizeof(a),"~r~ -%d$",amount);
		GameTextForPlayer(playerid, a, 5000, 1);
		GivePlayerMoney(playerid, -amount);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock Earn(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
		new a[12];
		format(a,sizeof(a),"~g~ %d$",amount);
		GameTextForPlayer(playerid, a, 5000, 1);
		GivePlayerMoney(playerid, amount);
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock CheckMoney(playerid, money)
{
	if(IsPlayerConnected(playerid))
	{
		new b[64];
		new xx;
		xx = money - (GetPlayerMoney(playerid));
		if(GetPlayerMoney(playerid) >= money)
		{
			return 1;
		}
		else
		{
			format(b,sizeof(b),"No tienes dinero suficiente! Te faltan %d$",xx);
			SendClientMessage(playerid, COLOR_GRAD2, b);
			return 0;
		}
	}
	return 0;
}

function OnGlobalPropTextdrawUpdate()
{
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		OnPropTextdrawUpdate(h)
	}
	return 1;
}

function OnPropTextdrawUpdate(hid)
{
	new string[256];
	if(HouseInfo[hid][hOwned] == 0)
	{
		DestroyDynamic3DTextLabel(House3DText[hid]);
		DestroyDynamicPickup(HousePickup[hid]);
		format(string, sizeof(string), "Casa en Venta\nPrecio: %d$\nNivel: %d\nID: %d\nUsa /comprarcasa",HouseInfo[hid][hValue],HouseInfo[hid][hLevel],hid);
		House3DText[hid] = CreateDynamic3DTextLabel(string,COLOR_GREEN, HouseInfo[hid][hEntrancex], HouseInfo[hid][hEntrancey], HouseInfo[hid][hEntrancez],6.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);
		HousePickup[hid] = CreateDynamicPickup(1273, 1, HouseInfo[hid][hEntrancex], HouseInfo[hid][hEntrancey], HouseInfo[hid][hEntrancez]);
	}
	else
	{
		DestroyDynamicPickup(HousePickup[hid]);
		HousePickup[hid] = CreateDynamicPickup(1239, 1, HouseInfo[hid][hEntrancex], HouseInfo[hid][hEntrancey], HouseInfo[hid][hEntrancez]);
		if(HouseInfo[hid][hRent] > 0)
		{
			DestroyDynamic3DTextLabel(House3DText[hid]);
			format(string, sizeof(string), "Propiedad en Renta\nDueño: %s\nRenta: %d$\nHabitaciones: %d\nID: %d\nUsa /rcuarto",HouseInfo[hid][hOwner],HouseInfo[hid][hRent],HouseInfo[hid][hRooms],hid);
			House3DText[hid] = CreateDynamic3DTextLabel(string,COLOR_GREEN, HouseInfo[hid][hEntrancex], HouseInfo[hid][hEntrancey], HouseInfo[hid][hEntrancez],6.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);
		}
		else
		{
			DestroyDynamic3DTextLabel(House3DText[hid]);
			format(string, sizeof(string), "Propiedad Privada\nDueño: %s\nID: %d",HouseInfo[hid][hOwner],hid);
			House3DText[hid] = CreateDynamic3DTextLabel(string,COLOR_GREEN, HouseInfo[hid][hEntrancex], HouseInfo[hid][hEntrancey], HouseInfo[hid][hEntrancez],6.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0);
		}
	}
	return 1;
}



function ShootAgain(playerid)
{
	Bowling[playerid] = 0;
	BowlingMoney[playerid] = 0;
}

function SetPlayerStats(playerid)
{
	if(PlayerInfo[playerid][pDEagle] > 600) PlayerInfo[playerid][pDEagle] = 999;
	if(PlayerInfo[playerid][pShotgun] > 600) PlayerInfo[playerid][pShotgun] = 999;
	if(PlayerInfo[playerid][pMP5] > 600) PlayerInfo[playerid][pMP5] = 999;
	if(PlayerInfo[playerid][pAK47] > 600) PlayerInfo[playerid][pAK47] = 999;
	if(PlayerInfo[playerid][pM4] > 600) PlayerInfo[playerid][pM4] = 999;
	if(PlayerInfo[playerid][pSniper] > 600) PlayerInfo[playerid][pSniper] = 999;
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDEagle])
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgun])
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5])
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47])
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4])
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniper])
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 300);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 300);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 300);

	SetPlayerFightingStyle (playerid, PlayerInfo[playerid][pFStyle]);
	SetPlayerWalkingStyle(playerid, PlayerInfo[playerid][pWalk]);
}

function TaxiRadar(playerid)
{
	new tInfo[1024];
	if(IsPlayerConnected(playerid))
	{
		format(tInfo, sizeof(tInfo), "1- %s (%s, %s) [Hace %d segundos]\n2- %s (%s, %s) [Hace %d segundos]\n3- %s (%s, %s) [Hace %d segundos]\n4- %s (%s, %s) [Hace %d segundos]\n5- %s (%s, %s) [Hace %d segundos]\n6- %s (%s, %s) [Hace %d segundos]\n7- %s (%s, %s) [Hace %d segundos]\n8- %s (%s, %s) [Hace %d segundos]\n[EXIT] << >> Salir del Radar << >>[EXIT]",
			PlayerName(TaxiSlot1),SlotZone1,SlotCity1,TiempoSlot1,
			PlayerName(TaxiSlot2),SlotZone2,SlotCity2,TiempoSlot2,
			PlayerName(TaxiSlot3),SlotZone3,SlotCity3,TiempoSlot3,
			PlayerName(TaxiSlot4),SlotZone4,SlotCity4,TiempoSlot4,
			PlayerName(TaxiSlot5),SlotZone5,SlotCity5,TiempoSlot5,
			PlayerName(TaxiSlot6),SlotZone6,SlotCity6,TiempoSlot6,
			PlayerName(TaxiSlot7),SlotZone7,SlotCity7,TiempoSlot7,
			PlayerName(TaxiSlot8),SlotZone8,SlotCity8,TiempoSlot8);
		ShowPlayerDialog(playerid,DIALOG_TAXI_RADAR,DIALOG_STYLE_LIST,"Taxi Radar LS",tInfo,"Ir","Borrar");
	}
}

function CheckVida()
{
	new Float:Life;
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerHealth(i,Life);
			if(Life < 15.1 && First_Spawn[i] == 0)
			{
				ForbidHandsUp[i] = 1;
				if(IsPlayerInAnyVehicle(i))
				{
					GetPlayerHealth(i, Life);
					SetHP(i, Life-1.0);
				}
				if(MensajeMuriendo[i]==0 && gPlayerLogged[i] == 1)
				{
					if(!IsPlayerInAnyVehicle(i))
					{
						Message(i,COLOR_LIGHTRED,"Tu estado actual es crítico. Te estás muriendo!");
						Message(i,COLOR_LIGHTRED,"Ojalá alguien pueda llamar a una ambulancia, y rápido!");
						Message(i,COLOR_LIGHTRED,"Si no es así, morirás en poco tiempo!");
						ApplyAnimation(i, "CRACK", "crckdeth1", 2.5, 1, 0, 1, 0, 0);
						MensajeMuriendo[i]=1;
						if(MsgL4L[i] == 0)
						{
							if(Life < 16 && Life > 12) { Left4Life[i] = 180; }
							if(Life < 13 && Life > 8) { Left4Life[i] = 149; }
							if(Life <  9) { Left4Life[i] = 99; }
							MsgL4L[i] = 1;
						}
					}
					if(IsPlayerInAnyVehicle(i))
					{
						Message(i,COLOR_LIGHTRED,"Tu estado actual es crítico. Te estás muriendo!");
						Message(i,COLOR_LIGHTRED,"Si sigues en el coche tu vida disminuairá más rapido!");
						Message(i,COLOR_LIGHTRED,"Intenta bajar inmediatamente!");
						MensajeMuriendo[i]=1;
					}
				}
			}
			else{MensajeMuriendo[i]=0; ForbidHandsUp[i] = 0; MsgL4L[i] = 0; Left4Life[i] = 0;}
		}
	}
}

function Spawned(playerid)
{
	First_Spawn[playerid] = 0;
}

function Tiempo1()
{
	for(new i=0;i<=MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			ComprobarKeysCatalogo(i);
		}
	}
	return 1;
}

function ComprobarKeysCatalogo(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		return 1;
	}
	new Keys,ud,lr;
	new string[128];
	GetPlayerKeys(playerid,Keys,ud,lr);
	if(lr > 0) // Right
	{
		if(PuedePresionar{playerid} == true)
		{
			if(RStep[playerid] == 1)
			{
				if(RegConfig[playerid] == 1)
				{
					if(RegText[playerid] == 1)
					{
						TDStr(RegDraw[playerid], "~n~~>~Sexo:  ~r~Masculino          ~w~Edad: ~r~?~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?");
						PlayerInfo[playerid][pSex] = 1;
						Skin(playerid, 26);
						PlayerInfo[playerid][pChar] = 26;
						RegText[playerid] = 2;
						PlayerPlaySound(playerid, 1054, 0,0,0);
						PuedePresionar{playerid} = false;
						SetTimerEx("VolverPresionar", 500, 0, "d", playerid);
						return 1;
					}
					else if(RegText[playerid] == 2)
					{
						TDStr(RegDraw[playerid], "~n~~>~Sexo:  ~r~Femenino          ~w~Edad: ~r~?~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?");
						PlayerInfo[playerid][pSex] = 2;
						Skin(playerid, 90);
						PlayerInfo[playerid][pChar] = 90;
						RegText[playerid] = 1;
						PlayerPlaySound(playerid, 1054, 0,0,0);
						PuedePresionar{playerid} = false;
						SetTimerEx("VolverPresionar", 500, 0, "d", playerid);
						return 1;
					}
				}
				else if(RegConfig[playerid] == 2)
				{
					if(PlayerInfo[playerid][pAge] > 98) return GText(playerid, "~w~Edad maxima: ~r~99", 3000, 3);
					PlayerInfo[playerid][pAge] ++;
					new mtext[12];
					if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
					format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~>~~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
					TDStr(RegDraw[playerid], string);
					PuedePresionar{playerid} = false;
					SetTimerEx("VolverPresionar", 100, 0, "d", playerid);
					return 1;
				}
				else if(RegConfig[playerid] == 3)
				{
					if(RegText[playerid] == 5)
					{
						return 1;
					}
					else
					{
						RegText[playerid] += 1;
						ChooseOrigin(playerid);
					}
				}
				else if(RegConfig[playerid] == 4)
				{
					if(RegText[playerid] == 13)
					{
						return 1;
					}
					else
					{
						RegText[playerid] += 1;
						ChooseWalk(playerid);
					}
				}
			}
		}
	}
	if(lr < 0) // Left
	{
		if(PuedePresionar{playerid} == true)
		{
			if(RStep[playerid] == 1)
			{
				if(RegConfig[playerid] == 1)
				{
					if(RegText[playerid] == 1)
					{
						TDStr(RegDraw[playerid], "~n~~>~Sexo:  ~r~Masculino          ~w~Edad: ~r~?~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?");
						PlayerInfo[playerid][pSex] = 1;
						RegText[playerid] = 2;
						Skin(playerid, 26);
						PlayerPlaySound(playerid, 1054, 0,0,0);
						PuedePresionar{playerid} = false;
						SetTimerEx("VolverPresionar", 500, 0, "d", playerid);
						return 1;
					}
					else if(RegText[playerid] == 2)
					{
						TDStr(RegDraw[playerid], "~n~~>~Sexo:  ~r~Femenino          ~w~Edad: ~r~?~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?");
						PlayerInfo[playerid][pSex] = 2;
						RegText[playerid] = 1;
						Skin(playerid, 90);
						PlayerPlaySound(playerid, 1054, 0,0,0);
						PuedePresionar{playerid} = false;
						SetTimerEx("VolverPresionar", 500, 0, "d", playerid);
						return 1;
					}
				}
				else if(RegConfig[playerid] == 2)
				{
					if(PlayerInfo[playerid][pAge] < 19) return GText(playerid, "~w~Edad minima: ~g~18", 3000, 3);
					PlayerInfo[playerid][pAge] --;
					new mtext[12];
					if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
					format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~>~~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~Sin Origen    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
					TDStr(RegDraw[playerid], string);
					PuedePresionar{playerid} = false;
					SetTimerEx("VolverPresionar", 100, 0, "d", playerid);
					return 1;
				}
				else if(RegConfig[playerid] == 3)
				{
					if(RegText[playerid] == 1)
					{
						return 1;
					}
					else
					{
						RegText[playerid] -= 1;
						ChooseOrigin(playerid);
					}
				}
				else if(RegConfig[playerid] == 4)
				{
					if(RegText[playerid] == 1)
					{
						return 1;
					}
					else
					{
						RegText[playerid] -= 1;
						ChooseWalk(playerid);
					}
				}
			}
		}
	}
	return 1;
}

function NewUs(playerid)
{
	NewUsed[playerid] = 0;
	return 1;
}

function VolverPresionar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		PuedePresionar{playerid} = true;
		return 1;
	}
	return 1;
}

function Reg_ShowDNI(playerid) { ShowDNI(playerid,playerid); }

function ShowDNI(playerid,targetid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new string[64], sex[2];
		if(PlayerInfo[playerid][pSex] == 1) { sex = "M"; }
		else								{ sex = "F"; }

		Message(targetid, 0x0D86FFFF, "|___________ Documento Nacional de Identidad ___________|");
		format(string, sizeof(string), "   Nombre: %s", PlayerName(playerid));
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Sexo: %s", sex);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Edad: %d     Fecha Nacimiento: %d", PlayerInfo[playerid][pAge], 2012-PlayerInfo[playerid][pAge]);
		Message(targetid, COLOR_WHITE, string);
		if(PlayerInfo[playerid][pMarried] == 1) format(string, sizeof(string), "   Estado Civil: Casado			Con: %s", PlayerInfo[playerid][pMarriedTo]);
		else format(string, sizeof(string), "   Estado Civil: Soltero");
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Nacionalidad: %s", PlayerStatInfo[playerid][1]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Nº DNI: %d", PlayerInfo[playerid][pDNI]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   IDSA%d%s<%s>%d-%d", PlayerInfo[playerid][pDNI],sex,PlayerName(playerid),2012-PlayerInfo[playerid][pAge],PlayerInfo[playerid][pAge]);
		Message(targetid, COLOR_GRAD2, string);
		Message(targetid, 0x0D86FFFF, "|_________________ ·------------------------------· _________________|");
	}
}

function ShowDNIFalse(playerid, targetid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new string[64], sex[2];
		if(PlayerInfo[playerid][pSex] == 1) { sex = "M"; }
		else								{ sex = "F"; }

		Message(targetid, 0x0D86FFFF, "|___________ Documento Nacional de Identidad ___________|");
		format(string, sizeof(string), "   Nombre: %s", PlayerInfo[playerid][pDNIName]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Sexo: %s", sex);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Edad: %d     Fecha Nacimiento: %d", PlayerInfo[playerid][pAge], 2012-PlayerInfo[playerid][pAge]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Estado Civil: Soltero");
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Nacionalidad: %s", PlayerStatInfo[playerid][1]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   Nº DNI: %d", PlayerInfo[playerid][pDNIFalse]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "   IDSA%d%s<%s>%d-%d", PlayerInfo[playerid][pDNIFalse],sex,PlayerInfo[playerid][pDNIFalse],2012-PlayerInfo[playerid][pAge],PlayerInfo[playerid][pAge]);
		Message(targetid, COLOR_GRAD2, string);
		Message(targetid, 0x0D86FFFF, "|_________________ ·------------------------------· _________________|");
	}
}

function RegMsn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerDialog(playerid,DIALOG_REG_MSN,DIALOG_STYLE_INPUT,"Información OOC","Registra tu e-mail","Registrar","Cancelar");
		return 1;
	}
	return 1;
}


stock Admin(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new admin = PlayerInfo[playerid][pAdminCP];
		if(admin	>=	lvl)
		{
			return 1;
		}
	}
	return 0;
}

new VehicleFriendlyNames[212][] = {
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},
	{"Dumper"},{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},
	{"Pony"},{"Mule"},{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},
	{"Washington"},{"Bobcat"},{"Mr. Whoopee"},{"BF. Injection"},{"Hunter"},{"Premier"},{"Enforcer"},
	{"Securicar"},{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Article Trailer"},
	{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
	{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Article Trailer 2"},{"Turismo"},{"Speeder"},
	{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},{"Skimmer"},
	{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},{"Sanchez"},
	{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},{"Rustler"},{"ZR-350"},
	{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},
	{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},{"Jetmax"},{"Hotring"},
	{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},{"Mesa"},{"RC Goblin"},
	{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},{"Super GT"},{"Elegant"},
	{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},{"Tanker"},{"Roadtrain"},
	{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},{"NRG-500"},{"HPV1000"},
	{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},{"Willard"},{"Forklift"},
	{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},{"Blade"},{"Freight"},{"Streak"},
	{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},{"Firetruck LA"},{"Hustler"},{"Intruder"},
	{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},
	{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},
	{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"Freight Flat"},{"Streak Carriage"},
	{"Kart"},{"Mower"},{"Dunerider"},{"Sweeper"},{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},
	{"Stafford"},{"BF-400"},{"Newsvan"},{"Tug"},{"Article Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Mobile Hotdog"},
	{"Club"},{"Freight Carriage"},{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car LSPD"},
	{"Police Car SFPD"},{"Police Car LVPD"},{"Police Ranger"},{"Picador"},{"S.W.A.T Van"},{"Alpha"},
	{"Phoenix"},{"Glendale"},{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},
	{"Boxville"},{"Farm Plow"},{"Utility Trailer"}
};

stock GetVehicleFriendlyName(vehicleid)
{
	new GVFNstring[56];
	format(GVFNstring, sizeof(GVFNstring), VehicleFriendlyNames[GetVehicleModel(vehicleid)-400]);
	return GVFNstring;
}

stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
	for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(Roadblocks[i][sCreated] == 0)
		{
			Roadblocks[i][sCreated] = 1;
			Roadblocks[i][sX] = x;
			Roadblocks[i][sY] = y;
			Roadblocks[i][sZ] = z-0.7;
			Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
			return 1;
		}
	}
	return 0;
}

stock DeleteAllRoadblocks(playerid)
{
	for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(PlayerToPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
		{
			if(Roadblocks[i][sCreated] == 1)
			{
				Roadblocks[i][sCreated] = 0;
				Roadblocks[i][sX] = 0.0;
				Roadblocks[i][sY] = 0.0;
				Roadblocks[i][sZ] = 0.0;
				DestroyDynamicObject(Roadblocks[i][sObject]);
			}
		}
	}
	return 0;
}

stock DeleteClosestRoadblock(playerid)
{
	for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(PlayerToPoint(5.0, playerid, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
		{
			if(Roadblocks[i][sCreated] == 1)
			{
				Roadblocks[i][sCreated] = 0;
				Roadblocks[i][sX] = 0.0;
				Roadblocks[i][sY] = 0.0;
				Roadblocks[i][sZ] = 0.0;
				DestroyDynamicObject(Roadblocks[i][sObject]);
				return 1;
			}
		}
	}
	return 0;
}

function Detective_FindPerson(playerid)
{
	Connect(playerid) {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(WhoFind[playerid], X,Y,Z);
		SetPlayerCheckpoint(playerid, X,Y,Z, 6);
		Message(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
		WhoFind[playerid] = 0;
	}
	return 1;
}

function Detective_FindCar(playerid)
{
	Connect(playerid) {
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(WhoFind[playerid], X,Y,Z);
		SetPlayerCheckpoint(playerid, X,Y,Z, 10);
		Message(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
		WhoFind[playerid] = 0;
	}
	return 1;
}

SearchHit(playerid)
{
	new string[128];
	if(IsPlayerConnected(playerid))
	{
		Message(playerid, COLOR_WHITE, "- Objetivos pendientes -");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pHead] > 0)
			{
				format(string, sizeof(string), "  Nombre: %s (Recompensa: %d)", PlayerName(i),PlayerInfo[i][pHead]);
				Message(playerid, WANTED_COLOR, string);
			}
		}
	}
	return 1;
}

function IntentarTimer(playerid)
{
	Intentar[playerid] = 0;
}

function BackupClear(playerid, timer)
{
	if(IsPlayerConnected(playerid))
	{
		if(RequestingBackup[playerid] == 1)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Team_LSPD(playerid)) SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
					else if(Team_NG(playerid)) SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
					else if(Team_FBI(playerid)) SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
				}
			}
			if(timer != 0) 	Message(playerid, TEAM_BLUE_COLOR, "Tu pedido de refuerzos ha sido cancelado automáticamente.");
			else 			Message(playerid, TEAM_BLUE_COLOR, "Tu pedido fue cancelado.");
			RequestingBackup[playerid] = 0;
		}
	}
	return 1;
}

function ChooseOrigin(playerid)
{
	if(RegConfig[playerid] == 3)
	{
		new mtext[12],string[256];
		if(RegText[playerid] == 1)
		{
			if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~>~~w~Origen: ~r~Argentina    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pOrigin] = 1;
		}
		else if(RegText[playerid] == 2)
		{
			if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~>~~w~Origen: ~r~España    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
			TDStr(RegDraw[playerid], Desbug(string));
			PlayerInfo[playerid][pOrigin] = 2;
		}
		else if(RegText[playerid] == 3)
		{
			if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~>~~w~Origen: ~r~Venezuela    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pOrigin] = 3;
		}
		else if(RegText[playerid] == 4)
		{
			if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~>~~w~Origen: ~r~Chile    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pOrigin] = 4;
		}
		else if(RegText[playerid] == 5)
		{
			if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~>~~w~Origen: ~r~Peru    ~w~Estilo: ~r~?", mtext, PlayerInfo[playerid][pAge]);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pOrigin] = 5;
		}
		PuedePresionar{playerid} = false;
		SetTimerEx("VolverPresionar", 300, 0, "d", playerid);
	}
}

function ChooseWalk(playerid)
{
	if(RegConfig[playerid] == 4)
	{
		new mtext[12],string[128],otext[12];
		if(PlayerInfo[playerid][pSex] == 1) mtext = "Masculino"; else mtext = "Femenino";
		if(PlayerInfo[playerid][pOrigin] == 1) otext = "Argentina";
		if(PlayerInfo[playerid][pOrigin] == 2) otext = "España";
		if(PlayerInfo[playerid][pOrigin] == 3) otext = "Venezuela";
		if(PlayerInfo[playerid][pOrigin] == 4) otext = "Chile";
		if(PlayerInfo[playerid][pOrigin] == 5) otext = "Peru";
		if(RegText[playerid] == 1)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~Normal", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 1;
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		}
		if(RegText[playerid] == 2)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~CIV", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 2;
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 3)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~GANG1", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 3;
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 4)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~GANG2", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 4;
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 5)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~VIEJO1", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 5;
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 6)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~VIEJO2", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 6;
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 7)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~GORDO", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 7;
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 8)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~MUJER1", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 8;
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 9)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~MUJER2", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 9;
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 10)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~PUTA1", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 10;
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 11)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~PUTA2", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 11;
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 12)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~EBRIO", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 12;
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		}
		else if(RegText[playerid] == 13)
		{
			format(string, sizeof(string), "~n~Sexo:  ~r~%s          ~w~Edad: ~r~%d~n~~n~~w~Origen: ~r~%s    ~>~~w~Estilo: ~r~CIEGO", mtext, PlayerInfo[playerid][pAge], otext);
			TDStr(RegDraw[playerid], string);
			PlayerInfo[playerid][pWalk] = 13;
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
		}
		PuedePresionar{playerid} = false;
		SetTimerEx("VolverPresionar", 400, 0, "d", playerid);
	}
}

stock SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
	SetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, A);
	SetPlayerInterior(playerid, interiorid);
	SetPlayerVirtualWorld(playerid, worldid);
}

stock PlayerName(playerid)
{
	new Nombre[24];
	GetPlayerName(playerid,Nombre,24);
	new N[24];
	strmid(N,Nombre,0,strlen(Nombre),24);
	for(new i = 0; i < MAX_PLAYER_NAME; i++)
	{
		if (N[i] == '_') N[i] = ' ';
	}
	return N;
}

function KickAFK(playerid)
{
	Message(playerid, COLOR_WHITE, "{FF9562}Has sido kickeado del servidor por permanecer más de 10 minutos en estado AFK.");
	Kick(playerid);
}

DetectNumber(string[])
{
	new NUMP, CUENTAN;
	for(NUMP = 0; NUMP < strlen(string); NUMP ++)
	{
		if(string[NUMP] == '0' || string[NUMP] == '1' || string[NUMP] == '2' || string[NUMP] == '3' || string[NUMP] == '4' || string[NUMP] == '5' || string[NUMP] == '6' || string[NUMP] == '7' || string[NUMP] == '8' || string[NUMP] == '9') CUENTAN ++;
	}
	if(CUENTAN >= 4) return 1;
	return 0;
}

function StopCall(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetTimerEx("RemoveHand", 1800, false, "i", playerid);
	new caller = Mobile[playerid];
	if(IsPlayerConnected(caller))
	{
		if(caller != INVALID_PLAYER_ID)
		{
			if(caller != 255)
			{
				if(caller < 255)
				{
					Message(caller,  COLOR_GRAD2, "Llamada finalizada.");
					Message(playerid,  COLOR_GRAD2, "Llamada finalizada.");
					CellTime[caller] = 0;
					CellTime[playerid] = 0;
					Mobile[caller] = 255;
				}
				Mobile[playerid] = 255;
				CellTime[playerid] = 0;
				Speaker[playerid] = 0;
			}
		}
	}
	Mobile[playerid] = 255;
}

function RemoveHand(playerid){
	RemovePlayerAttachedObject(playerid, 0);
	Att_Obj_Slot_0[playerid] = "Vacío";
}

function UntazePlayer(playerid){
	new string[128];
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	format(string, sizeof(string), "* Recuperado de la descarga (%s)", PlayerName(playerid));
	ProxDetector(30.0,playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
	PlayerTazeado[playerid] = 0;
	return 1;
}

stock Pause(playerid){
	TogglePlayerControllable(playerid,false);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid,x,y,z+1.5);
	SetTimerEx("UnfreezePlayer", 3000, false, "i", playerid);
}

stock FixAnim(playerid){
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}

stock Desbug(string[])
{
	new
	szFixed[1024],
	iPos,
	iLen;

	for (iLen = strlen(string); iPos < iLen; iPos ++)
		switch (string[iPos])
	{
		case 'à':	szFixed[iPos] = 151;
		case 'á':	szFixed[iPos] = 152;
		case 'â':	szFixed[iPos] = 153;
		case 'ä':	szFixed[iPos] = 154;
		case 'À':	szFixed[iPos] = 128;
		case 'Á':	szFixed[iPos] = 129;
		case 'Â':	szFixed[iPos] = 130;
		case 'Ä':	szFixed[iPos] = 131;
		case 'è':	szFixed[iPos] = 157;
		case 'é':	szFixed[iPos] = 158;
		case 'ê':	szFixed[iPos] = 159;
		case 'ë':	szFixed[iPos] = 160;
		case 'È':	szFixed[iPos] = 134;
		case 'É':	szFixed[iPos] = 135;
		case 'Ê':	szFixed[iPos] = 136;
		case 'Ë':	szFixed[iPos] = 137;
		case 'ì':	szFixed[iPos] = 161;
		case 'í':	szFixed[iPos] = 162;
		case 'î':	szFixed[iPos] = 163;
		case 'ï':	szFixed[iPos] = 164;
		case 'Ì':	szFixed[iPos] = 138;
		case 'Í':	szFixed[iPos] = 139;
		case 'Î':	szFixed[iPos] = 140;
		case 'Ï':	szFixed[iPos] = 141;
		case 'ò':	szFixed[iPos] = 165;
		case 'ó':	szFixed[iPos] = 166;
		case 'ô':	szFixed[iPos] = 167;
		case 'ö':	szFixed[iPos] = 168;
		case 'Ò':	szFixed[iPos] = 142;
		case 'Ó':	szFixed[iPos] = 143;
		case 'Ô':	szFixed[iPos] = 144;
		case 'Ö':	szFixed[iPos] = 145;
		case 'ù':	szFixed[iPos] = 169;
		case 'ú':	szFixed[iPos] = 170;
		case 'û':	szFixed[iPos] = 171;
		case 'ü':	szFixed[iPos] = 172;
		case 'Ù':	szFixed[iPos] = 146;
		case 'Ú':	szFixed[iPos] = 147;
		case 'Û':	szFixed[iPos] = 148;
		case 'Ü':	szFixed[iPos] = 149;
		case 'ñ':	szFixed[iPos] = 174;
		case 'Ñ':	szFixed[iPos] = 173;
		case '¡':	szFixed[iPos] = 64;
		case '¿':	szFixed[iPos] = 175;
		case '`':	szFixed[iPos] = 177;
		case '#':	szFixed[iPos] = 35;
		case '&':	szFixed[iPos] = 38;
		default:	szFixed[iPos] = string[iPos];
	}
	return szFixed;
}

function FuelCar(playerid, gasid)
{
	new string[128], idcar = GetPlayerVehicleID(playerid), engine,lights,alarm,doors,bonnet,boot,objective;
	if(engineOn[idcar] == 1)
	{
		format(string, sizeof(string), "* %s agarra la manguera y la introduce en el depósito.", PlayerName(playerid));
		ProxDetector(30.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new Float:boomx,Float:boomy,Float:boomz;
		GetVehiclePos(idcar,boomx,boomy,boomz);
		CreateExplosion(boomx, boomy , boomz, 7, 10);
		GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(idcar,0,0,alarm,doors,0,0,objective);
		engineOn[idcar] = 0;
		Refueling[playerid] = -1;
		return 1;
	}
	else
	{
		Refueling[playerid] = gasid;
		TogglePlayerControllable(playerid, 0);
		format(string, sizeof(string), "* %s agarra la manguera y la introduce en el depósito.", PlayerName(playerid));
		ProxDetector(30.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Message(playerid, COLOR_WHITE, "  El vehículo se está llenando, espera.");
		SetTimerEx("FillUp", RefuelWait, false, "i", playerid);
	}
	return 1;
}

function FillUp(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new idcar 	= 	GetPlayerVehicleID(playerid);
		new recgas = 5;
		if(IsAnOwnableCar(idcar)) recgas = CarInfo[idcar][cGas];

		new gasmax;
		if(Refueling[playerid] == 0) 		gasmax = gGas95_Full;
		else if(Refueling[playerid] == 1) 	gasmax = gGas98_Full;
		else if(Refueling[playerid] == 2) 	gasmax = gGasoil_Full;
		else if(Refueling[playerid] == 3) 	gasmax = gBiogas_Full;

		new pricegas;
		if(Refueling[playerid] == 0) 		pricegas = gGas95_Cost;
		else if(Refueling[playerid] == 1) 	pricegas = gGas98_Cost;
		else if(Refueling[playerid] == 2) 	pricegas = gGasoil_Cost;
		else if(Refueling[playerid] == 3) 	pricegas = gBiogas_Cost;

		new gasname[16];
		if(Refueling[playerid] == 0) 		gasname = "Sin plomo 95";
		else if(Refueling[playerid] == 1) 	gasname = "Sin plomo 98";
		else if(Refueling[playerid] == 2) 	gasname = "Gasoil";
		else if(Refueling[playerid] == 3) 	gasname = "Biodiesel";

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new string[128];
			new fillup 	= 	gasmax - Gas[idcar];
			new price   =   fillup * pricegas;

			if(recgas == 5 || recgas == Refueling[playerid])
			{
				Gas[idcar] += fillup;
				ClearChatbox(playerid, 10);
				Message(playerid, 0x0097DFFF, "|_________| Gasolina - Recibo |_________|");
				format(string,sizeof(string),"  Precio: %d$/l (%s)",pricegas, gasname);
				Message(playerid, COLOR_WHITE, string);
				format(string,sizeof(string),"  Depósito: %d/%d Pagado: %d litros",Gas[idcar],gasmax,fillup);
				Message(playerid, COLOR_WHITE, string);
				Message(playerid, 0x0097DFFF, "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _");
				format(string,sizeof(string),"  Total: %d$",price);
				Message(playerid, COLOR_WHITE, string);
				TogglePlayerControllable(playerid, 1);
				Refueling[playerid] = -1;
				if(PlayerToPoint(25.0, playerid, 1928.588012,-1776.303222,13.546898))   Till(11, price);
				if(isLSPDVehicle(idcar) || isSAMDVehicle(idcar) || isFBIVehicle(idcar) || isSAEMVehicle(idcar) ||  isTaxiTransportVehicle(idcar))
				{
					GText(playerid, "~g~0$", 5000, 1);
					Message(playerid, COLOR_WHITE, "** Tu empresa se hace responsable de los gastos.");
				}
				else
				{
					Bought(playerid, price);
				}
			}
			else
			{
				Gas[idcar] += fillup;
				ClearChatbox(playerid, 10);
				Message(playerid, 0x0097DFFF, "|_________| Gasolina - Recibo |_________|");
				format(string,sizeof(string),"  Precio: %d$/l (%s)",pricegas, gasname);
				Message(playerid, COLOR_WHITE, string);
				format(string,sizeof(string),"  Depósito: %d/%d Pagado: %d litros",Gas[idcar],gasmax,fillup);
				Message(playerid, COLOR_WHITE, string);
				Message(playerid, 0x0097DFFF, "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _");
				format(string,sizeof(string),"  Total: %d$",price);
				Message(playerid, COLOR_WHITE, string);
				TogglePlayerControllable(playerid, 1);
				SetVehicleHealth(idcar, 500.0);
				Refueling[playerid] = -1;
				if(isLSPDVehicle(idcar) || isSAMDVehicle(idcar) || isFBIVehicle(idcar) || isSAEMVehicle(idcar) || isTaxiTransportVehicle(idcar))
				{
					GText(playerid, "~g~0$", 5000, 1);
					Message(playerid, COLOR_WHITE, "** Tu empresa se hace responsable de los gastos");
				}
				else
				{
					Bought(playerid, price);
				}
			}
		}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(!IsAnOwnableCar(vehicleid))
	{
		new string[32];
		new Float:carpos_x,Float:carpos_y,Float:carpos_z;
		format(string, 128, "SA - %d",vehicleid);
		SetVehicleNumberPlate(vehicleid, string);
		GetVehiclePos(vehicleid,carpos_x,carpos_y,carpos_z);
		SetVehicleToRespawn(vehicleid);
		SetVehiclePos(vehicleid,carpos_x,carpos_y,carpos_z);
		return 1;
	}
	return 1;
}

function NoBattery(carid)
{
	if(CarInfo[carid][cBattery] == 0 && IsAnOwnableCar(carid))
	{
		return 1;
	}
	return 0;
}

function MM_Noise()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(PlayerToPoint(20.0,i,1641.2056,-2139.6641,13.4100))
		{
			PlayerPlaySound(i, 1133, 1641.2056,-2139.6641,13.4100);
		}
	}
}

function MM_Exam(playerid)
{
	vehicle_pcu(playerid, GetPlayerVehicleID(playerid));
	KillTimer(mmtimer);
}

function vehicle_pcu(playerid, vehicleid) {
	new bat = CarInfo[vehicleid][cBattery];
	new gas = CarInfo[vehicleid][cGas];
	new gasa = Gas[vehicleid];
	new gasname[20], mes[12], string[64];

	if(gas == 0) gasname = "Sin Plomo 95";
	else if(gas == 1) gasname = "Sin Plomo 98";
	else if(gas == 2) gasname = "Diesel/Gasoil";
	else if(gas == 3) gasname = "Biodiesel";

	if(bat < 100) mes = "Agotada";
	if(bat > 100 || bat < 1000) mes = "Baja";
	if(bat > 1000 || bat < 5000) mes = "Normal";
	if(bat > 5000) mes = "Óptima";

	ClearChatbox(playerid, 10);
	format(string, sizeof(string), "___________| %s |___________", CarInfo[vehicleid][cName]);
	Message(playerid, COLOR_BLUE, string);
	format(string, sizeof(string), "  Motor: %s", gasname);
	Message(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "  Estado Batería: %s", mes);
	Message(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "  Gasolina: %d", gasa);
	Message(playerid, COLOR_WHITE, string);
}
function V_Documents(playerid, targetid){
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new string[64];
		new xd = PlayerInfo[playerid][pPcarkey];
		format(string, sizeof(string), "|_______ %s _______|", PlayerName(playerid));
		Message(targetid, COLOR_YELLOW, string);
		format(string, sizeof(string), "  Modelo: %s  - Matrícula: %s", CarInfo[xd][cName], CarInfo[xd][cPlate]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "  Embargos: %d -  Multa: %d$", CarInfo[xd][cEmbargo], CarInfo[xd][cMulta]);
		Message(targetid, COLOR_WHITE, string);

	}
}

function V_Documents2(playerid, targetid){
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new string[64];
		new xd = PlayerInfo[playerid][pPcarkey2];
		format(string, sizeof(string), "|_______ %s _______|", PlayerName(playerid));
		Message(targetid, COLOR_YELLOW, string);
		format(string, sizeof(string), "  Modelo: %s  - Matrícula: %s", CarInfo[xd][cName], CarInfo[xd][cPlate]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "  Embargos: %d -  Multa: %d$", CarInfo[xd][cEmbargo], CarInfo[xd][cMulta]);
		Message(targetid, COLOR_WHITE, string);

	}
}

function V2_Documents(playerid, targetid){
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new string[64];
		new pc = PlayerInfo[playerid][pCarPremium];
		format(string, sizeof(string), "|_______ %s _______|", PlayerName(playerid));
		Message(targetid, COLOR_YELLOW, string);
		format(string, sizeof(string), "  Modelo: %s  - Matrícula: %s", CarInfo[pc][cName], CarInfo[pc][cPlate]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "  Embargos: %d -  Multa: %d$", CarInfo[pc][cEmbargo], CarInfo[pc][cMulta]);
		Message(targetid, COLOR_WHITE, string);
	}
}

function V3_Documents(playerid, targetid){
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new string[64];
		new pc = PlayerInfo[playerid][pCarPremium2];
		format(string, sizeof(string), "|_______ %s _______|", PlayerName(playerid));
		Message(targetid, COLOR_YELLOW, string);
		format(string, sizeof(string), "  Modelo: %s  - Matrícula: %s", CarInfo[pc][cName], CarInfo[pc][cPlate]);
		Message(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "  Embargos: %d -  Multa: %d$", CarInfo[pc][cEmbargo], CarInfo[pc][cMulta]);
		Message(targetid, COLOR_WHITE, string);
	}
}

stock MakeWeapon(playerid, mats, weaponid, ammo){
	new x[64], pmats = PlayerInfo[playerid][pMats];
	if(IsPlayerConnected(playerid)){
		if(pmats < mats){
			format(x, sizeof(x), "* Te faltan %d materiales.", pmats - mats);
			Message(playerid, COLOR_GRAD2, x);
			return 1;
		}
		else{
			SafeGivePlayerWeapon(playerid, weaponid, ammo);
			format(x, sizeof(x), "~w~arma creada~n~~r~materiales gastados:~w~%d", mats);
			GText(playerid, x, 3000, 3);
			PlayerInfo[playerid][pMats] -= mats;
			return 1;
		}
	}
	return 1;
}

function GetPlayerPass(playerid, name[], value[])
{
	if (!strcmp(name,"Key")) SetPVarString(playerid, "pPassword", value);
}

function GetPlayerDates(playerid, name[], value[])
{
	INI_String( "Key",          StatString[playerid][0], 28);
	INI_String( "MSN",			StatString[playerid][1], 28);
	INI_String( "MarriedTo",    StatString[playerid][2], 28);
	INI_Int( "Level",			StatInt[playerid][0]);
	INI_Int( "Money",			StatInt[playerid][1]);
	INI_Int( "Bank",			StatInt[playerid][2]);
	INI_Int( "Locked",			StatInt[playerid][3]);
	INI_Int( "Job",				StatInt[playerid][4]);
	INI_Int( "Donate",			StatInt[playerid][5]);
	INI_Int( "Married",			StatInt[playerid][6]);
	INI_Int( "AdminCP",			StatInt[playerid][7]);
	INI_Int( "House",           StatInt[playerid][8]);
	INI_Int( "Car",             StatInt[playerid][9]);
	INI_Int( "Car2",            StatInt[playerid][10]);
	INI_Int( "Negocio",         StatInt[playerid][11]);
	return 0;
}

stock TutorialStep_Forward(i)
{
	new string[512];
	if(IsPlayerConnected(i))
	{
		if(TutTime[i] >= 1)
		{
			switch (TutTime[i])
			{
				case 5:
				{
					Message(i, YELLOW, "{FF0000}Bienvenido a Hermandad Zero RolePlay, Veras un breve tutorial");
					Message(i, YELLOW, "{0000FF}Donde te mostraremos los lugares principales y te daremos consejos");
					Message(i, -1, "{FFFFFF}Si ya sabes rolear utiliza /saltartutorial");
					TextDrawShowForPlayer(i, Tutorial[i]);
					TextDrawShowForPlayer(i, Film_1);
					TextDrawShowForPlayer(i, Film_2);
					SetPlayerCameraPos(i,319.5357,-2046.7548,20.1987);
					SetPlayerCameraLookAt(i,392.0707,-2022.0400,20.1987);
					SetPosEx(i, 358.7035,-2069.7151,10.6953,298.2155,0,0);
					TogglePlayerControllable(i, 0);
					Muted[i] = 1;
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i,9)
					format(string, sizeof(string), 		"¡ Bienvenido a ~h~~y~Hermandad Zero  RolePlay~w~,  ~r~%s ~w~!~n~~n~	\
						Como ya habrás podido observar, ~b~Hermandad Zero RolePlay~w~ es un servidor de rol.~n~	\
						Asegúrate de tener ganas de rolear y de aceptar las reglas que establecemos. ~n~    \
						En caso contrario, eres libre de utilizar ~g~/quit~w~, para marcharte.",PlayerName(i));
					TextDrawSetString(Tutorial[i], Desbug(string));

				}
				case 15:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~y~http://www.hermandadzero.com/foro/ ~w~~n~~n~        \
						Recuerda que tu frecuente actividad en el foro es vital para estar actualizado~n~  	\
						con las últimas novedades del servidor. Podrás postularte a miembro de alguna~n~ 	\
						facción o bien, sugerirnos ideas para mejorar el servidor."));
				}
				case 25:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~Introducción ~w~~n~~n~					\
						El objetivo del tutorial, es que te hagas una idea de como funciona todo~n~	\
						y que empiezes con unos conocimientos básicos acerca de Rol.~n~	\
						Si te surge una duda, ¡ no seas modesto y compartela con la administración !"));
				}
				case 35:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~y~¿Qué es Role Play?~w~~n~~n~					\
						Role Play es tomar un papel de un personaje, no hay un guion a seguir~n~	\
						ya que el desarrollo de la historia queda por completo sujeto a las~n~	\
						decisiones de los jugadores."));
				}
				case 50:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~¿Qué es DeatMatch?~w~~n~~n~					\
						Es cuando tú matas a una o más personas sin razón alguna o por diversión,~n~	\
						hacer esto está penando. Cuando estás en algún rol de asesinato o es necesario~n~	\
						asesinar a alguien con ROL, entonces eso no se considera ~r~DeathMatch."));
				}
				case 65:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~g~¿Qué es PowerGaming?~w~~n~~n~					\
						Esto se le llama a los actos ficticios o más alla de lo humano, tambien~n~	\
						obligar o forzar a alguien a hacer un Rol. Tú no puedes hacer roles usando~n~	\
						el comando /me - ~p~Juan Rojas roba todo su dinero a Javier."));
				}
				case 80:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~¿Qué es MetaGaming?~w~~n~~n~					\
						Este termino debes estudiarlo muy bien para sobrevivir en un servidor de Role Play.~n~	\
						Se basa en cuando se confunde los canales IC y OOC. Si sabes algo OOC no puedes~n~	\
						utilizar esa información para beneficiarte IC."));
				}
				case 90:
				{
					ClearChatbox(i, 10);
					Message(i, -1, "{FFFFFF}Los canales IC son los siguientes: El chat normal - /radio - /g - /low.");
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~¿Qué es In Character [IC]?~w~~n~~n~					\
						IC se llama desde la información que tu personaje conoce y el rol que tú hagas.~n~	\
						No puedes llamar a una persona por su nombre sin antes haberle preguntado~n~	\
						o que te lo haya dicho, ya que no conoces a esa persona IC."));
				}
				case 105:
				{
					ClearChatbox(i, 10);
					Message(i, -1, "{FFFFFF}Los Canales OOC son los siguientes: /b - /f - /duda - /reportar - /w - /new");
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~¿Qué es Out Of Character [OOC]?~w~~n~~n~					\
						OOC se llama a lo contrario de IC, la persona que maneja tu personaje, osea tú.~n~	\
						Todo lo que sabe, todo lo que vive, eso es OOC. Actualmente el tutorial va hacia tí,~n~	\
						asi que no puedes usar información OOC en IC."));
				}
				case 120:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~¿Qué es RevengeKill?~w~~n~~n~					\
						Alguna vez tendrás que morir, pero verdaderamente no mueres, te logras~n~	\
						salvar y eres curado por los medicos, antes de esto te mataron por algún rol, no~n~	\
						puedes ir a vengarte a la persona que te mato, ya que no recuerdas nada."));
				}
				case 135:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~}Final del Tutorial de Conceptos de Rol~w~~n~~n~					\
						Esperamos que usted haya aprendido un poco de estas reglas ya que~n~	\
						son muy importantes cumplirlas. Al final de esto usa ~y~/ayudarol.~n~~n~	\
						~b~Web   : http://www.hermandadzero.com/"));
				}
				case 150:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,2442.000,-1659.000,28.000);
					SetPlayerCameraLookAt(i,2453.000,-1660.000,23.000);
					SetPosEx(i, 2505.1760,-1706.3964,13.5277,213.2191,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~g~Pandillas y bandas~w~~n~~n~					\
						Evita sus zonas, los 'guettos'. Si decides pasar por ahí~n~ \
						pasa sin dinero ... lo más probable es que te roben. Ah,~n~   \
						y siempre están haciendo guerra de bandas por sus terriorios."));
				}
				case 165:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,1521.2905,-1659.2491,13.3828);
					SetPlayerCameraLookAt(i,1553.5359,-1681.7788,25.4430);
					SetPosEx(i, 1547.3116,-1692.7671,13.9214,263.2561,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~b~Departamento de Policía~w~~n~~n~					\
						Si viste algun robo, o te han robado~n~ \
						no hay mejor lugar que ir al departamento de policia de Los Santos~n~   \
						Consejo: Aqui puedes conseguir trabajo y ganar dinero.."));
				}
				case 180:
				{
					ClearChatbox(i, 10);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~w~Tú tambien puedes formar parte de ellos!~n~~n~					\
						Ellos siempre están pendientes en reclutar cadetes para su ciudad~n~ \
						lo único que tienes que hacer es, tener buen un tiempo ~n~   \
						en la ciudad y dejar su hoja de vida en su sede. Ellos te llamarán"));
				}
				case 195:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,801.000,-1319.000,50.000);
					SetPlayerCameraLookAt(i,790.000,-1328.000,38.000);
					SetPosEx(i, 809.3252,-1310.8551,13.5391,184.1351,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~g~San Andreas Radio-Televisión~w~~n~~n~					\
						Este es el departamento de CNN. Si tienes noticias interesantes~n~ \
						ponte en contacto con ellos. ¿ Quieres una entrevista ? Ven.~n~   \
						También tienen un estudio, donde puedes grabar tus discos."));
				}
				case 210:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,1201.8060,-1312.1304,17.6054);
					SetPlayerCameraLookAt(i,1176.0504,-1325.5823,17.6054);
					SetPosEx(i, 1228.0928,-1294.8286,13.4566,318.1133,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~Servicio de Asistencia Municipal de Urgencia y Rescate~w~~n~~n~					\
						El SAMUR se ocupa de la salud de los ciudadanos de San Andreas.~n~ \
						Si padeces de alguna enfermedad o estás mal, ve a ellos y~n~   \
						déjate en sus manos. Recuerda que es mejor prevenir que lamentar."));
				}
				case 225:
				{
					ClearChatbox(i, 10);
					TextDrawShowForPlayer(i, Tutorial[i]);
					SetPosEx(i, 889.8480,-1014.2786,37.9250,1.3368,0,0);
					SetPlayerCameraPos(i, 930.4509,-976.7344,43.4699);
					SetPlayerCameraLookAt(i, 930.0687,-977.6572,43.5249);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~b~Federal Bureau of Investigation~w~~n~~n~					\
						El ~b~FBI~w~, se encarga de investigaciones en casos de tráfico~n~ \
						de droga, terrorismo, secuestros, etc.~n~   \
						Su sede es en ~y~Los Santos."));
				}
				case 240:
				{
					ClearChatbox(i, 10);
					SetPosEx(i, 422.2823,-1497.9290,31.1724,271.1912,0,0);
					SetPlayerCameraPos(i,431.000,-1510.000,34.000);
					SetPlayerCameraLookAt(i,438.000,-1507.000,35.000);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~Tienda de Ropa~w~~n~~n~					\
						En la ciudad hay diversas tiendas de ropa.~n~ \
						Podrás elegir entre una variedad extensa de 'skins'.~n~   \
						Recuerda que algunas están reservadas a facciones."));
				}
				case 250:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,2253.000,-1744.000,17.000);
					SetPlayerCameraLookAt(i,2248.000,-1738.000,17.000);
					SetPosEx(i, 2256.0886,-1757.8958,13.5469,5.3080,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~Gimnasio~w~~n~~n~					\
						En el gimnasio podrás aprender nuevos estilos de lucha~n~ \
						a un precio razonable. Use ~y~/apelear~w~ dentro~n~   \
						del gimnasio y podrá ver los estilos."));
				}
				case 260:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,1329.000,-1278.000,23.000);
					SetPlayerCameraLookAt(i,1339.000,-1280.000,23.000);
					SetPosEx(i, 1332.0735,-1270.7340,13.5525,216.7866,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~g~Habilidad de Armas~w~~n~~n~					\
						Absolutamente nadie nace sabiendo utilizar un Desert Eagle.~n~ \
						Para eso está Ammunation, donde aprenderás a utilizar las armas~n~   \
						mediante guias que puedes comprar y asi mejorar su habilidad."));
				}
				case 275:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i, 2801.6760, -1838.4375, 18.4401);
					SetPlayerCameraLookAt(i, 2801.0291, -1837.6775, 18.1051);
					SetPosEx(i, 2797.9883,-1798.2902,11.5401,225.3631,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~g~PaintBall LS~w~~n~~n~					\
						Si quieres aumentar tu habilidad con las armas puedes ir al~n~ \
						paintball con tus amigos, obtener diversion y experiencia~n~   \
						en el uso de las diferentes armas."));
				}
				case 290:
				{
					ClearChatbox(i, 10);
					SetPlayerCameraPos(i,1799.000,-1680.000,23.000);
					SetPlayerCameraLookAt(i,1809.000,-1682.000,23.000);
					SetPosEx(i, 1800.7739,-1678.1132,14.4939,213.9432,0,0);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~p~Discotecas~w~~n~~n~					\
						Aqui Podras Festejar  Tus Eventos Y fiestas Hay pista De Baile:~n~ \
						Tambien puedes realizar fiestas privada,O Venir A Tomar Algo~n~   \
						Eso si, ten cuidado con los mafiosos~~~~~~~~."));
				}
				case 305:
				{
					ClearChatbox(i, 6);
					TextDrawSetString(Tutorial[i], Desbug("	~h~~g~Uso del comando /new~w~~n~~n~					\
						Fue hecho para los nuevos usuarios, tenemos muchos~n~  \
						ayudantes \"helpers\" que lo pueden guiar en este modo de juego.~n~   \
						Recuerda usar el comando ~r~/new ~w~solo para dudas."));
				}
				case 315:
				{
					TextDrawSetString(Tutorial[i], Desbug("	~h~~r~Fin del Tutorial~w~~n~~n~					\
						Usa ~y~/new~w~ para preguntas frecuentes del servidor~n~ \
						Recuerda no abusar de los canales administrativos~n~   \
						Recuerda visitar nuestro ~h~~b~Foro~w~!"));
				}
				case 330:
				{
					TextDrawHideForPlayer(i, Film_1);
					TextDrawHideForPlayer(i, Film_2);
					TextDrawHideForPlayer(i, Tutorial[i]);
					Message(i, -1, "{F20C00}Atención! {FFFFFF}Ahora pasaremos al test de Rol, si usted falla mas de 5 preguntas, volverá a leer el tutorial.");
					ClearChatbox(i, 8);
					new tes[] = "{FFFFFF}Es atropellar a alguien con un auto.\nEs MetaPower, es tirarte de un edificio.\nEs decir información OOC en el juego.\nEs MetaGaming, la confunsión de canales IC u OOC.";
					ShowPlayerDialog(i, TEST_0, DIALOG_STYLE_LIST, "{4DE868}¿Que significa MG?", tes, "OK", "");
				}
			}
		}
	}
}

function CamaraLogueo(playerid)
{
	new RandomStart = random(7);
	switch(RandomStart)
	{
		case 0: {SetPlayerCameraPos(playerid, 1440.1466,-1578.7924,58.7301); 		SetPlayerCameraLookAt(playerid, 1480.8331,-1778.6486,87.0428);}
		case 1: {SetPlayerCameraPos(playerid, -2831.5222,1113.8793,30.0481); 		SetPlayerCameraLookAt(playerid, -2814.9211,1131.0520,26.2924);}
		case 2: {SetPlayerCameraPos(playerid, -207.0811,2141.6755,119.4371);    	SetPlayerCameraLookAt(playerid, -262.8133,2257.2371,64.1802);}
		case 3: {SetPlayerCameraPos(playerid, 1803.2928,-1402.7351,84.1086);     	SetPlayerCameraLookAt(playerid, 1597.0746,-1262.4785,274.3510);}
		case 4: {SetPlayerCameraPos(playerid, 1221.0970,-1513.5063,88.0689);     	SetPlayerCameraLookAt(playerid, 1453.7445,-1329.4412,327.4604);}
		case 5: {SetPlayerCameraPos(playerid, 1886.5455,-1236.3918,33.1253);     	SetPlayerCameraLookAt(playerid, 1958.2098,-1205.2679,23.5294);}
		case 6: {SetPlayerCameraPos(playerid, 208.7260,-1871.0435,8.5029);        	SetPlayerCameraLookAt(playerid, 143.6782,-1945.5010,9.1876);}
	}
	return 1;
}

stock IsPlayerInVehicleRadio(playerid, Float:radius)
{
	new Float:r, Float:rr, Float:rrr, Float:rc, Float:rrc, Float:rrrc;
	GetPlayerPos(playerid, r, rr, rrr);
	for(new i; i < MAX_VEHICLES; i++)
	{
		GetVehiclePos(i, rc, rrc, rrrc);
		if(PlayerToPoint(radius,playerid,rc,rrc,rrrc))
		{
			return i;
		}
	}
	return false;
}

DetectarSPAM(string[])
{
	new SSPAM;
	new CUENTAP,CUENTAN,CUENTADP,CUENTAGB,CUENTARM,CUENTAC;
	for(SSPAM = 0; SSPAM < strlen(string); SSPAM ++)
	{
		if(string[SSPAM] == '.') CUENTAP ++;
		if(string[SSPAM] == '0' || string[SSPAM] == '1' || string[SSPAM] == '2' || string[SSPAM] == '3' || string[SSPAM] == '4' || string[SSPAM] == '5' || string[SSPAM] == '6' || string[SSPAM] == '7' || string[SSPAM] == '8' || string[SSPAM] == '9') CUENTAN ++;
		if(string[SSPAM] == ':') CUENTADP ++;
		if(string[SSPAM] == '_') CUENTAGB ++;
		if(string[SSPAM] == ',') CUENTAC ++;
		if(string[SSPAM] == '-') CUENTARM ++;
	}
	if(CUENTAP >= 2 && CUENTAN >= 6) return 1;
	if(CUENTAC >= 2 && CUENTAN >= 6) return 1;
	if(CUENTAN >= 7) return 1;
	if(CUENTAGB >= 2 && CUENTAN >= 5) return 1;
	if(CUENTARM >= 1 && CUENTAN >= 6) return 1;
	if(CUENTADP >= 1 && CUENTAN >= 6) return 1;
	if(strfind(string, ".com", true) != -1 || strfind(string, ".com.ar", true) != -1 || strfind(string, ".org", true) != -1 || strfind(string, ".net", true) != -1 || strfind(string, ".es", true) != -1 || strfind(string, ".tk", true) != -1 || strfind(string, ".co.cc", true) != -1 || strfind(string, "Ciudad Prohibida", true) !=-1) return 1;
	if(strfind(string, ". com", true) != -1 || strfind(string, ". com.ar", true) != -1 || strfind(string, ". org", true) != -1 || strfind(string, ". net", true) != -1 || strfind(string, ". es", true) != -1 || strfind(string, ". tk", true) != -1 || strfind(string, ". co.cc", true) != -1 || strfind(string, "server", true) !=-1) return 1;
	if(strfind(string, "metropolis", true) != -1 || strfind(string, "ldds", true) !=-1 || strfind(string, "gamerol", true) !=-1 || strfind(string, "generolife", true) !=-1 || strfind(string, "zenon", true) !=-1 || strfind(string, "fenix", true) !=-1 || strfind(string, "CP", true) !=-1 || strfind(string, "servidor", true) !=-1) return 1;
	return 0;
}

AccionSPAM(playerid,string[])
{
	new x[186];
	format(x, sizeof(x), "{11BB11}- AntiSPAM {FFFFFF}|| {FF2200}%s(%d): {FFFFFF}%s ||", PlayerName(playerid),playerid, string); A_Info(x);
	return 1;
}

StringOther(playerid, const string[])
{
	if(IsPlayerConnected(playerid))
	{
		if(strfind(string, "=", true) != -1)    			return 0;
		else if(strfind(string, "\n", true) != -1) 			return 0;
		else return 1;
	}
	return 0;
}

stock CleanScreen()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		ClearChatbox(i, 100);
	}
	return 1;
}

function DisableVehicleAlarm(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}

function DrugsSmuggling(playerid, type, amount)
{
	new string[80],typetxt[12];
	switch(type){
		case 1:		typetxt = "Speed";
		case 2:		typetxt = "Extasis";
		case 3:		typetxt = "Ritalin";
		case 4:		typetxt = "Heroina";
		case 5:		typetxt = "Marihuana";
	}
	PlayerInfo[playerid][pDrugs] -= amount;

	Smuggling[playerid] = amount;
	SmugglingType[playerid] = type;
	format(string, sizeof(string), "¡Importaste %d drogas de %s, dirígete al Checkpoint!",Smuggling[playerid], typetxt);
	Message(playerid, COLOR_YELLOW, string);
	switch(type){
	    case 1:		SetPlayerCheckpoint(playerid,2666.1895,-1109.3519,69.3972,5.0); // SPEED
	    case 2:		SetPlayerCheckpoint(playerid,2657.6475,-2048.4001,13.6357,5.0); // ECTASY
	    case 3:		SetPlayerCheckpoint(playerid,1296.3634,-1251.0021,13.5469,5.0); // RITALIN
	    case 4:		SetPlayerCheckpoint(playerid,2351.8406,-1169.0435,27.9956,5.0); // HEROINA
	    case 5:		SetPlayerCheckpoint(playerid,2351.8406,-1169.0435,27.9956,5.0); // MARIHUANA
	}
}

function RespawnVehicles()
{
	Loop(c,VEH)
	{
		if(IsAnOwnableCar(c))
		{
			SetVehicleToRespawn(c);
			SetVehiclePos(c, CarInfo[c][cLocationx],CarInfo[c][cLocationy],CarInfo[c][cLocationz]);
			SetVehicleZAngle(c, CarInfo[c][cAngle]);
			SetVehicleParamsEx(c ,0,0,0,CarInfo[c][cLock],0,0,0);
			engineOn[c] = false;
			ChangeVehicleColor(c, CarInfo[c][cColorOne], CarInfo[c][cColorTwo]);
			Gas[c] = 100;
		}
		else
		{
			SetVehicleToRespawn(c);
			SetVehicleParamsEx(c ,0,0,0,0,0,0,0);
			engineOn[c] = false;
			Gas[c] = 100;
		}
	}
	GlobalMsg(COLOR_GREEN, "Respawn general terminado.");
	return 1;
}

function RespawnVehicle(c)
{
	if(IsAnOwnableCar(c))
	{
		SetVehicleToRespawn(c);
		SetVehiclePos(c, CarInfo[c][cLocationx],CarInfo[c][cLocationy],CarInfo[c][cLocationz]);
		SetVehicleZAngle(c, CarInfo[c][cAngle]);
		SetVehicleParamsEx(c ,0,0,0,CarInfo[c][cLock],0,0,0);
		engineOn[c] = false;
		ChangeVehicleColor(c, CarInfo[c][cColorOne], CarInfo[c][cColorTwo]);
		Gas[c] = 100;
	}
	else
	{
		SetVehicleToRespawn(c);
		SetVehicleParamsEx(c ,0,0,0,0,0,0,0);
		engineOn[c] = false;
		Gas[c] = 100;
	}
}

Accesory_Test(playerid, index, modelid, bone, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ, price)
{
	SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	ClothesID		[playerid] = modelid;
	ClothesPrice	[playerid] = price;
	return 1;
}

Accesory_Bandana(playerid, modelid)
{
	ClothesID	[playerid] = modelid;
	ClothesPrice[playerid] = 70;
	new SkinA = GetPlayerSkin(playerid);
	switch(SkinA)
	{
	        case 115:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); } // Mask7 - skinsur115
			case 114: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); } // Mask7 - skinsur114
			case 116: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); } // Mask7 - skinsur116
			case 173: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); } // Mask7 - skinsur116
			case 174: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); } // Mask7 - skinsur116
			case 175: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); } // Mask7 - skinsur116
		    //groves
	        case 271: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073522, 0.015061, -0.005912, 277.060668, 9.697027, 264.330200); } // Mask3 - saveskinryder
			case 270: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.083064, 0.015061, 0.003734, 270.357788, 2.187248, 264.330200); } // Mask3 - 270sweet
			case 269: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.083064, 0.017489, 0.002312, 270.357788, 2.187248, 266.944274); } // Mask3 - smoke269
			case 105: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754); } // Mask3 - tapadoskin 105 grove
			case 106: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084321, 0.032509, -0.006748, 268.970458, 1.533374, 269.223754); } // Mask3 - skin 106grove
			case 107: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084321, 0.035590, -0.004405, 268.970458, 1.533374, 269.223754); } // Mask3 - skin 107grove
			//Latinos
	        case 108: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084809, 0.026987, 0.000924, 273.545745, 0.572601, 264.837554 ); } // Mask6 - skinvago108
			case 109: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.081629, 0.035036, -0.006385, 273.545745, 0.572601, 264.837554 ); } // Mask6 - skinvago 109
			case 110: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058 ); } // Mask6 - skinvago110
			//Ballas
			case 102: 	{ SetPlayerAttachedObject(playerid, 4,18915, 2, 0.076758, 0.034728, -0.001697, 267.582092, 359.936279, 265.333801 ); } // Mask5 - skin102balla
			case 103: 	{ SetPlayerAttachedObject(playerid, 4,18915, 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); } // Mask5 - 103balla
			case 104: 	{ SetPlayerAttachedObject(playerid, 4,18915, 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); } // Mask5 - skin 104 balla
			case 293: 	{ SetPlayerAttachedObject(playerid, 4,18915, 2, 0.079601, 0.019614, -0.006095, 272.025512, 0.136046, 268.165863 ); } // Mask5 - oglock
			//Blood
			case 7: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.086248, 0.036498, -0.004328, 270.304412, 359.126678, 266.091674 ); } // Mask2 - blood - 7
			case 67: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.086248, 0.020672, 0.001285, 270.304412, 359.126678, 266.091674 ); } // Mask2 - blood - 67
			case 180: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084799, 0.039217, -0.007458, 270.304412, 359.126678, 271.452209 ); } // Mask2 - blood- 180
			case 19: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.081000, 0.026039, -0.004144, 270.304412, 359.126678, 271.452209 ); } // Mask2 - blood - 19
			case 144: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.110470, 0.043788, -0.002435, 266.909606, 358.832275, 267.704956 ); } // Bandana2 - 144 - blood
		    //Moteros
			case 23:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.082504, 0.038338, -0.005320, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 100 motero
			case 247: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 247 - motoquero
			case 248:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 248 - motoquero
			case 100:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 248 - motoquero
			case 33:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.041866, 0.015547, -0.001428, 271.371276, 356.919921, 269.937591 ); } // Mask2 - skin BIEN 33
		}
	}

	function SaveTrunk()
	{
		new idx, File: file2, coordsstring[128];
		idx = 1;
		while (idx < sizeof(CarInfo))
		{
			format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%f\n",
				vehTrunk[idx][1],
				vehTrunkAmmo[idx][1],
				vehTrunk[idx][2],
				vehTrunkAmmo[idx][2],
				vehTrunk[idx][3],
				vehTrunkAmmo[idx][3],
				vehTrunk[idx][4],
				vehTrunkAmmo[idx][4],
				vehTrunkCounter[idx],
				vehTrunkArmour[idx]);
			
			if(idx == 1)	file2 = fopen("trunk.cfg", io_write);
			else			file2 = fopen("trunk.cfg", io_append);

			fwrite(file2, coordsstring);
			idx++;
			fclose(file2);
		}
		return 1;
	}

	function LoadTrunk()
	{
		new arrCoords[13][64];
		new strFromFile2[128];
		new File: file = fopen("trunk.cfg", io_read);
		if (file)
		{
			new idx = 1;
			while (idx < sizeof(CarInfo))
			{
				fread(file, strFromFile2);
				split(strFromFile2, arrCoords, ',');
				vehTrunk[idx][1] = strval(arrCoords[0]);
				vehTrunkAmmo[idx][1] = strval(arrCoords[1]);
				vehTrunk[idx][2] = strval(arrCoords[2]);
				vehTrunkAmmo[idx][2] = strval(arrCoords[3]);
				vehTrunk[idx][3] = strval(arrCoords[4]);
				vehTrunkAmmo[idx][3] = strval(arrCoords[5]);
				vehTrunk[idx][4] = strval(arrCoords[6]);
				vehTrunkAmmo[idx][4] = strval(arrCoords[7]);
				vehTrunkCounter[idx] = strval(arrCoords[8]);
				vehTrunkArmour[idx] = floatstr(arrCoords[9]);
				idx++;
			}
		}
		return 1;
	}

	AddCarTuning(vehicleid)
	{
		ChangeVehicleColor(vehicleid, CarInfo[vehicleid][cColorOne], CarInfo[vehicleid][cColorTwo]);
		if(CarInfo[vehicleid][cWheel] > 0) 			AddVehicleComponent(vehicleid, CarInfo[vehicleid][cWheel]);
		if(CarInfo[vehicleid][cHydraulics] > 0) 	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cHydraulics]);
		if(CarInfo[vehicleid][cNitro] > 0) 	 		AddVehicleComponent(vehicleid, CarInfo[vehicleid][cNitro]);
		if(CarInfo[vehicleid][cSideskirt] > 0)
		{
			AddVehicleComponent(vehicleid, CarInfo[vehicleid][cSideskirt]);
			new skirt = CarInfo[vehicleid][cSideskirt];
        // X-FLOW
			if(skirt == 1030) AddVehicleComponent(vehicleid, 1031);
			else if(skirt == 1039) AddVehicleComponent(vehicleid, 1041);
			else if(skirt == 1048) AddVehicleComponent(vehicleid, 1052);
			else if(skirt == 1070) AddVehicleComponent(vehicleid, 1072);
			else if(skirt == 1057) AddVehicleComponent(vehicleid, 1063);
			else if(skirt == 1093) AddVehicleComponent(vehicleid, 1095);
        // ALIEN
			if(skirt == 1026) AddVehicleComponent(vehicleid, 1027);
			else if(skirt == 1036) AddVehicleComponent(vehicleid, 1040);
			else if(skirt == 1047) AddVehicleComponent(vehicleid, 1051);
			else if(skirt == 1069) AddVehicleComponent(vehicleid, 1071);
			else if(skirt == 1056) AddVehicleComponent(vehicleid, 1062);
			else if(skirt == 1094) AddVehicleComponent(vehicleid, 1090);
		}
		if(CarInfo[vehicleid][cRoof] > 0) 	 		AddVehicleComponent(vehicleid, CarInfo[vehicleid][cRoof]);
		if(CarInfo[vehicleid][cSpoiler] > 0) 	 	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cSpoiler]);
		if(CarInfo[vehicleid][cRearBumper] > 0) 	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cRearBumper]);
		if(CarInfo[vehicleid][cFrontBumper] > 0) 	AddVehicleComponent(vehicleid, CarInfo[vehicleid][cFrontBumper]);
		if(CarInfo[vehicleid][cExhaust] > 0) 		AddVehicleComponent(vehicleid, CarInfo[vehicleid][cExhaust]);
		if(CarInfo[vehicleid][cPaintjob] > 0) 		ChangeVehiclePaintjob(vehicleid, CarInfo[vehicleid][cPaintjob]-1);
	}

	stock IsLocolowVehicle(veh)
	{
		new model = GetVehicleModel(veh);
		switch(model)
		{
			case 412,534,535,536,566,567,576: return 1;
		}
		return 0;
	}

	stock IsWAAVehicle(veh)
	{
		new model = GetVehicleModel(veh);
		switch(model)
		{
			case 558,559,560,561,562,565: return 1;
		}
		return 0;
	}

	stock BikeModel(playerid)
	{
		new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(model)
		{
			case 509,481,510,462,448,581,522,461,521,523,463,586,468,471: return 1;
		}
		return 0;
	}

	stock Boats(veh)
	{
		new model = GetVehicleModel(veh);
		switch(model)
		{
			case 484,454,493,446,452,487: return 1;
		}
		return 0;
	}

	function ResetAcWarn(playerid)
	{
		PlayerGotSpottedRecently[playerid] = 0;
		Checked[playerid] = 0;
		return 1;
	}

	function SafeGivePlayerWeapon(playerid, weaponid, ammo)
	{
		ScriptWeaponsUpdated[playerid] = 1;
		GivePlayerWeapon(playerid, weaponid, ammo);
		SetTimerEx("UpdateWeapons",2500,false,"i",playerid);
		return 1;
	}

	function UpdateWeapons(plyid)
	{
		new weaponid, ammo;
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(plyid, i, weaponid, ammo);
			ScriptWeapons[plyid][i] = weaponid;
		}
		ScriptWeaponsUpdated[plyid] = 0;
		return 1;
	}

	public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
	{
		if(issuerid != INVALID_PLAYER_ID)
		{
        static Float:SacarVida; // Definimos para sacar la vida.
        GetPlayerHealth(playerid, SacarVida); // Extraemos info. de la vida del PJ.
        if(weaponid == 34)
        {
        	SetPlayerHealth(playerid, SacarVida-100);
        }

    }
    return 1;
}




Ayuda(playerid, tip)
{
	switch(tip)
	{
		case 0:
		{
			ClearChatbox(playerid, 10);
			if(Team_LSPD(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Departamento de Policía");
				Message(playerid, -1, "{0098FF}/radio - /r - /d - (/m)egafono - /su - /duty /esposar - /ta /revisarcarga /quitarcarga /revisarcasa /pstrips");
				Message(playerid, -1, "{0098FF}/quitar - /multar - /drag - /bk(c) - /tlc - /miranda - (/bar)rera - /qb(s) -  /placa - /expediente /qstrips");
				Message(playerid, -1, "{0098FF}/ant - /limpiar - /sospechosos - /vercinturon - /remolcar - /allanarcasa - /incautar - /darlicencia");
			}
			else if(Team_SAMUR(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Equipo SAMUR");
				Message(playerid, -1, "{EC3226}/rescatar /curar /diagnostico /pcinfo /operar /tlc /duty /sacarsangre");
			}
			else if(Team_Mecanicos(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Taller de Mecánicos");
				Message(playerid, -1, "{72DDC0} /mm /duty /gpsmeca /changeit");
			}
			else if(Moteros(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Moteros");
				Message(playerid, -1, "{72DDC0}/robarpieza /cerrajear /atar /robarbanco /vendar /lockhq");
			}
			else if(Pandilleros(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Pandilleros");
				Message(playerid, -1, "{72DDC0}/roba /robarbanco /lockhq");
			}
			else if(Mafioso(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Mafiosos");
				Message(playerid, -1, "{FFDD11}/robarpieza /cerrajear /atar /vendar /robarbanco /lockhq");
			}
			else if(Ballas_pand(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Ballas");
				Message(playerid, -1, "{72DDC0}/robar /robarbanco ");
			}
			else if(Hitman(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Hitman");
				Message(playerid, -1, "{FFDD11}/hits /encontrara /disfraz /amascara");
			}
			else if(Journalist(playerid))
			{
				Message(playerid, -1, "{FFFFFF}San Andreas Radio Televisión");
				Message(playerid, -1, "{00BB22}(/n)oticias /entrevista /centrevista");
			}
			else if(Presidente(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Presidente");
				Message(playerid, -1, "{FFDD11}(/gob)ierno /impuesto /fondoestado");
			}
			else if(Gobierno(playerid) && !Presidente(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Gobierno");
				Message(playerid, -1, "{ECE826}(/gob)ierno");
			}
			else if(Team_FBI(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Equipo FBI");
				Message(playerid, -1, "{72B3CD}(/r)adio (/d)epartments (/m)egaphone (/su)spect /arrestar /duty /esposar (/ta)zer /soltar");
				Message(playerid, -1, "{72B3CD}/revisar /cachearinv /quitar /multar /drag /miranda (/gob)ierno /allanarcasa /bk(c)");
				Message(playerid, -1, "{72B3CD}/placa (/ant)ecedente (/su)spect /limpiar /sospechosos /revisarcasa /incautar /retener");
			}
			else if(Team_NG(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Equipo Militar");
				Message(playerid, -1, "{72DD9B}(/r)adio (/d)epartments (/m)egaphone (/gob)ierno /equipo /esposar (/ta)zer /multar");
				Message(playerid, -1, "{72DD9B}/quitar /controlcelda /vercinturon /automatico /misil /revisarcarga /quitarcarga /bk(c)");
			}
			else if(IsANarco(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Narcotraficante");
				Message(playerid, -1, "{ECE826}/cosechardrogas /fabricar /venderarma /pda /importardrogas /venderdrogas /cancelardrogas");
			}
			else if(IsACorteJudicial(playerid))
			{
				Message(playerid, -1, "{FFFFFF}Corte Judicial");
				Message(playerid, -1, "{ECE826}/Equipo /Darjuicio /Arrestar /Duty /Radio /D ");
			}
		}
		case 1:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "{D3FF8D}Ayuda - Chat");
			Message(playerid, COLOR_WHITE, "{FFFFFF}Comandos IC:  (/g)ritar (/l)ow /me /do (/r)adio");
			Message(playerid, COLOR_WHITE, "{FFFFFF}Comandos OOC: /b (/w)hisper (/f)accion");
		}
		case 2:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "-=[Ayuda General]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: [ADMINISTRACIÓN] /re /duda /new /solicitaradmin");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /cuenta /subirnivel");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /pagar /hora /id /comer /cfumar /cropa /cropaid /licencias /acciones /sexo /ven /seguro");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /ap /cp /apgarage /cpgarage (/w)hisper /tognews /togooc /togfam /togpm /togphone");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /eject /usardrogas /llenar /admins /moneda /dar /drogas /ayudarol /pasar");
		}
		case 3:
		{
			ClearChatbox(playerid, 10);
			if(PlayerInfo[playerid][pLeader] < 1) return Message(playerid, COLOR_GRAD2, "¡No eres líder!");
			Message(playerid, COLOR_WHITE, "-=[Ayuda Líder]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /contratar /despedir /giverank [SOLO ALGUNAS] /fondos /retirarfondos");
		}
		case 4:
		{
			ClearChatbox(playerid, 10);
			if(PlayerInfo[playerid][pJob] == 0) return Message(playerid, COLOR_GRAD2, "¡No tienes trabajo!");
			Message(playerid, COLOR_WHITE, "-=[Ayuda Trabajo]=-");
			switch(PlayerInfo[playerid][pJob])
			{
				case 1,3:	{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /ruta"); }
				case 2:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /barrer /dbarrer"); }
				case 4:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /vendertelefono"); }
				case 5:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /robar"); }
				case 6:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /vpizza /tomarpizza [En la Cocina]"); }
				case 7:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /vermapa /pescar /peces"); }
				case 8:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /cancelarentrega"); }
				case 9:		{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /equipo /dutytaxi /clientes /tarifa"); }
				case 11:	{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /proteger"); }
				case 12:	{ Message(playerid, COLOR_GRAD2, "Comandos disponibles: /encontrar"); }
			}
		}
		case 5:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "-=[Ayuda Teléfono]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /movil (/telefono) /colgar /altavoz");
		}
		case 6:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "-=[Ayuda Casa]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /abrir /comprarcasa /vendercasa /renta /desalojar /cajafuerte /cinfo /garma /sarma /(g)bodega /sbodega /timehouse");
		}
		case 7:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "-=[Ayuda Vehiculo]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /v /venderveh(2) /cvehiculo(2) /darllaves");
		}
		case 8:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "-=[Ayuda Banco]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /depositar /sacar /transferir /balance /darcheque /cobrarcheques /vercheques");
		}
		case 9:
		{
			ClearChatbox(playerid, 10);
			if(PlayerInfo[playerid][pDonateT] < 0) return Message(playerid, COLOR_GRAD2, "¡Usted no es premium!");

			Message(playerid, -1, "{00E7FF}-=[Ayuda Premium]=-");
			Message(playerid, COLOR_GRAD2, "Comandos: /garageentrar /garagesalir /v seguro3 /v estacionar3");
			Message(playerid, COLOR_GRAD2, "Comandos: /cvehpremium /cambiarmiskin /traercarro /fixpremium");
			if(PlayerInfo[playerid][pDonateT] >= 2) {
				Message(playerid, COLOR_GRAD2, "Comandos Nivel 2: /cvehpremium2 /v seguro4 /v estacionar4 /traercarro2");
			}
		}
		case 10:
		{
			ClearChatbox(playerid, 10);
			Message(playerid, COLOR_WHITE, "-=[Ayuda Negocio]=-");
			Message(playerid, COLOR_GRAD2, "Comandos disponibles: /comprarnegocio /vendernegocio /sganancias /binfo /extorcion /qextorcion [Extorcion]/recaudar");
		}
	}
	return 1;
}

MessageEx(playerid_1, playerid_2, const color, const string[])
{
	Message(playerid_1, color, string);
	Message(playerid_2, color, string);
}

RadioMsg(const channel, const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++) {
		if(IsPlayerConnected(i) && RadioOn[i])
			if(PFrecuencia[i] == channel) Message(i, 0xDFD575FF, string);
	}
}

ArmarPaintBall(playerid)
{
	SetHP(playerid, 100);
	SetPlayerArmour(playerid, 100);
	SafeGivePlayerWeapon(playerid, 4, 1);
	SafeGivePlayerWeapon(playerid, 24, 250);
	SafeGivePlayerWeapon(playerid, 25, 200);
	SafeGivePlayerWeapon(playerid, 29, 500);
	SafeGivePlayerWeapon(playerid, 31, 500);
	return 1;
}

function PonerColor(playerid)	{	SetPlayerColor(playerid, Color[playerid]);	}

RobarBanco(playerid)
{
	new string[128];
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("RobandoBanco", 60000, false, "i", playerid);
	format(string,sizeof(string), "* %s toma las bolsas y empieza a guardar el dinero.", PlayerName(playerid));
	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(string,sizeof(string), "* %s (( Guardando Guardando ))", PlayerName(playerid));
	ProxDetector(20.0, playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
	Message(playerid, COLOR_GRAD2, "¡Debes esperar 60 segundos a que se llenen las bolsas!");
	ProxDetector(20.0, playerid, "* Banco (( Bip Bip Bip ))", 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
	ProxDetector(30.0, playerid, "¡La alarma contra robos ha sido activada, ya viene la policia!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	SetPlayerAttachedObject(playerid, 3, 1550, 1, 0.000000, -0.134457, 0.000000, 134.199493, 86.595359, 0.000000);
	SendRadioMessage(1, TEAM_RADIO_COLOR, "ATENCIÓN: Se informa a todas las unidades que el Banco Central de LS esta siendo robado.");
	return 1;
}

function RobandoBanco(playerid)
{
	new string[128];
	new robmoney = random(50000);
	Earn(playerid, 150000+robmoney);
	TogglePlayerControllable(playerid, 1);
	format(string, sizeof(string), "¡Han robado $%d, ahora salgan de ahí antes de que llegue la policia!", robmoney);
	Message(playerid, COLOR_GRAD2, string);
	SaveRobs();
	return 1;
}

function Pescando(playerid)
{
	new string[128], peces;
	peces = random(20);
	Fishing[playerid] = 0;
	format(string, sizeof(string), "* %s empieza a alzar las redes al barco y separa los peces.", PlayerName(playerid));
	ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(string, sizeof(string), "* Has atrapado %d peces.", peces+80);
	Message(playerid, COLOR_WHITE, string);
	PlayerInfo[playerid][pPeces] += peces+80;
	return 1;
}

function SendPBMessage(type, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PaintballType[i] == type)
		{
			Message(i, color, string);
		}

	}
}

function DialogoEstado(playerid)
{
	new string[80], SituacionEs[14];
	switch(EstadoON[playerid])
	{
		case 0: SituacionEs = "Habilitar";
		case 1: SituacionEs = "Deshabilitar";
	}
	format(string, sizeof(string), "Estado: %s\nAccion: %s", PlayerInfo[playerid][pEstado], SituacionEs);
	ShowPlayerDialog(playerid, DIALOG_ESTADO, DIALOG_STYLE_LIST, "Estado", string, "Seleccionar", "Salir");
}

function DestroyProgg(playerid)
{
	DestroyProgressBar(Cargando[playerid]);
	Cargando[playerid] = INVALID_BAR_ID;
	TogglePlayerControllable(playerid, 1);
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(UsingBelt[playerid] == 0)
	{
		new Float:X, Float:Y, Float:Z, Float:Speed, Float:Vida;
		GetPlayerHealth(playerid, Vida);	GetVehicleVelocity(vehicleid, X, Y, Z);
		Speed = floatmul(floatsqroot(floatadd(floatadd(floatpower(X, 2), floatpower(Y, 2)), floatpower(Z, 2))), 200.0);
		if(Speed > 10 && Speed < 20)        SetHP(playerid, Vida-2);
		else if(Speed > 21 && Speed < 50)	SetHP(playerid, Vida-5);
		else if(Speed > 51 && Speed < 100)	SetHP(playerid, Vida-9);
		else if(Speed > 101 && Speed < 200)	SetHP(playerid, Vida-12);
		else if(Speed > 201 && Speed < 280)	SetHP(playerid, Vida-15);
	}
	return 0;
}

function Remolcar(playerid)
{
	new idcarx = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetVehicleModel(idcarx) == 525)
		{
			new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found=0;
			new vid=0;
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(idcarx))
					{
						DetachTrailerFromVehicle(idcarx);
					}
					else
					{
						AttachTrailerToVehicle(vid,idcarx);
					}
				}
			}
			if(!Found)
			{
				Message(playerid,COLOR_GRAD2,"No hay ningún vehículo cerca!");
			}
		} else Message(playerid, COLOR_GRAD2, "¡No puedes remolcar con este vehículo!");
	} else Message(playerid, COLOR_GRAD2, "¡No estas conduciendo ningun vehículo!");
	return 1;
}



stock RepetirTuto(playerid)
{
	ClearChatbox(playerid, 8);
	Message(playerid, -1, "{FF0000}Has fallado mas de 3 preguntas, vuelves a leer el tutorial.");
	TutTime[playerid] = 3;
	TutorialStep_Forward(playerid);
	FailTuto[playerid] = 0;
}

ShowEditMenu(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid]))
	{
		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
	}
	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
		PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], 1, 1, 1);

	new stringg[512];
	format(stringg, sizeof(stringg), "%sParte (%s)\n", stringg, HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
	format(stringg, sizeof(stringg), "%sOffset X (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosX]*100));
	format(stringg, sizeof(stringg), "%sOffset Y (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosY]*100));
	format(stringg, sizeof(stringg), "%sOffset Z (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ]*100));
	format(stringg, sizeof(stringg), "%sRotacion X (%f)\n", stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotX]);
	format(stringg, sizeof(stringg), "%sRotacion Y (%f)\n", stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotY]);
	format(stringg, sizeof(stringg), "%sRotacion Z (%f)" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ]);
	ShowPlayerDialog(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Objeto Menu: Editar", stringg, "Seleccionar", "Cancelar");
}

SellHouse(playerid, houseid)
{
	PlayerInfo[playerid][pMats] += HouseInfo[houseid][hMats];
	PlayerInfo[playerid][pDrugs] += HouseInfo[houseid][hDrugs];
	PlayerInfo[playerid][pSpeed] += HouseInfo[houseid][hSpeed];
	PlayerInfo[playerid][pEctasy] += HouseInfo[houseid][hEctasy];
	PlayerInfo[playerid][pRitalin] += HouseInfo[houseid][hRitalin];
	PlayerInfo[playerid][pHeroina] += HouseInfo[houseid][hHeroina];
	PlayerInfo[playerid][pMarihuana] += HouseInfo[houseid][hMarihuana];
	HouseInfo[houseid][hLock] = 1;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hRent] = 0;
	HouseInfo[houseid][hTime] = 1999999999;
	HouseInfo[houseid][hRentabil] = 0;
	HouseInfo[houseid][hWep] = 0;
	HouseInfo[houseid][hAmmo] = 0;
	HouseInfo[houseid][hMats] = 0;
	HouseInfo[houseid][hDrugs] = 0;
	HouseInfo[houseid][hSpeed] = 0;
	HouseInfo[houseid][hEctasy] = 0;
	HouseInfo[houseid][hRitalin] = 0;
	HouseInfo[houseid][hHeroina] = 0;
	HouseInfo[houseid][hMarihuana] = 0;
	strmid(HouseInfo[houseid][hOwner], "El Estado", 0, strlen("El Estado"), 64);
	UpdateHouses();
	OnPropTextdrawUpdate(houseid);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

function SmokingCigarette(playerid)
{
	Connect(playerid) {
		if(IsSmoking[playerid] > 0)
		{
			new Float:PlayerHealth, string[128];
			GetPlayerHealth(playerid, PlayerHealth);
			switch(IsSmoking[playerid])
			{
				case 1:
				{
					format(string, sizeof(string), "* %s acaba su cigarro y tira lo al suelo.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					if( PlayerHealth < 100) SetHP(playerid, PlayerHealth+5);
					PlayerInfo[playerid][pCancer] += 2;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ClearAnimations(playerid);
				}
				case 20:
				{
					format(string, sizeof(string), "* %s hace circulos con el humo del cigarro.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					if( PlayerHealth < 100) SetHP(playerid, PlayerHealth+5);
					PlayerInfo[playerid][pCancer] += 2;
				}
				case 40:
				{
					format(string, sizeof(string), "* %s se fuma su cigarro al suave.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					if( PlayerHealth < 100) SetHP(playerid, PlayerHealth+5);
					PlayerInfo[playerid][pCancer] += 2;
				}
			}
			IsSmoking[playerid] -= 1;
		} else {
			KillTimer(SmokeTimer[playerid]);
		}
	}
	return 1;
}

function CloseEstac()
{
	MoveDynamicObject(estac, 1761.42, -1703.32, 12.60, 2.5, -1000.0, -1000.0, -1000.0);
	return 1;
}

function CloseEstac2()
{
	MoveDynamicObject(estac2, 1805.53, -1722.11, 14.18, 2.5, -1000.0, -1000.0, -1000.0);
	return 1;
}

function SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pJob] == job)
			{
				Message(i, color, string);
			}
		}
	}
}

function CheckSuciedad()
{
	for(new i=0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			new string[128], Float:health;
			if(PlayerInfo[i][pSuciedad] >= 65 && PlayerInfo[i][pSuciedad] < 66)
			{
				Message(i, COLOR_WHITE, "Tu ropa está un poco sucia, debes ir a lavarla.");
			}
			else if(PlayerInfo[i][pSuciedad] >= 80 && PlayerInfo[i][pSuciedad] < 82)
			{
				format(string, sizeof(string), "* %s desprende un olor un poco desagradable.", PlayerName(i));
				ProxDetector(20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(PlayerInfo[i][pSuciedad] >= 90)
			{
				GetPlayerHealth(i, health);
				format(string, sizeof(string), "* %s desprende un olor fétido.", PlayerName(i));
				ProxDetector(20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Message(i, COLOR_GRAD2, "* Tu ropa está sucia, debes ir a lavarla con urgencia.");
				SetHP(i, health-1);
			}
		}
	}
	return 1;
}

function CheckJetpack(){
	for(new i=0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK){
		    	if(JetPack[i] == 0){
		    		ClearAnimations(i);
				}else{
					return 1;
				}
			}
		}
	}
	return 1;
}

function CheckDinero() {
	for(new i=0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerMoney(i) < 0)
			{
				if(Advertencia_Debe[i] == 0)
				{
					new string25[150];
					format(string25, sizeof(string25), "Tienes una deuda de: $%d con el estado, tienes hasta el proximo pago de impuestos para pagar o seras arrestado.", GetPlayerMoney(i));
					SendClientMessage(i, COLOR_LIGHTRED, string25);
					Advertencia_Debe[i] = 1;
				}
			}
			else
			{
				Advertencia_Debe[i] = 0;
			}
		}
	}
}

function Lavadora(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[128];
		Bought(playerid, 200);
		Till(28, 150);
		format(string, sizeof string, "* %s toma su ropa limpia y se la pone.", PlayerName(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Message(playerid, COLOR_WHITE, "{F8FC2E}Lavanderia: {FFFFFF}Terminaste de lavar tu ropa, la cuenta es de 200$.");
		Skin(playerid, PlayerInfo[playerid][pChar]);
		PlayerInfo[playerid][pSuciedad] = 0;
	}
	return 0;
}
stock ActualizarArchivos()
{
	new File:file, string[100];
	if(fexist("AntiSpam.cfg") == 0)
	{
		file = fopen("AntiSpam.cfg", io_write);
		fwrite(file, "spam ");
		fclose(file);
	}

	AntiSpamC = 0;

	if((file = fopen("AntiSpam.cfg", io_read)))
	{
		while(fread(file, string))
		{
			AntiSpam[AntiSpamC] = string;
			AntiSpamC++;
		}
		fclose(file);	printf(" > %d palabras de spam fueron cargadas", AntiSpamC);
	}
}
	// de ropa binco
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == skinlist)
	{
		if(response)
		{
			PlayerInfo[playerid][pChar] = modelid;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			SendClientMessage(playerid, 0xFF0000FF, "Has comprado ropa nueva. Te ha costado 200$");
			GivePlayerMoney(playerid, -200);
			new datos[128];
			format(datos, sizeof(datos),"%s\n%d\0", PlayerName(playerid), GetPlayerSkin(playerid));
			dini_IntSet("armario.ini",datos,GetPlayerSkin(playerid));
			SendClientMessage(playerid, COLOR_GREEN, "Recordatorio: Usa /armario para ver las prendas de ropa que has adquirido");
		}
		else SendClientMessage(playerid, 0xFF0000FF, "Cancelado la selección de skin");
		return 1;
	}
	if(listid == armariolist)
	{
		if(response)
		{
			SetPlayerSkin(playerid, modelid);
		}
		else SendClientMessage(playerid, 0xFF0000FF, "Cancelado la selección de Skin");
		return 1;
	}
	return 1;
}
public BancoTextDraw()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
		new string[64]; format(string, sizeof(string), "~g~$~w~%d", PlayerInfo[i][pAccount] );
		TextDrawSetString(BalanceTextDraw[i], string );
	}
}